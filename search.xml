<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>math同余</title>
      <link href="/math-tong-yu/"/>
      <url>/math-tong-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z, m \in Z^+$，若有 $m | a - b$，则称 $a, b$ 模 $m$ 同余，记作 $a \equiv b \quad (mod \; m)$</p><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><ol><li><p>$a \equiv b \quad (mod \; m) \iff \exists q \in Z, a = b + q \cdot m$</p></li><li><p>模同余是一种等价关系，即有<strong>自反性</strong>、<strong>对称性</strong>、和<strong>传递性</strong></p></li><li><p>$a \equiv b \quad (mod \; m) \iff$ $a, b$ 被 $m$ 除的余数相同</p></li><li><p>同余做<strong>加法</strong>和<strong>乘法</strong>之后仍然同余</p></li></ol><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li>设 $d \cdot a \equiv d \cdot b \quad (mod \; m)$，若 $(d,m) = 1$，则 $a \equiv b \quad (mod \; m)$</li><li>$m \in Z^+$，设 $a \equiv b \quad (mod \; m)$，$d &gt; 0$，则 $a \cdot d \equiv b \cdot d \quad (mod \; d \cdot m)$</li><li>设 $a \equiv b \quad (mod \; m)$，若 $d | (a, b, m)$，则 $\frac{a}{d} \equiv \frac{b}{d} \quad (mod \; \frac{m}{d})$</li><li>设 $a \equiv b \quad (mod \; m)$，若 $d | m$，则 $a \equiv b \quad (mod \; d)$</li><li>设 $a \equiv b \quad (mod \; m_i)$，则 $a \equiv  b \quad mod([m_1, … m_k])$</li><li>设 $a \equiv b \quad (mod \; m)$，则 $(a, m) = (b, m)$</li></ul><h3 id="剩余类和完全剩余系"><a href="#剩余类和完全剩余系" class="headerlink" title="剩余类和完全剩余系"></a>剩余类和完全剩余系</h3><h4 id="剩余类与剩余"><a href="#剩余类与剩余" class="headerlink" title="剩余类与剩余"></a>剩余类与剩余</h4><p>$m \in Z^+$，$\forall a \in Z$，令 $C_a = \lbrace c | c \in Z, c \equiv a (mod \; m) \rbrace$，则 $C_a$ 称为模 $m$ 的 $a$ 的<strong>剩余类</strong>，一个剩余类中的任一数称为该类的<strong>剩余</strong>或<strong>代表元</strong>，若 $r_0, r_1, \dots, r_n \in Z$ 且任意两个数都不在同一个剩余类中，则称其为模 $m$ 的一个完全剩余系</p><p>通常将模 $m$ 的所有剩余类记作 $Z/mZ$，模 $m$ 的所有简化剩余类记作 $(Z/mZ)^*$</p><h4 id="完全剩余系"><a href="#完全剩余系" class="headerlink" title="完全剩余系"></a>完全剩余系</h4><p>$r_0, r_1, \dots ,r_n$ 为模 $m$ 的一个完全剩余系 $\iff$ 模 $m$ 两两不同余</p><p>一些特殊的完全剩余系：<strong>最小非负完全剩余系</strong>、<strong>最小正完全剩余系</strong>、<strong>最大非正完全剩余系</strong>、<strong>最大负完全剩余系</strong>、<strong>绝对值最小完全剩余系</strong> </p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li><font color="red">$m \in Z^+, (a, m) = 1$，$\forall b \in Z$，若 $k$ 遍历模 $m$ 的一个完全剩余系，则 $a \cdot k + b$ 也遍历模 $m$ 的一个完全剩余系</font></li><li>$(m_1, m_2) = 1$，若 $k_1, k_2$ 分别遍历模 $m_1, m_2$ 的完全剩余系，则 $m_2 \cdot k_1 + m_1 \cdot k_2$ 遍历模 $m_1 \cdot m_2$ 的完全剩余系</li></ul><h3 id="简化剩余系与欧拉函数"><a href="#简化剩余系与欧拉函数" class="headerlink" title="简化剩余系与欧拉函数"></a>简化剩余系与欧拉函数</h3><h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><p>欧拉函数 $\psi(m)$，指 $0, 1, \dots, m-1$ 中与 $m$ 互素的整数个数</p><h4 id="简化剩余类"><a href="#简化剩余类" class="headerlink" title="简化剩余类"></a>简化剩余类</h4><p>若剩余类 $C_a$ 中的一个剩余 $a$ 满足 $(a, m)=1$，则称该类为<strong>简化剩余类</strong>，简化剩余类中的剩余称为<strong>简化剩余</strong>，从每个简化剩余类中任取一个整数组成的集合称为<strong>简化剩余系</strong></p><p><strong>注：</strong>由定义可知 $|(Z/mZ)^*|=\psi(m)$</p><p>同剩余系，简化剩余也可分为一些特殊的简化剩余系</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$(a, m) = 1$，如果 $x$ 遍历模 $m$ 的一个简化剩余系，则 $a \cdot x$ 也遍历模 $m$ 的一个简化剩余系</p></li><li><p>$(a, m) = 1$，存在 $a^{-1} \in Z$，且 $1 \le a^{-1} &lt; m$，使得 $a \cdot a^{-1} \equiv 1 \quad (mod \; m)$ </p><ul><li>由 Bezout 等式立即得到结论成立</li></ul></li><li><p>$(m_1, m_2) = 1$，如果 $k_1, k_2$ 分别遍历模 $m_1,m_2$ 的简化剩余系，则 $m_2 \cdot k_1 + m_1 \cdot k_2$ 遍历模 $m_1 \cdot m_2$ 的简化剩余系</p></li><li><p><font color="red">$(m, n) = 1$，则 $\psi(mn)=\psi(m) \cdot \psi(n)$</font></p><ul><li>考虑 $xm + yn$ 由上一条定理立证</li></ul></li><li><p>设 $n = \Pi p_i^{\alpha_i}$，则 $\psi(n) = n \cdot \Pi(1-\frac{1}{p_i})$</p></li><li><p>$$<br>\sum_{d|m} \psi(d) = m<br>$$</p><ul><li><font color="red">该定理将用于原根的构造</font></li><li>$1, \dots , m$ 中的每一个整数按照与 $m$ 的最大公因数进行分类</li></ul></li></ul><h3 id="欧拉定理和费马小定理"><a href="#欧拉定理和费马小定理" class="headerlink" title="欧拉定理和费马小定理"></a>欧拉定理和费马小定理</h3><h4 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h4><p>若 $(a, m) = 1$，则有 $a^{\psi(m)} \equiv 1 \quad (mod \; m)$</p><h4 style="color:red;"> RSA  <p>设 $p, q$ 是两个不同的奇素数，$n = p \cdot q$，$a \in Z$ 且 $(a, n) = 1$，如果 $e$ 满足：<br>$$<br>1 &lt; e &lt; \psi(n), \quad (e, \psi(n)) = 1<br>$$<br>那么存在整数 $d$，使得 $e \cdot d \equiv 1 \quad (mod \; \psi(n))$，而且，对于整数<br>$$<br>a^e \equiv c \quad (mod \; n), \quad 1 &lt; c &lt; n<br>$$<br>有<br>$$<br>c^d \equiv a \quad (mod \; n)<br>$$<br>上述公钥为 $n,e$，私钥为 $p,q,d$，明文为 $a$，密文为 $c$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GeneratePrime</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""generate prime by miller robin algorithm"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> judge_numbers<span class="token punctuation">:</span> Iterable<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># judge_numbers are numbers to test in miller robin algorithm</span>        <span class="token keyword">if</span> <span class="token operator">not</span> judge_numbers<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>judge_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>judge_numbers <span class="token operator">=</span> judge_numbers    <span class="token keyword">def</span> <span class="token function">gen_nbit_prime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""generate nbit length prime"""</span>        <span class="token comment" spellcheck="true"># support n &lt;= 1024</span>        <span class="token keyword">assert</span> n <span class="token operator">&lt;=</span> <span class="token number">1024</span>        lower_bound <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> n        upper_bound <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> num <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># keep odd</span>            p <span class="token operator">=</span> randint<span class="token punctuation">(</span>lower_bound<span class="token punctuation">,</span> upper_bound<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> p            num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fail to find prime"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> p <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> p <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> judge_num <span class="token keyword">in</span> self<span class="token punctuation">.</span>judge_numbers<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>miller_robin_test<span class="token punctuation">(</span>p<span class="token punctuation">,</span> judge_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">miller_robin_test</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> int<span class="token punctuation">,</span> a<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""miller robin algorithm to test if p is prime        More details can be found in wikipedia "https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test"        """</span>        <span class="token comment" spellcheck="true"># fermat theorem: a^p = a (mod p) if p is prime</span>        <span class="token comment" spellcheck="true"># here we use builtin function for efficiency</span>        <span class="token keyword">if</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">!=</span> a<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        n <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># if x^2 = 1 (mod p) then, x = 1/p-1 (mod p)</span>        <span class="token keyword">while</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            remainder <span class="token operator">=</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">)</span>            <span class="token keyword">if</span> remainder <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            n <span class="token operator">//=</span> <span class="token number">2</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">RSA</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""RSA example    Description:        this implement 2.4.5 in chapter2    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nbit<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">65537</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        prime_gen <span class="token operator">=</span> GeneratePrime<span class="token punctuation">(</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> prime_gen<span class="token punctuation">.</span>gen_nbit_prime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>        q <span class="token operator">=</span> prime_gen<span class="token punctuation">.</span>gen_nbit_prime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>        n <span class="token operator">=</span> p <span class="token operator">*</span> q        phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>        d<span class="token punctuation">,</span> <span class="token operator">*</span>_ <span class="token operator">=</span> self<span class="token punctuation">.</span>extended_euclidean<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span>        d <span class="token operator">%=</span> phi_n        self<span class="token punctuation">.</span>private_key <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"p"</span><span class="token punctuation">:</span> p<span class="token punctuation">,</span>            <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span>            <span class="token string">"phi_n"</span><span class="token punctuation">:</span> phi_n<span class="token punctuation">,</span>            <span class="token string">"d"</span><span class="token punctuation">:</span> d        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>public_key <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"n"</span><span class="token punctuation">:</span> n<span class="token punctuation">,</span>            <span class="token string">"e"</span><span class="token punctuation">:</span> e        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""encrypt plaintext a with public key e"""</span>        e <span class="token operator">=</span> self<span class="token punctuation">.</span>public_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> self<span class="token punctuation">.</span>public_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> self<span class="token punctuation">.</span>private_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> self<span class="token punctuation">.</span>public_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">extended_euclidean</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""use extended euclidean algorithm to calculate s, t, k, s.t. sa + tb = k = (a, b)"""</span>        quotients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        q<span class="token punctuation">,</span> r1 <span class="token operator">=</span> divmod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        r2 <span class="token operator">=</span> b        quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">while</span> r1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            q<span class="token punctuation">,</span> r <span class="token operator">=</span> divmod<span class="token punctuation">(</span>r2<span class="token punctuation">,</span> r1<span class="token punctuation">)</span>            r2 <span class="token operator">=</span> r1            r1 <span class="token operator">=</span> r            quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        s<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        t<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>quotients<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r2</code></pre></h4><h4 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h4><p>$p$ 是一个素数，$\forall a,t,k \in Z$，有 $a^{t + k \cdot (p-1)} \equiv a^t \quad (mod \; p)$</p><h4 id="Wilson-定理"><a href="#Wilson-定理" class="headerlink" title="Wilson 定理"></a>Wilson 定理</h4><p>$p$ 是一个素数，则有<br>$$<br>(p-1)! \equiv -1 \quad (mod \; p)<br>$$</p><h3 style="color: red;">模重复平方计算法</h3><p>计算 $b^n \; (mod \; m)$ 的步骤：</p><ul><li>将 $n$ 表示成二进制 $n=(n_{k-1}n_{k-2} \cdots n_0)_2$</li><li>在模 $m$ 下计算 $b_0=b,b_1=b_0^2, \dots, b_{k-1}=b_{k-2}^2$</li><li>在模 $m$ 下计算 $a_0 = b_0^{n_0}, a_t=a_{t-1} \cdot b_t^{n_t}, \; \; t \in [1, k-1]$</li><li>$a_{k-1}$ 即为结果</li></ul><p>例子：计算 $312^{13} \; (mod \; 667)$<br>$$<br>\begin{align}&amp; 13 = (1101)_2 \\&amp; b_0 = b = 312； b_1 = b_0^2 = 629； b_2 = b_1^2 = 110；b_3 = b_2^2 = 94 \\&amp; a_0 = b_0^{n_0} = 312；a_1 = a_0 \cdot b_1^{n_1} = 312；a_2 = a_1 \cdot b_2^{n_2} = 303；a_3 = a_2 \cdot b_3^{n_3} = 468 \end{align}<br>$$<br>故结果为 $468$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exponentiation_by_squaring</span><span class="token punctuation">(</span>b<span class="token punctuation">:</span> int<span class="token punctuation">,</span> e<span class="token punctuation">:</span> int<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""calculate non-negative integer k that satisfies b^e = k (mod m)    Description:        This function implement exponentiation mod in chapter2    Args:        b: the base integer        e: the exponent integer        m: the modulus    Returns:        the non-negative integer k that satisfies b^e = k (mod m) and 0 &lt;= k &lt; m    """</span>    <span class="token keyword">def</span> <span class="token function">integer_to_binary</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""change non-negative integer s to binary"""</span>        bin_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            bin_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>            s <span class="token operator">//=</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># the binary is expressed as a_0 + a_1*2 + ... + a_n*2^n</span>        <span class="token keyword">return</span> bin_array    bin_list <span class="token operator">=</span> integer_to_binary<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># previously calculate b, b^2, b^4, ... in the case of module m</span>    previous_b_list<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>b <span class="token operator">%</span> m<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>bin_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        previous_b_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>previous_b_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">%</span> m<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># calculate k</span>    k <span class="token operator">=</span> b <span class="token operator">**</span> bin_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> m    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>bin_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> bin_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> k <span class="token operator">*</span> previous_b_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> m    <span class="token keyword">return</span> k</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi Query Parameters and String Validations</title>
      <link href="/fastapi-query-parameters-and-string-validations/"/>
      <url>/fastapi-query-parameters-and-string-validations/</url>
      
        <content type="html"><![CDATA[<h3 id="Query-Parameters-and-String-Validations"><a href="#Query-Parameters-and-String-Validations" class="headerlink" title="Query Parameters and String Validations"></a>Query Parameters and String Validations</h3><p><strong>FastAPI</strong> 允许对参数进行验证和声明附加信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>参数 <code>q</code> 的类型是 <code>str</code>，默认值为 <code>None</code>，因此是可选的</p><h3 id="Additional-validation"><a href="#Additional-validation" class="headerlink" title="Additional validation"></a>Additional validation</h3><p>下面的例子强制要求即使 <code>q</code> 是可选的，但是只要被提供，长度就不能超过 50 个字符</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p><strong>步骤</strong>：</p><ol><li>导入 <code>Query</code></li><li>使用 <code>Query</code> 作为函数参数的默认值：<ul><li><code>Query</code> 的第一个参数作为原函数参数的默认值</li><li>可以添加其他关键字参数来验证数据，如 <code>max_length</code> ，<code>min_length</code>，<code>regex</code> 等</li><li><code>Query</code> 显式表明了该参数为<strong>查询参数</strong></li><li>如果 <code>Query</code> 有默认值，那么该参数是可选的</li><li>如果期望声明必须参数，可以使用 <code>...</code> 作为 <code>Query</code>第一个参数</li></ul></li></ol><h3 id="Query-parameter-list-multiple-values"><a href="#Query-parameter-list-multiple-values" class="headerlink" title="Query parameter list / multiple values"></a>Query parameter list / multiple values</h3><p>当使用 <code>Query</code> 显示定义查询参数时，可以声明该参数接受值列表</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> query_items</code></pre><p>在上面的例子中，如果访问</p><p><code>http://localhost:8000/items/?q=foo&amp;q=bar</code></p><p>查询参数 <code>q</code> 的值是一个列表</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"q"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"foo"</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong>当使用 <code>list</code> 类型声明查询查询参数时，必须使用 <code>Query</code>，否则会被解释成 <strong>request body</strong></p><h3 id="Query-parameter-list-multiple-values-with-defaults"><a href="#Query-parameter-list-multiple-values-with-defaults" class="headerlink" title="Query parameter list / multiple values with defaults"></a>Query parameter list / multiple values with defaults</h3><p>同样的，可以为 <code>list</code> 类型定义默认值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> query_items</code></pre><p>如果访问</p><p><code>http://localhost:8000/items/</code></p><p>返回值为</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"q"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"foo"</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong>在上述例子中，如果使用 <code>list</code> 代替 <code>list[str]</code>，那么 <strong>FastAPI</strong> 将不会做类型检查，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> list <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> query_items</code></pre><h3 id="Declare-more-metadata"><a href="#Declare-more-metadata" class="headerlink" title="Declare more metadata"></a>Declare more metadata</h3><p>可以为参数添加更多的信息</p><p>这些信息将会被包含在自动生成的 <strong>OpenAPI</strong> 中，并且可以被用户文档界面和其他工具所使用</p><p><strong>注：</strong>不同的工具可能对 <strong>OpenAPI</strong> 的支持程度不同</p><p>下面是利用 <code>Query</code> 声明额外信息的例子</p><p>添加 <code>title</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Query string"</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>添加 <code>description</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>        None<span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"Query string"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"Query string for the items to search in the database that have a good match"</span><span class="token punctuation">,</span>        min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><h3 id="Alias-parameters"><a href="#Alias-parameters" class="headerlink" title="Alias parameters"></a>Alias parameters</h3><p>在 <code>Query</code> 中使用 <code>alias</code> 关键字可以为参数声明别名</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> alias<span class="token operator">=</span><span class="token string">"item-query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>在上述例子中 <code>item-query</code> 是 <code>q</code> 的别名，即访问：</p><p><code>http://127.0.0.1:8000/items/?item-query=foobaritems</code></p><p>相当于不使用别名访问</p><p><code>http://127.0.0.1:8000/items/?q=foobaritems</code></p><p><strong>注：</strong>使用别名之后将取代原名称，即声明别名 <code>item-query</code> 之后，只能通过上述第一个 URL 访问</p><h3 id="Deprecating-parameters"><a href="#Deprecating-parameters" class="headerlink" title="Deprecating parameters"></a>Deprecating parameters</h3><p>使用 <code>deprecated</code> 表明该参数将被废弃(仍可以使用，但在文档中会标注)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>        None<span class="token punctuation">,</span>        alias<span class="token operator">=</span><span class="token string">"item-query"</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"Query string"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"Query string for the items to search in the database that have a good match"</span><span class="token punctuation">,</span>        min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>        max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>        regex<span class="token operator">=</span><span class="token string">"^fixedquery$"</span><span class="token punctuation">,</span>        deprecated<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 函数参数</title>
      <link href="/python-han-shu-can-shu/"/>
      <url>/python-han-shu-can-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="可接受任意数量参数的函数"><a href="#可接受任意数量参数的函数" class="headerlink" title="可接受任意数量参数的函数"></a>可接受任意数量参数的函数</h3><p><strong>使用 * 参数，可以让一个函数接受任意数量的位置参数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>在上述例子中，<code>args</code> 是一个由除 <code>arg</code> 以外所有位置参数组成的元组</p><p><strong>使用 ** 参数，可以让一个函数接受任意数量的关键字参数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>在上述例子中，<code>kwargs</code> 是包含被传入进来的关键字参数字典</p><p><strong>同时使用 * 和 **，能够让函数接受任意数量的位置参数和关键字参数</strong></p><h3 id="只接受关键字参数的函数"><a href="#只接受关键字参数的函数" class="headerlink" title="只接受关键字参数的函数"></a>只接受关键字参数的函数</h3><p><strong>将参数放在 *参数或者单个 *后面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">other_test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>在上述例子中，<code>key</code> 必须为关键字参数</p><h3 id="仅限位置形参"><a href="#仅限位置形参" class="headerlink" title="仅限位置形参"></a>仅限位置形参</h3><p><strong>使用 <code>/</code> 指明某些函数的形参必须使用仅限位置而非关键字参数的形式</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span></code></pre><p>在上述例子中，<code>a</code>，<code>b</code> 为仅限位置形参，<code>c</code>，<code>d</code> 可以是位置形参也可以是关键字形参，<code>e</code> ，<code>f</code>必须为关键字形参</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request Body</title>
      <link href="/fastapi-request-body/"/>
      <url>/fastapi-request-body/</url>
      
        <content type="html"><![CDATA[<h3 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h3><p>当需要从客户端(如浏览器)发送数据到 API 时，可以借助 <strong>request body</strong> </p><p><strong>request body</strong>：从客户端发送到 API 的数据</p><p><strong>response body</strong>：从 API 发送到客户端的数据</p><p>API 总是需要发送 <strong>response body</strong>，但是客户端并不一定需要发送 <strong>request body</strong></p><p>借助 <strong>Pydantic</strong> 来声明 <strong>request body</strong></p><p><strong>注</strong>：</p><ul><li><p>通常不用 <code>GET</code> 发送 <strong>request body</strong> (实际上 <code>GET</code> <a href="https://juejin.im/entry/5badb020f265da0ac962abf2" target="_blank" rel="noopener">好像也是可以发送的</a>)</p></li><li><p>通常用：<code>POST</code>(最常见)，<code>PUT</code>，<code>DELETE</code>，<code>PATCH</code> 中的一种发送数据</p></li></ul><h3 id="Pydantic-example"><a href="#Pydantic-example" class="headerlink" title="Pydantic example"></a>Pydantic example</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> item</code></pre><p>声明 <strong>request body</strong> 步骤：</p><ol><li>导入 <code>BaseModel</code> </li><li>定义数据模型并继承于 <code>BaseModel</code>：<ul><li>要注意声明 Python types</li><li>和声明查询参数一样，当模型的属性有默认值时，该属性不是必须的，否则是必须的，用 <code>None</code> 声明可选参数</li></ul></li><li>声明数据模型为参数：<ul><li>类似路径参数和查询参数一样，将其加入到函数参数中，并声明类型为自定义的数据类型</li></ul></li></ol><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>使用上述的声明，<strong>FastAPI</strong> 将会：</p><ul><li>以 JSON 格式读取 <strong>request body</strong></li><li>将数据转化为相应的类型(如果需要的话)</li><li>验证数据：<ul><li>如果不合法，将会返回错误信息</li></ul></li><li>以定义的数据类型返回接受的数据，在上述例子中，<strong>request body</strong> 被转化为 Item 类型：<ul><li>如果在函数中声明了定义的数据类型，还将获得 IDE 支持</li></ul></li><li>为模型自动生成 JSON 模式定义</li><li>这些协议将作为自动生成的 <strong><a href="http://127.0.0.1:8000/openapi.json" target="_blank" rel="noopener">OpenAPI</a></strong> 的协议，并用作文档的自动生成</li></ul><h3 id="Automatic-docs"><a href="#Automatic-docs" class="headerlink" title="Automatic docs"></a>Automatic docs</h3><p>自定义模型的 JSON 协议将会作为自动生成 <strong>OpenAPI</strong> 协议的一部分，并且会通过交互式 API 文档展现</p><p>它们也会被用在每个需要path operation的 API 文档上</p><h3 id="Editor-support"><a href="#Editor-support" class="headerlink" title="Editor support"></a>Editor support</h3><p>IDE 将支持类型提示和自动补全，以及错误检查</p><h3 id="Use-the-model"><a href="#Use-the-model" class="headerlink" title="Use the model"></a>Use the model</h3><p>在函数中，可以直接访问所有数据模型的属性(和正常的访问没有区别)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    item_dict <span class="token operator">=</span> item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> item<span class="token punctuation">.</span>tax<span class="token punctuation">:</span>        price_with_tax <span class="token operator">=</span> item<span class="token punctuation">.</span>price <span class="token operator">+</span> item<span class="token punctuation">.</span>tax        item_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"price_with_tax"</span><span class="token punctuation">:</span> price_with_tax<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> item_dict</code></pre><h3 id="Request-body-path-parameters"><a href="#Request-body-path-parameters" class="headerlink" title="Request body + path parameters"></a>Request body + path parameters</h3><p>可以同时声明路径参数和 <strong>request body</strong></p><p><strong>FastAPI</strong> 能够自动识别函数参数中从路径中得到的<strong>路径参数</strong>和 <strong>request body</strong> 中获得的 <strong>Pydantic models</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Request-body-path-query-parameters"><a href="#Request-body-path-query-parameters" class="headerlink" title="Request body + path + query parameters"></a>Request body + path + query parameters</h3><p>可以同时声明路径参数、<strong>request body</strong> 以及查询参数</p><p><strong>FastAPI</strong> 能够自动识别它们</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><p><strong><font color="red">函数参数的识别遵循：</font></strong></p><ul><li>如果参数出现在 <strong>path</strong> 中，则为路径参数</li><li>如果参数具有单一的类型，则为查询参数</li><li>如果被声明为 <strong>Pydantic model</strong>，则为 <strong>request body</strong></li></ul><h3 id="Without-Pydantic"><a href="#Without-Pydantic" class="headerlink" title="Without Pydantic"></a>Without Pydantic</h3><p>可以使用 <strong>Body parameters</strong> 代替 <strong>Pydantic model</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Query Parameters</title>
      <link href="/fastapi-query-parameters/"/>
      <url>/fastapi-query-parameters/</url>
      
        <content type="html"><![CDATA[<h3 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h3><p>当声明的函数参数不是路径参数的一部分时，它们会被自动的解释为<a href="https://en.wikipedia.org/wiki/Query_string" target="_blank" rel="noopener">查询参数</a>(可以直观的理解为 URL 中 ? 后面，以 &amp; 分割的键值对)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_items_db <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>skip<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> fake_items_db<span class="token punctuation">[</span>skip <span class="token punctuation">:</span> skip <span class="token operator">+</span> limit<span class="token punctuation">]</span></code></pre><p>在上述例子中，如果访问 <code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10</code> ，则查询参数为：</p><ul><li>skip：值为 0</li><li>limit：值为 10</li></ul><p>查询参数作为 URL 的一部分，默认是<strong>字符串</strong>类型，如果被声明为其他的 python 类型，例如在上面的例子中被声明为 <code>int</code> ，则会被自动转化成整数类型并进行类型检查</p><p><strong>适用于路径参数的过程同样适用于查询参数</strong>：</p><ul><li>编辑器支持</li><li>数据解析</li><li>数据验证</li><li>自动文档</li></ul><h3 id="Defaults"><a href="#Defaults" class="headerlink" title="Defaults"></a>Defaults</h3><p>由于查询参数不是路径中固定的一部分，因此它们是可选的，并且可以有默认值</p><p>在上述例子中，访问 <code>http://127.0.0.1:8000/items/</code> 和访问 <code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10</code> 是等价的</p><p>，但是如果访问 <code>http://127.0.0.1:8000/items/?skip=20</code> ，则查询参数为：</p><ul><li>skip：20</li><li>limit：10</li></ul><h3 id="Optional-parameters"><a href="#Optional-parameters" class="headerlink" title="Optional parameters"></a>Optional parameters</h3><p>同样的，可以通过将默认值指定为 <code>None</code> 来声明<strong>可选</strong>查询参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><p>在上述例子中，参数 <code>q</code> 是可选的，并且默认值是 <code>None</code></p><p><strong>注</strong>：<strong>FastAPI</strong> 可以自动识别 <code>item_id</code> 为路径参数，<code>q</code> 是可选参数</p><h3 id="Query-parameter-type-conversion"><a href="#Query-parameter-type-conversion" class="headerlink" title="Query parameter type conversion"></a>Query parameter type conversion</h3><p>同样可以声明 <code>bool</code> 类型，它们也会被自动转换</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span> short<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> short<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"This is an amazing item that has a long description"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> item</code></pre><p>在这个例子中，访问如下网址及其大小写变体，都有 <code>short=True</code> 成立，<strong>相反的意思</strong> 则为 <code>False</code></p><ul><li><p><code>http://127.0.0.1:8000/items/foo?short=1</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=True</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=true</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=on</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=yes</code></p></li></ul><p><strong>注</strong>：相反的意思指的是单词的意思相反，如 0-1，true-false 等，访问其他不可解析的路径时会报错</p><h3 id="Multiple-path-and-query-parameters"><a href="#Multiple-path-and-query-parameters" class="headerlink" title="Multiple path and query parameters"></a>Multiple path and query parameters</h3><p>可以同时声明多个路径参数和查询参数，<strong>FastAPI</strong> 知道如何进行选择</p><p>由于 <strong>FastAPI</strong> 是根据参数的名字来判断的，因此对参数的声明顺序没有要求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>    user_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span> short<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"owner_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> short<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"This is an amazing item that has a long description"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> item</code></pre><h3 id="Required-query-parameters"><a href="#Required-query-parameters" class="headerlink" title="Required query parameters"></a>Required query parameters</h3><p>当声明的非路径参数(目前只介绍了查询参数)有默认值时，它不是必须的</p><p>如果只想设置可选参数而不指定特定值，则可以设置默认值为 <code>None</code></p><p>如果想要让查询参数是必须的，只需要不指定默认值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needy<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"needy"</span><span class="token punctuation">:</span> needy<span class="token punctuation">}</span>    <span class="token keyword">return</span> item</code></pre><p>在上面的例子中，<code>needy</code> 是类型为 <code>str</code> 的必须查询参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needy<span class="token punctuation">:</span> str<span class="token punctuation">,</span> skip<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"needy"</span><span class="token punctuation">:</span> needy<span class="token punctuation">,</span> <span class="token string">"skip"</span><span class="token punctuation">:</span> skip<span class="token punctuation">,</span> <span class="token string">"limit"</span><span class="token punctuation">:</span> limit<span class="token punctuation">}</span>    <span class="token keyword">return</span> item</code></pre><p>在上面的例子中，查询参数有 3 个：</p><ul><li>needy：类型为 <code>str</code> 的必选参数</li><li>skip：类型为 <code>int</code> 的可选参数，默认值为 0</li><li>limit：类型为 <code>int</code> 的可选参数</li></ul><p><strong>注</strong>：可以同上一节一样使用枚举变量</p><h3 id="Optional-type-declarations"><a href="#Optional-type-declarations" class="headerlink" title="Optional type declarations"></a>Optional type declarations</h3><p><strong>注</strong>：高级用法</p><p>在 <code>mypy</code> 中，如果使用：</p><pre class=" language-python"><code class="language-python">limit<span class="token punctuation">:</span> int <span class="token operator">=</span> None</code></pre><p>可能会出现错误：</p><pre class=" language-bash"><code class="language-bash">Incompatible types <span class="token keyword">in</span> assignment <span class="token punctuation">(</span>expression has <span class="token function">type</span> <span class="token string">"None"</span>, variable has <span class="token function">type</span> <span class="token string">"int"</span><span class="token punctuation">)</span></code></pre><p>可以通过 <code>Optional</code> 告知 <code>mypy</code> 值可以为 <code>None</code> ，例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optionallimit<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None</code></pre><p>在路径声明中，可以这样写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> limit<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"limit"</span><span class="token punctuation">:</span> limit<span class="token punctuation">}</span>    <span class="token keyword">return</span> item</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>integer divisibility</title>
      <link href="/math-zheng-shu-de-ke-chu-xing/"/>
      <url>/math-zheng-shu-de-ke-chu-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z$ 且 $b \neq 0$ ，如果存在 $q \in Z$ 使得<br>$$<br>a=q \cdot b<br>$$<br>则称 $b$ 整除 $a$ 或者 $a$ 被 $b$ 整除，记作 $b | a$ ，$b$ 称为 $a$ 的因数，$a$ 称为 $b$ 的倍数</p><h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><ul><li><p>当 $b$ 遍历整数 $a$ 的所有因数时，$-b$ 和 $\frac{a}{b}$ 也遍历 $a$ 的因数</p></li><li><p>若 $a_1, …, a_n \in Z$ 都是 $c \in Z^*$ 的倍数，则他们的整系数线性组合也是 $c$ 的倍数，即 $\forall s_1, …, s_n \in Z$ 都有 $c | a_1s_1+…+a_ns_n$</p></li><li><p>若 $p$ 是素数，且 $p|a_1a_2 \cdots a_n$ ，则 $ \exists i, 1 \le i \le n$，$p|a_i$</p></li></ul><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>$n \in Z^* $ 且 $n \neq \pm 1$ 且 $n$ 只有因数 $\pm1、\pm n$ ，则 $n$ 称之为<strong>素数</strong>，通常情况下约定素数为正整数，记作 $p$</p><h4 id="性质：-1"><a href="#性质：-1" class="headerlink" title="性质："></a>性质：</h4><ul><li>合数的大于 $1$ 的最小正因数 $p$ 必然是素数，且 $p \le \sqrt{n}$ </li><li>等差数列 $qn+l$ 在 $(q, l)=1$ 时有无穷多个素数，<a href="https://zhuanlan.zhihu.com/p/57379991" target="_blank" rel="noopener">Dirichlet</a></li></ul><h4 id="Eratosthenes"><a href="#Eratosthenes" class="headerlink" title="Eratosthenes"></a>Eratosthenes</h4><p>依次删除 $\le \sqrt{N}$ 的所有素数的倍数，可求得所有不大于给定正整数 $N$ 的素数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eratosthenes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""use eratosthenes sieve to count all prime number"""</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    sifter <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>    sifter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> sifter<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">//</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sifter<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> sifter<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="欧几里得除法"><a href="#欧几里得除法" class="headerlink" title="欧几里得除法"></a>欧几里得除法</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z$ ，且 $b &gt; 0$，则 $\forall c \in Z$ 存在唯一的整数 $q, r$ 使得 $a=q \cdot b + r$，$c \le r &lt; c+b$ </p><p>其中 $q$ 称为 $a$ 被 $b$ 除所得的不完全商，$r$ 叫做 $a$ 被 $b$ 除所得的余数</p><ul><li>$c=0$ 时称 $r$ 为最小非负余数</li><li>$c=1$ 时称 $r$ 为最小正余数</li><li>$c=-b+1$ 时称 $r$ 为最大非正余数</li><li>$c=-b$ 时称 $r$ 为最大负余数</li><li>若 $c$ 满足 $-\frac{b}{2} \le r &lt; \frac{b}{2} ,, or ,, -\frac{b}{2} &lt; r \le \frac{b}{2}$ 时称 $r$ 为绝对值最小余数</li></ul><h3 id="整数的表示"><a href="#整数的表示" class="headerlink" title="整数的表示"></a>整数的表示</h3><p>$\forall b \in Z ,, and ,, b &gt; 1$ ，每个正整数 $n$ 在 $b$ 进制下的表示<a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" target="_blank" rel="noopener">存在</a>且唯一，且 $n$ 的 $b$ 进制位数 $k=[\log_bn]+1$</p><h3 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h3><p>$d=(a_1,…,a_n)$ 称为最大公因数，如果：</p><ul><li>$d|a_1, …, d|a_n$</li><li>若 $e|a_1, …, e|a_n$，则 $e|d$</li></ul><h3 id="广义欧几里得除法"><a href="#广义欧几里得除法" class="headerlink" title="广义欧几里得除法"></a><font color="red">广义欧几里得除法</font></h3><img src="/img/math/2.png" alt="喵喵喵" style="zoom: 80%;"><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li>$n \le 5logb$ ，<em>运用数学归纳法可以证明 $b$ 不小于 $fibonacci$ 的第 $n+1$ 项</em></li></ul><h3 id="Bezout-等式"><a href="#Bezout-等式" class="headerlink" title="Bezout 等式"></a><font color="red">Bezout 等式</font></h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z^+$ ，存在整数 $s, t$ 使得 $sa+tb=(a,b)$  </p><h4 id="求整数-s-t-的方法"><a href="#求整数-s-t-的方法" class="headerlink" title="求整数 $s, t$ 的方法"></a>求整数 $s, t$ 的方法</h4><p><span id="1"><strong>方法一</strong></span>：首先根据广义欧几里得除法求出 $(a,b)=r_n$，带回并依次消去 $r_{n-1}, … ,r_1$</p><p>例如：$a=1859, b=1573$ ，求 $s, t$ 使得 $s \cdot a + t \cdot b=(a,b)$</p><p>根据欧几里得除法，我们有：<br>$$<br>\begin{align}&amp; 1859 = 1573 \times 1 + 286 \\ &amp; 1573 = 5 \times 286 + 143 \\ &amp; 286 = 2 \times 143\end{align}<br>$$<br>得到 $(a,b)=143$ ，带回<br>$$<br>\begin{align}143 &amp; = 1573 - 5 \times 286 \\ &amp; = 1573 - 5 \times (1859-1573) \\ &amp; = -5 \times 1859 + 6 \times 1573\end{align}<br>$$<br>于是 $s=-5, t=6$</p><p><strong>方法二</strong>：列表法</p><img src="/img/math/2.png" alt="喵喵喵" style="zoom:80%;"><p>依然使用<a href="#1">方法一</a>的例子</p><table><thead><tr><th align="center">$j$</th><th align="center">$s_j$</th><th align="center">$t_j$</th><th align="center">$q_{j+1}$</th><th align="center">$r_{j+1}$</th></tr></thead><tbody><tr><td align="center">-3</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1859</td></tr><tr><td align="center">-2</td><td align="center">1</td><td align="center">0</td><td align="center"></td><td align="center">1573</td></tr><tr><td align="center">-1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">286</td></tr><tr><td align="center">0</td><td align="center">$-s_{-1} \times q_0 + s_{-2} = 1$</td><td align="center">$-t_{-1} \times q_0 + t_{-2} = 1$</td><td align="center">5</td><td align="center">143</td></tr><tr><td align="center">1</td><td align="center">$-s_{0} \times q_1 + s_{-1} = -5$</td><td align="center">$-t_{0} \times q_1 + t_{-1} = 6$</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p>我们有 $s=s_1=-5, t=t_1=6, (a, b)=r_0=143$</p><p><strong>根据列表法求 s，t和(a,b)</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extended_euclidean</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""use extended euclidean algorithm to calculate s, t, k, s.t. sa + tb = k = (a, b)"""</span>    quotients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    q<span class="token punctuation">,</span> r1 <span class="token operator">=</span> divmod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    r2 <span class="token operator">=</span> b    quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token keyword">while</span> r1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        q<span class="token punctuation">,</span> r <span class="token operator">=</span> divmod<span class="token punctuation">(</span>r2<span class="token punctuation">,</span> r1<span class="token punctuation">)</span>        r2 <span class="token operator">=</span> r1        r1 <span class="token operator">=</span> r        quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>    s<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    t<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>quotients<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>t<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r2</code></pre><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li>若 $a, b \in Z$ 且 $a^2 + b^2 \neq 0$，则<ul><li>$\forall m \in Z^+$ ，$(a \cdot m, b \cdot m)=(a, b) \cdot m$</li><li>若 $d \in Z^*$，且 $d|a, d|b$ ，则 $(\frac{a}{d}, \frac{b}{d})=\frac{(a,b)}{|d|}$<ul><li>特别的，若取 $d=(a,b)$，则我们可以构造两个互素的整数 $\frac{a}{d}, \frac{b}{d}$</li></ul></li></ul></li><li>$a, b, c \in Z, ,, b \ne 0, c \ne 0$ 且 $(a, c)=1$，则有 ：</li></ul><p>$$<br>(ab, c)=(b,c)<br>$$</p><ul><li>$a_i, c \in Z$ 且 $(a_i, c)=1$ 则有：</li></ul><p>$$<br>(\Pi_{i=1}^{n}a_i, c)=1<br>$$</p><ul><li>$a, b \in Z^+$，则 $(2^a-1, 2^b-1)=2^{(a,b)}-1$ </li></ul><p><strong>注</strong>：</p><blockquote><ol><li>Bezout 等式可扩展到 $n$ 维的情况</li><li>求 n 个数的最大公因数相当于递归的求两个数的最大公因数</li></ol></blockquote><h3 id="整数分解"><a href="#整数分解" class="headerlink" title="整数分解"></a>整数分解</h3><p>给定正合数 $n &gt; 1$，若 $ \exists a,b$ ，满足：<br>$$<br>n|a^2-b^2 \\ n \nmid a+b \\ n \nmid a-b<br>$$<br>则 $(n, a-b)$，$(n,a+b)$ 都是 $n$ 的真因数</p><h3 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理"></a><font color="red">算术基本定理</font></h3><p>任意整数 $n&gt;1$ 可以唯一的表示成<br>$$<br>n = p_1^{\alpha_1} \cdots p_n^{\alpha_s}, ,,,, \alpha_i &gt; 0,p_i&lt;p_j(i&lt;j)<br>$$<br><strong>注</strong>：利用算术基本定理，很多结论几乎是显而易见的</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ul><li>$n$ 的因数个数 $d(n)=\Pi(1+\alpha_i)$</li><li>$n$ 的所有因数的和：</li></ul><p>$$<br>\Pi(1 + p_i + \cdots p_i^{\alpha_i})=\Pi(\frac{p_i^{\alpha_i+1}-1}{p_i-1})<br>$$</p><ul><li>$a,b$ 是两个正整数，则存在整数 $a’|a, b’|b$ ，使得：</li></ul><p>$$<br>a’ \cdot b’=[a,b] \qquad (a’,b’)=1<br>$$</p><h3 id="素数定理"><a href="#素数定理" class="headerlink" title="素数定理"></a>素数定理</h3><p>设<br>$$<br>\pi(x) = \sum_{p \le x} 1<br>$$<br>则有：<br>$$<br>\frac{\ln 2}{3}\frac{x}{\ln x} &lt; \pi(x) &lt; 6 \ln 2 \frac{x}{\ln x}<br>$$<br>以及<br>$$<br>\lim_{x \rightarrow \infty} \cfrac{\pi(x)}{\cfrac{x}{\ln x}} = 1<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Path Parameters</title>
      <link href="/fastapi-path-parameters/"/>
      <url>/fastapi-path-parameters/</url>
      
        <content type="html"><![CDATA[<p><strong>path</strong> 中可以用 <strong>python</strong> 格式字符串的形式来声明变量，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><p>变量 <code>item_id</code> 会成为为函数的一个参数</p><h4 id="带类型的路径变量"><a href="#带类型的路径变量" class="headerlink" title="带类型的路径变量"></a>带类型的路径变量</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><p><strong>给路径变量添加类型</strong>：</p><ul><li><p>有助于 IDE 的检查和代码自动补全</p></li><li><p><strong>FastAPI</strong> 可以根据声明的类型对变量自动解析 (将从<strong>http</strong>请求获得的字符串转化为 <strong>python data</strong>)</p><ul><li>例如向 <a href="http://127.0.0.1:8000/items/3" target="_blank" rel="noopener">http://127.0.0.1:8000/items/3</a> 发送请求会得到 <code>{"item_id":3}</code> 其中 3 是 <strong>python 整型变量</strong></li></ul></li><li><p><strong>FastAPI</strong> 可以根据声明的类型对<strong>数据进行验证</strong>，例如访问 <a href="http://127.0.0.1:8000/items/foo" target="_blank" rel="noopener">http://127.0.0.1:8000/items/foo</a> 会得到如下错误</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"path"</span><span class="token punctuation">,</span>                <span class="token string">"item_id"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"value is not a valid integer"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"type_error.integer"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="Pydantic"><a href="#Pydantic" class="headerlink" title="Pydantic"></a>Pydantic</h4><p>所有的数据验证工作都是由 <strong><a href="https://pydantic-docs.helpmanual.io/" target="_blank" rel="noopener">Pydantic</a></strong> 提供的</p><h4 id="路径顺序"><a href="#路径顺序" class="headerlink" title="路径顺序"></a>路径顺序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/me"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"the current user"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span></code></pre><p>如果用 <code>/users/me</code> 表示当前用户 <code>/users/{user_id}</code> 表示特定用户，则 <code>/users/me</code> 需要放在前面，在 <strong>fastapi</strong> 中路径是按照声明的顺序来依次匹配的</p><h4 id="Predefined-values"><a href="#Predefined-values" class="headerlink" title="Predefined values"></a>Predefined values</h4><p>如果希望接收到预先定义的合法路径变量，可以使用 <strong><a href="https://docs.python.org/3/library/enum.html" target="_blank" rel="noopener">Enum</a></strong> </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token comment" spellcheck="true"># 继承自 str 相当于给每一个属性声明 str 类型</span><span class="token keyword">class</span> <span class="token class-name">ModelName</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    alexnet <span class="token operator">=</span> <span class="token string">"alexnet"</span>    resnet <span class="token operator">=</span> <span class="token string">"resnet"</span>    lenet <span class="token operator">=</span> <span class="token string">"lenet"</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/model/{model_name}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>model_name<span class="token punctuation">:</span> ModelName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 枚举的值可以从类中得到</span>    <span class="token keyword">if</span> model_name <span class="token operator">==</span> ModelName<span class="token punctuation">.</span>alexnet<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"model_name"</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Deep Learning FTW!"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 枚举的值可以从实例中得到</span>    <span class="token keyword">if</span> model_name<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">"lenet"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"model_name"</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"LeCNN all the images"</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"model_name"</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Have some residuals"</span><span class="token punctuation">}</span></code></pre><h4 id="包含路径的路径变量"><a href="#包含路径的路径变量" class="headerlink" title="包含路径的路径变量"></a>包含路径的路径变量</h4><p><strong>OpenAPI</strong> 不支持包含路径变量中包含路径，但是 <strong>FastAPI</strong> 借助 <strong>Starlette</strong> 的内置工具可以实现，并且生成的 API 文档仍然可用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/files/{file_path:path}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"file_path"</span><span class="token punctuation">:</span> file_path<span class="token punctuation">}</span></code></pre><p>在上面的例子中，如果希望 <code>file_path=/home/johndoe/myfile.txt</code> 则访问的地址为 <a href="http://127.0.0.1:8000/files//home/johndoe/myfile.txt" target="_blank" rel="noopener">http://127.0.0.1:8000/files//home/johndoe/myfile.txt</a></p><h4 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h4><p>使用 <strong>Python type declarations</strong> 可以：</p><ul><li>获得 IDE 支持，如错误检查，自动补全等</li><li>数据解析</li><li>数据验证</li><li>API 文档的注释</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Steps</title>
      <link href="/fastapi-first-steps/"/>
      <url>/fastapi-first-steps/</url>
      
        <content type="html"><![CDATA[<h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><h5 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span></code></pre><h5 id="启动-uvicorn-命令"><a href="#启动-uvicorn-命令" class="headerlink" title="启动 uvicorn 命令"></a>启动 uvicorn 命令</h5><pre class=" language-bash"><code class="language-bash">uvicorn main:app --reload</code></pre><ul><li>main：python 的模块，即文件 main.py</li><li>app：指 <code>python app=FastAPI()</code> 中的app</li><li>–reload：代码改变时重启服务器，<strong>只用于开发</strong></li></ul><h4 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h4><ul><li>交互式：位于 <a href="http://127.0.0.1:8000/docs" target="_blank" rel="noopener">http://127.0.0.1:8000/docs</a></li><li>参考文档：位于 <a href="http://127.0.0.1:8000/redoc" target="_blank" rel="noopener">http://127.0.0.1:8000/redoc</a></li></ul><h4 id="OpenAPI"><a href="#OpenAPI" class="headerlink" title="OpenAPI"></a>OpenAPI</h4><ul><li><strong>FastAPI</strong> 使用 <strong>OpenAPI</strong> 标准 (定义API协议的规范) 来生成定义API的 <em>协议</em> (对某些东西的抽象描述，而不是具体的实现)</li><li>可以在 <a href="http://127.0.0.1:8000/openapi.json" target="_blank" rel="noopener">http://127.0.0.1:8000/openapi.json</a> 查看自动生成的 <strong>OpenAPI</strong> 协议，该协议可以用来生成API文档和与前端、移动设备和物联网应用的代码(例如mock server？)</li></ul><h4 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h4><ul><li><strong>FastAPI</strong> 直接继承于 <strong>Starlette</strong> </li><li><strong>path</strong>：也称为 <strong>endpoint</strong> 或者 <strong>route</strong> ，指 URL 中从第一个 <code>/</code> 开始的部分</li><li><strong>Operation</strong>：指 HTTP 的方法，如 <code>POST</code>、<code>GET</code>、<code>PUT</code> 等</li><li><strong>FastAPI</strong> 可以将大多数的对象和模型自动转化为 <strong>JSON</strong> ，包括 ORMs</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray-configure</title>
      <link href="/v2ray-configure/"/>
      <url>/v2ray-configure/</url>
      
        <content type="html"><![CDATA[<h4 id="记录一下怕自己忘记了"><a href="#记录一下怕自己忘记了" class="headerlink" title="记录一下怕自己忘记了"></a>记录一下怕自己忘记了</h4><p><a href="https://www.ecsoe.com/archives/38.html" target="_blank" rel="noopener">v2配置</a><br><a href="https://www.4spaces.org/speed-up-your-vps-with-bbr-plus/" target="_blank" rel="noopener">v2加速</a><br><a href="https://blog.sprov.xyz/2019/03/11/" target="_blank" rel="noopener">cdn加速</a><br><a href="https://clients.hostwinds.com/" target="_blank" rel="noopener">hostwind 服务器</a><br><a href="https://www.namesilo.com/" target="_blank" rel="noopener">namesilo 域名网站</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket加密通信</title>
      <link href="/socket-jia-mi-tong-xin/"/>
      <url>/socket-jia-mi-tong-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="编程思路："><a href="#编程思路：" class="headerlink" title="编程思路："></a>编程思路：</h3><ol><li>客户端和服务器端建立连接</li><li>客户端产生非对称密钥，将公钥传送给服务器端</li><li>服务器端通过公钥将密钥进行加密并传送给客户端</li><li>客户端接收到密钥并进行解密，双方开始通信</li></ol><hr><h3 id="背景资料："><a href="#背景资料：" class="headerlink" title="背景资料："></a>背景资料：</h3><ul><li>AES原理(图解密码技术第三章)</li><li>RSA原理(图解密码技术第五章)</li><li><a href="https://www.cnblogs.com/wangcq/p/3520400.html" target="_blank" rel="noopener">Socket通信原理</a></li></ul><hr><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p>注释已经非常详细了，这里就不再赘述。</p><hr><h4 id="异常类定义"><a href="#异常类定义" class="headerlink" title="异常类定义"></a>异常类定义</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AuthenticationError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Errorinfo<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>errorinfo <span class="token operator">=</span> Errorinfo    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>errorinfo</code></pre><hr><h4 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h4><hr><h5 id="服务器类定义："><a href="#服务器类定义：" class="headerlink" title="服务器类定义："></a>服务器类定义：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> rsa<span class="token keyword">import</span> pickle<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>fernet <span class="token keyword">import</span> Fernet<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> errorclass <span class="token keyword">import</span> AuthenticationError<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 使用图灵机器人的自动回复功能</span><span class="token keyword">from</span> tlrobot <span class="token keyword">import</span> get_reply<span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用来标记同时连接的客户端的数量</span>    number <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 默认的最大等待数量为5</span>    <span class="token comment" spellcheck="true"># 默认使用本机的ip地址和8080端口</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> backlog<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 默认使用AF_INET协议族，即ipv4地址和端口号的组合以及tcp协议</span>        self<span class="token punctuation">.</span>serverSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 绑定监听的ip地址和端口号</span>        self<span class="token punctuation">.</span>serverSocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开始等待</span>        self<span class="token punctuation">.</span>serverSocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span>backlog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 该函数需要并行处理</span>    <span class="token keyword">def</span> <span class="token function">link_one_client</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取客户端对象和客户端地址</span>        clientSocket<span class="token punctuation">,</span> addr <span class="token operator">=</span> self<span class="token punctuation">.</span>serverSocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 客户端数量加1</span>        Server<span class="token punctuation">.</span>number <span class="token operator">=</span> Server<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 标记当前客户端编号</span>        now_number <span class="token operator">=</span> Server<span class="token punctuation">.</span>number        <span class="token comment" spellcheck="true"># 打印</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"和客户端{0}建立连接\n目标主机地址为：{1}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>now_number<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接受客户端传递的公钥</span>        <span class="token comment" spellcheck="true"># 这里可以加一个哈希函数检验公钥的正确性！</span>        <span class="token comment" spellcheck="true"># 运用pickle进行反序列化</span>        publicKeyPK<span class="token punctuation">,</span> pubKeySha256 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>publicKeyPK<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> pubKeySha256<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AuthenticationError<span class="token punctuation">(</span><span class="token string">"密钥被篡改！"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            publicKey <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>publicKeyPK<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已接受公钥"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下面是用公钥加密对称密钥并传递的过程</span>        <span class="token comment" spellcheck="true"># 产生用于对称加密的密钥</span>        sym_key <span class="token operator">=</span> Fernet<span class="token punctuation">.</span>generate_key<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用pickle进行序列化用来进行网络传输</span>        <span class="token comment" spellcheck="true"># 对密钥进行hash保证其准确性</span>        en_sym_key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sym_key<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span>        en_sym_key_sha256 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>en_sym_key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在加密传送密钥"</span><span class="token punctuation">)</span>        clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>en_sym_key<span class="token punctuation">,</span>en_sym_key_sha256<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这里可以添加密钥交换成功的函数</span>        <span class="token comment" spellcheck="true"># 初始化加密对象</span>        f <span class="token operator">=</span> Fernet<span class="token punctuation">(</span>sym_key<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下面使用对称密钥进行加密对话的过程</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 接收到的加密消息</span>            en_recvData <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            recvData <span class="token operator">=</span> f<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>en_recvData<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接受到客户端{0}传来的消息：{1}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>now_number<span class="token punctuation">,</span> recvData<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 调用图灵机器人</span>            sendData <span class="token operator">=</span> get_reply<span class="token punctuation">(</span>recvData<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对消息进行加密</span>            en_sendData <span class="token operator">=</span> f<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>sendData<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>en_sendData<span class="token punctuation">)</span></code></pre><hr><h5 id="服务器端类实例化："><a href="#服务器端类实例化：" class="headerlink" title="服务器端类实例化："></a>服务器端类实例化：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> serverclass <span class="token keyword">import</span> Server<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用服务端程序！"</span><span class="token punctuation">)</span>server <span class="token operator">=</span> Server<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里使用多线程可以避免服务器阻塞在一个客户端上</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>server<span class="token punctuation">.</span>link_one_client<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><hr><h5 id="客户端类定义："><a href="#客户端类定义：" class="headerlink" title="客户端类定义："></a>客户端类定义：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> rsa<span class="token keyword">import</span> pickle<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>fernet <span class="token keyword">import</span> Fernet<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> errorclass <span class="token keyword">import</span> AuthenticationError<span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 产生非对称密钥</span>        self<span class="token punctuation">.</span>asyKey <span class="token operator">=</span> rsa<span class="token punctuation">.</span>newkeys<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 公钥和私钥</span>        self<span class="token punctuation">.</span>publicKey <span class="token operator">=</span> self<span class="token punctuation">.</span>asyKey<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>privateKey <span class="token operator">=</span> self<span class="token punctuation">.</span>asyKey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">link_server</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建socket通信对象</span>        <span class="token comment" spellcheck="true"># 默认使用AF_INET协议族，即ipv4地址和端口号的组合以及tcp协议</span>        clientSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 默认连接服务器地址为本机ip和8080端口</span>        clientSocket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 向服务器传递公钥，和该公钥字符串化后的sha256值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在向服务器传送公钥"</span><span class="token punctuation">)</span>        sendKey <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>self<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span>        sendKeySha256 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>sendKey<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>sendKey<span class="token punctuation">,</span> sendKeySha256<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接受服务器传递的密钥并进行解密</span>        symKey<span class="token punctuation">,</span> symKeySha256 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>symKey<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> symKeySha256<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AuthenticationError<span class="token punctuation">(</span><span class="token string">"密钥被篡改！"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>symKey <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>symKey<span class="token punctuation">,</span> self<span class="token punctuation">.</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密钥交换完成"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 初始化加密对象</span>        f <span class="token operator">=</span> Fernet<span class="token punctuation">(</span>self<span class="token punctuation">.</span>symKey<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            sendData <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入你要发送的消息："</span><span class="token punctuation">)</span>            en_sendData <span class="token operator">=</span> f<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>sendData<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>en_sendData<span class="token punctuation">)</span>            en_recvData <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            recvData <span class="token operator">=</span> f<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>en_recvData<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接受到服务器传来的消息：{0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>recvData<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><h5 id="客户端类实例化："><a href="#客户端类实例化：" class="headerlink" title="客户端类实例化："></a>客户端类实例化：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> clientclass <span class="token keyword">import</span> Client<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用客户端程序！"</span><span class="token punctuation">)</span>client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>link_server<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="调用图灵机器人的代码"><a href="#调用图灵机器人的代码" class="headerlink" title="调用图灵机器人的代码"></a>调用<a href="https://www.kancloud.cn/turing/www-tuling123-com/718218" target="_blank" rel="noopener">图灵</a>机器人的代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">get_reply</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    datas <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'reqType'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"perception"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"inputText"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> data            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"selfInfo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"location"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"city"</span><span class="token punctuation">:</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span>                    <span class="token string">"province"</span><span class="token punctuation">:</span> <span class="token string">"湖北"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"userInfo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># 这里填上自己的apiKey</span>            <span class="token string">"apiKey"</span><span class="token punctuation">:</span> <span class="token string">"*********************"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># userid可以随便填写</span>            <span class="token string">"userId"</span><span class="token punctuation">:</span> <span class="token string">"443545"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    datas <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>datas<span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"http://openapi.tuling123.com/openapi/api/v2"</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>datas<span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"results"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"values"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul><li><a href="https://cryptography.io/en/latest/" target="_blank" rel="noopener">cryptography</a></li><li><a href="https://www.jb51.net/article/119048.htm" target="_blank" rel="noopener">rsa</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017787560490144" target="_blank" rel="noopener">廖雪峰老师–网络编程</a></li><li><a href="https://segmentfault.com/a/1190000012968005" target="_blank" rel="noopener">python(3.x) 实现AES 加解密</a></li><li><a href="https://www.cnblogs.com/wangcq/p/3520400.html" target="_blank" rel="noopener">Socket通信原理</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
