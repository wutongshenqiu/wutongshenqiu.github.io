<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>group</title>
      <link href="/math-group/"/>
      <url>/math-group/</url>
      
        <content type="html"><![CDATA[<h3 id="群"><a href="#群" class="headerlink" title="群"></a>群</h3><ul><li><p>群由一个<strong>非空集合</strong>和在该集合上的二元运算构成，并且具有<strong>封闭性</strong>、<strong>结合律</strong>、<strong>单位元</strong>、<strong>可逆元</strong></p></li><li><p>满足交换律的群称为<strong>交换群</strong>或<strong>Abel群</strong></p></li></ul><h3 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h3><ul><li>假设 $(G, *)$ 是一个群，$H$ 是 $G$ 的一个非空子集，则当 $H$ 对于二元运算 $*$ 亦构成一个群时，称 $(H, *)$ 为 $(G, *)$ 的一个子群</li><li>$H={e}$ 和 $H={G}$ 称为 $G$ 的平凡子群，其余的子群 $H$ 称为 $G$ 的真子群</li></ul><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li><p>若 $H$ 是 $Z$ 的真子群，则 $\exists n \in Z^+$，使得 $H=nZ=\lbrace k \cdot n | k \in Z \rbrace$</p></li><li><p>非空集合 $H$ 是群 $G$ 的子群 $\iff$ $\forall a, b \in H, a \cdot b^{-1} \in H$</p></li><li><p>设 $\lbrace H_i \rbrace$ 是群 $G$ 的一组子群，则 $\bigcap H_i$ 也是 $G$ 的子群</p><ul><li>由上一条定理可知</li></ul></li></ul><h4 style="color: red;">子群的生成理解</h4><p>详细可以查看<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E7%9A%84%E7%94%9F%E6%88%90%E9%9B%86%E5%90%88](https://zh.wikipedia.org/wiki/群的生成集合)" target="_blank" rel="noopener">维基百科</a></p><p>如果 $S$ 是群 $G$ 的子集，<font color="red">$S$ 不一定构成群</font>，则由 $S$ 所生成的子群 $&lt;S&gt;$ 是 $G$ 中包含所有 $S$ 元素的最小子群，即包含 $S$ 元素的所有子群的交集。如果 $G=&lt;S&gt;$，则我们称 $S$ 生成 $G$，$S$ 中的元素叫做<strong>生成元</strong>，当 $S$ 中只有一个单一元素 $x$ 的时候，$&lt;S&gt;$ 称为循环群</p><p>例子：</p><p>模7的简化剩余系构成一个乘法交换群，其所有的子群为 {1}, {1, 6}, {1, 2, 4}, {1, 2, 3, 4, 5, 6}</p><p>假如 $S=\lbrace {2, 4} \rbrace$，则 $&lt;S&gt;=\lbrace {1, 2, 4} \rbrace \ne G$ ，因此 $S$ 中的元素不是生成元</p><p>如果 $S=\lbrace {3} \rbrace$，则 $&lt;S&gt;=\lbrace {1, 2, 3, 4, 5, 6} \rbrace = G$，因此 $3$ 是生成元，$&lt;S&gt;$ 是循环群  </p><p>若 $G$ 为交换群，$X=&lt;a_1, a_2, \dots, a_t&gt;$ 是 $G$ 的子集，则</p><ul><li>$G$ 为乘法群时，$&lt;X&gt;=\lbrace a_1^{n_1} \cdots a_t^{n_t} | a_i \in X, n_i \in Z \rbrace$</li><li>$G$ 为乘法群时，$&lt;X&gt;=\lbrace n_1a_1 + \cdots + n_ta_t | a_i \in X, n_i \in Z \rbrace$</li></ul><p><strong>俺的一些理解：</strong>为了满足封闭性，则若 $a_i \in H_i$，必有 $a_i^t \in H_i$</p><h3 id="陪集"><a href="#陪集" class="headerlink" title="陪集"></a>陪集</h3><ul><li>$aH$ 称为 $H$ 在群 $G$ 中的左陪集，如果：<ul><li>$a$ 是 $G$ 中的任意元</li><li>$H$ 是 $G$ 的子群</li></ul></li><li>右陪集同理</li><li>若 $H$ 是正规子群，则其左右陪集相等</li></ul><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$aH = bH \iff b^{-1}a \in H$</p></li><li><p>$H$ 为群 $G$ 的子群，则 $H$ 中不相等的左陪集(右陪集)构成 $G$ 的一个划分，即<br>$$<br>G = \bigcup a_iH<br>$$</p></li></ul><h3 id="商集"><a href="#商集" class="headerlink" title="商集"></a>商集</h3><ul><li>群 $G$ 的子群 $H$ 的不同左陪集(右陪集)组成的新集合称为 $H$ 在 $G$ 中的商集，记作 $G/H$</li><li><strong>注：</strong>商集是等价类的集合，即商集中的每一个元素都对应一个 $H$ 的陪集<ul><li><a href="https://www.zhihu.com/question/63046350/answer/204840915" target="_blank" rel="noopener">一个例子</a></li></ul></li><li>$G/H$ 中不同左陪集(右陪集)的个数叫做 $H$ 在 $G$ 中的指标，记为 $[G:H]$</li></ul><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ul><li>群 $G$ 有子群 $H$，则<ul><li>$|G|=[G:H]|H|$<ul><li>由陪集的性质2即得</li></ul></li><li>若 $K$ 是 $H$ 的子群，则 $[G:K]=[G:H][H:K]$</li></ul></li><li>$Lagrange$ ：$H$ 是有限群 $G$ 的子群，则 $|H| \; | \; |G|$</li><li>设 $H$、$K$ 是交换群 $G$ 的两个子群，则：<ul><li>$HK$ 是 $G$ 的子群</li><li>$|HK|=|H||K|/|H \bigcap K|$</li><li>$[H:H \bigcap K] \le [G:K]$</li></ul></li></ul><h3 id="正规子群和商群"><a href="#正规子群和商群" class="headerlink" title="正规子群和商群"></a>正规子群和商群</h3><ul><li>群 $G$ 的子群 $N$ 称为正规子群，如果：<ul><li>$\forall a \in G$， $aN=Na$</li></ul></li><li>$G/H$ 称为群 $G$ 对于子群 $H$ 的商群，如果：<ul><li>$H$ 是正规子群</li><li>$G/H$ 具有结合法 $(aH)(bH)=(ab)H$</li></ul></li></ul><h3 id="同态和同构"><a href="#同态和同构" class="headerlink" title="同态和同构"></a>同态和同构</h3><ul><li><p>$f$ 称为 $G$ 到 $G’$ 的一个同态，如果：</p><ul><li>$G$，$G’$ 都是群</li><li>$f$ 是 $G$ 到 $G’$ 的一个<a href="[https://zh.wikipedia.org/wiki/%E6%98%A0%E5%B0%84](https://zh.wikipedia.org/wiki/映射)">映射</a><ul><li>$\forall x \in G$，存在唯一的 $y=f(x) \in G’$ </li><li>$\forall x_1=x_2$，有 $f(x_1) = f(x_2)$</li></ul></li><li>$\forall a, b \in G$，有 $f(ab)=f(a)f(b)$</li></ul></li><li><p>同态可以理解为<strong>保持运算的映射</strong></p><ul><li>$f(ab)$ 是先在 $G$ 中的运算，再对应到 $G’$</li><li>$f(a)f(b)$ 是先对应到 $G’$，再进行 $G’$ 中的运算</li></ul></li><li><p>$f$ 是单射则称为<strong>单同态</strong>，$f$ 为满射则称为<strong>满同态</strong>，$f$ 为双射则称为<strong>同构</strong></p><ul><li><a href="https://zh.wikipedia.org/wiki/单射、双射与满射" target="_blank" rel="noopener">解释</a></li><li>$G$ 与 $G’$ 同构，记为 $G \cong G’$</li></ul></li><li><p><a href="https://www.zhihu.com/question/293890350/answer/487914082" target="_blank" rel="noopener">例子</a></p></li></ul><h4 id="性质-3"><a href="#性质-3" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$f(e) = e’$</p><ul><li>即同态将单位元映射到单位元</li></ul></li><li><p>$f(a^{-1}) = f(a)^{-1}$</p><ul><li>即同态将逆元映射到逆元</li></ul></li><li><p>$ker \; f = \lbrace a | a \in G, f(a) = e’ \rbrace$ 是 $G$ 的子群</p><ul><li>$e’$ 是 $G’$ 中的单位元</li><li>$f$ 是单同态 $\iff$ $ker \; f = \lbrace e \rbrace$</li></ul></li><li><p>$f(G) = \lbrace f(a) | a \in G \rbrace$ 是 $G’$ 子群</p><ul><li>$f$ 是满同态的充要条件是 $f(G) = G’$</li></ul></li></ul><h4 id="同态基本定理"><a href="#同态基本定理" class="headerlink" title="同态基本定理"></a>同态基本定理</h4><ul><li>$ker \; f$ 是 $G$ 的正规子群</li><li>存在唯一的 $G/ker \; f$ 到 $f(G)$ 的同构</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴系统</title>
      <link href="/os-huo-ban-xi-tong/"/>
      <url>/os-huo-ban-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="出现的起因："><a href="#出现的起因：" class="headerlink" title="出现的起因："></a>出现的起因：</h3><ul><li>固定分区存储管理限制了内存中的进程数</li><li>动态分区的拼接需要大量时间</li></ul><h3 id="伙伴系统的主要思想"><a href="#伙伴系统的主要思想" class="headerlink" title="伙伴系统的主要思想"></a>伙伴系统的主要思想</h3><ul><li>采用伙伴算法对空闲内存进行管理</li><li>该方法通过不断以 $\frac{1}{2}$ 的形式来分割大的空闲存储块，从而获得小的空闲存储块</li><li>当内存块释放时，应尽可能合并空闲块</li></ul><h3 id="伙伴系统的内存分配"><a href="#伙伴系统的内存分配" class="headerlink" title="伙伴系统的内存分配"></a>伙伴系统的内存分配</h3><ul><li>设进程申请大小为 $n$<ul><li>系统初始时可供分配的空间为 $2^m$</li><li>若 $2^{m-1} &lt; n \le 2^m$，则为进程分配整个空间</li><li>若 $2^{i-1} &lt; n \le 2^i$，则为进程分配大小为 $2^i$ 的空间</li><li>若系统不存在大小为 $2^i$ 的空闲块，则查找系统中是否存在大于 $2^i$ 的空闲块 $2^{i+1}, 2^{i+2} \dots$，若找到则对其进行<strong>对半划分</strong>，直到产生大小为 $2^i$ 的进程块为止</li></ul></li></ul><h3 id="伙伴系统的内存回收"><a href="#伙伴系统的内存回收" class="headerlink" title="伙伴系统的内存回收"></a>伙伴系统的内存回收</h3><ul><li>当一块被分成两个大小相等的块时，这两块称为伙伴</li><li>当进程释放存储空间时，应检查释放块的伙伴是否空闲，若空闲则合并<ul><li>当较大的空闲块也可能存在空闲伙伴，此时也应该合并</li><li>重复上述过程，直至没有可以合并的伙伴</li></ul></li></ul><h3 id="伙伴系统的二叉树表示"><a href="#伙伴系统的二叉树表示" class="headerlink" title="伙伴系统的二叉树表示"></a>伙伴系统的二叉树表示</h3><p><img src="/img/os/6.png" alt="喵喵喵"></p><p><strong>伙伴系统也会产生碎片</strong></p><h3 id="伙伴地址公式"><a href="#伙伴地址公式" class="headerlink" title="伙伴地址公式"></a>伙伴地址公式</h3><ul><li><p>设某空闲块的开始地址为 $d$，长度为 $2^k$，其伙伴的开始地址为(可看成已知二叉树的一个节点开始地址，求其<strong>兄弟节点开始地址(相距一个节点的长度)</strong>)：<br>$$<br>Buddy(k, d) =<br>\begin{cases}<br>d + 2^k, &amp; d \equiv 0 \quad (mod \; 2^{k+1}) \\<br>d - 2^k, &amp; d \equiv 2^k \quad (mod \; 2^{k+1})<br>\end{cases}<br>$$</p></li><li><p>如果参与分配的 $2^m$ 个单元从 $a$ 开始，则对于长度为 $2^k$，开始地址为 $d$ 的块，其伙伴的开始地址为：<br>$$<br>Buddy(k, d) = \begin{cases}d + 2^k, &amp; d-a \equiv 0 \quad (mod \; 2^{k+1}) \\d - 2^k, &amp; d-a \equiv 2^k \quad (mod \; 2^{k+1})\end{cases}<br>$$</p></li></ul><p>例子：若块地址为 $011011110000b$，块的大小分别为 $4$ 和 $16$，则块的伙伴地址为：</p><p>加4和减16</p><p><strong>深入理解</strong>：</p><ul><li>对于两个伙伴而言，其中左节点的开始地址即为<strong>父节点</strong>开始地址，因此必能被 $2^{k+1}$ 整除，反之则为右节点</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>设系统中初始内存空间为 1 MB，进程请求和释放空间的操作序列为：</p><ol><li>进程 A 申请 200 KB；B 申请 120 KB；C 申请 240 KB；D 申请 100 KB</li><li>进程 B 释放，E 申请 60 KB</li><li>进程 A、C 释放；</li><li>进程 D 释放；进程 E 释放</li></ol><p><img src="/img/os/7.png" alt="喵喵喵"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银行家算法</title>
      <link href="/os-yin-xing-jia-suan-fa/"/>
      <url>/os-yin-xing-jia-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>安全状态：系统能够按照某种顺序，来为进程分配其所需的资源，如 $&lt;p_1,p_2, \dots , p_n&gt;$，直至每一个进程都可以顺利完成，此时系统为<strong>安全状态</strong></li><li>安全序列：上述 $&lt;p_1, p_2, \dots, p_n&gt;$ 称为安全序列</li><li>不安全状态：若某一时刻系统中不存在一个安全序列，则称此时的系统状态为<strong>不安全状态</strong></li></ul><p><strong>进入不安全状态之后，系统便有可能进入死锁状态</strong></p><p><strong>因此，避免死锁的本质是使系统不进入不安全的状态</strong></p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>若 $T_0$ 时刻系统的资源状态如图所示</p><img src="/img/os/1.png" alt="喵喵喵"><p>则存在一个安全状态 $&lt;p_2, p_1, p_3&gt;$</p><p>若 $T_0$ 时刻系统的资源状态如图所示</p><img src="/img/os/2.png" alt="喵喵喵"><p>则系统处于不安全状态</p><h3 style="color: red;">    银行家算法</h3><h4 id="算法的核心思想"><a href="#算法的核心思想" class="headerlink" title="算法的核心思想"></a>算法的核心思想</h4><p>资源分配后是否会导致系统处于不安全状态</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>假定系统有 $n$ 个进程 $P_1, P_2, \dots , P_n$，共有 $m$ 类资源 $R_1, R_2, \dots , R_m$</p><ul><li>可用资源向量 $Available[1 \dots m]$ ：$Available[j] = k$ 表示系统中<strong>现有</strong>空闲的 $R_j$ 类资源 $k$ 个</li><li>最大需求矩阵 $Max[1 \dots n][1 \dots m]$ ：$Max[i][j] = k$ 表示进程 $P_i$ 最多需要 $R_j$ 类资源 $k$ 个</li><li>分配矩阵 $Allocation[1 \dots n][1 \dots m]$ ： $Allocation[i][j] = k$ 表示进程 $P_i$ 已被分配 $R_j$ 类资源 $k$ 个</li><li>需求矩阵 $Need[1 \dots n][1 \dots m]$：$Need[i][j] = k$ 表示进程 $P_i$ 还需要 $R_j$ 类资源 $k$ 个</li><li>请求向量 $Request_i[1 \dots m]$ ：$Request_i[j] = k$ 表示进程 $P_i$ 请求分配 $R_j$ 类资源 $k$ 个</li></ul><p><strong>参与安全性算法的临时数据结构：</strong></p><ul><li><p>可用资源向量 $Work[1 \dots m]$，初值为 $Available$，含义相同，用于安全性算法</p></li><li><p>可分配向量 $Finish[1 \dots n]$，$Finish[i] = ture$ 表示有足够资源分配给进程 $P_i$</p></li></ul><h4 id="银行家算法的主要步骤"><a href="#银行家算法的主要步骤" class="headerlink" title="银行家算法的主要步骤"></a>银行家算法的主要步骤</h4><p>当进程 $P_i$ 发出请求向量 $Request_i$ 后，执行以下步骤</p><ol><li><p>$assert \quad Request_i \le Need_i$</p></li><li><p>$assert \quad Request_i \le Available$</p></li><li><p>预分配数据结构<br>$$<br>\begin{align}<br>&amp; Available = Available - Request_i \\<br>&amp; Allocation_i = Allocation_i + Request_i \\<br>&amp; Need_i = Need_i - Request_i<br>\end{align}<br>$$</p></li><li><p>执行安全性算法，检查此次资源分配是否安全</p></li></ol><h4 id="安全性算法的主要步骤"><a href="#安全性算法的主要步骤" class="headerlink" title="安全性算法的主要步骤"></a>安全性算法的主要步骤</h4><ol><li><p>从进程集合中找到一个能满足下述条件的进程，找到则执行步骤2，否则执行3</p><ul><li>$Finish[i] = false$</li><li>$Need_i \le Work$</li></ul></li><li><p>当进程 $P_i$ 获得资源后，可顺利执行到完成，并释放出分配的资源，应执行<br>$$<br>\begin{align}<br>&amp; Work = Work + Allocation_i \\<br>&amp; Finish[i] = true \\<br>&amp; goto \; step1<br>\end{align}<br>$$</p></li><li><p>若所有进程的 $Finish[i]$ 都为 $true$，则表示系统处于安全状态，否则系统处于不安全状态</p></li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><img src="/img/os/3.png" alt="喵喵喵" style="zoom:80%;"><p>在 $T_0$ 时刻使用安全性算法，可知</p><img src="/img/os/4.png" alt="喵喵喵" style="zoom:80%;"><p>即存在一个安全序列 $&lt;P_1, P_3, P_4, P_2, P_0&gt;$ 因此系统是安全的</p><p>此时 $P_1$ 发出请求向量 $Request_i = \lbrace 1, 2, 0 \rbrace$，根据银行家算法，系统执行如下检查</p><ol><li><p>$assert \quad Request_i \le Need_i$</p></li><li><p>$assert \quad Request_i \le Available$</p></li><li><p>为 $P_1$ 预分配资源<br>$$<br>\begin{align}<br>&amp; Available = Available - Request_i \\<br>&amp; Allocation_i = Allocation_i + Request_i \\<br>&amp; Need_i = Need_i - Request_i<br>\end{align}<br>$$</p></li><li><p>进行安全性分析</p></li></ol><img src="/img/os/5.png" alt="喵喵喵" style="zoom:80%;"><p>由此可知存在一个安全序列 $&lt;P_1, P_3, P_4, P_2, P_0&gt;$，因此系统是安全的</p><p>此时 $P_4$ 发出请求向量 $Request_4 = \lbrace 3, 3, 0 \rbrace$，可知不满足 $assert \quad Request_i \le Available$，于是进程 $P_4$ 等待</p><p>此时 $P_0$ 发出请求向量 $Request_0 = \lbrace 0, 2, 0 \rbrace$ ，可知不满足安全性检测，因此 $P_0$ 等待</p><h3 id="银行家算法的变种——死锁检测算法"><a href="#银行家算法的变种——死锁检测算法" class="headerlink" title="银行家算法的变种——死锁检测算法"></a>银行家算法的变种——死锁检测算法</h3><p>类似银行家算法中安全性测试</p><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p>可用资源向量 $Available$</p></li><li><p>请求矩阵 $Request$</p></li><li><p>分配矩阵 $Allocation$</p></li><li><p>工作向量 $Work$</p></li><li><p>进程集合 $L$ ：记录当前已经不占用资源的进程</p></li></ul><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ul><li>将不占用资源的进程 $L_i$ 加入 $L$</li><li>如果对于不在 $L_i$ 中的进程，存在一个序列，能够将所有的进程都加入 $L$，则不存在死锁，否则存在死锁</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
            <tag> os </tag>
            
            <tag> deadlock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request Files</title>
      <link href="/fastapi-request-files/"/>
      <url>/fastapi-request-files/</url>
      
        <content type="html"><![CDATA[<h3 id="Request-Files"><a href="#Request-Files" class="headerlink" title="Request Files"></a>Request Files</h3><p>可以使用 <code>File</code> 定义从客户端上传的文件</p><p><strong>注：</strong>为了接受上传的文件，需要借助 <code>python-multipart</code>，这是由于文件是以<strong>表单数据</strong>的形式上传的</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> File<span class="token punctuation">,</span> UploadFileapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/files/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_file</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> bytes <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"file_size"</span><span class="token punctuation">:</span> len<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/uploadfile/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_upload_file</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> UploadFile <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"filename"</span><span class="token punctuation">:</span> file<span class="token punctuation">.</span>filename<span class="token punctuation">}</span></code></pre><p><strong>步骤</strong>：</p><ol><li>从 <code>fastapi</code> 导入 <code>File</code> 和 <code>UploadFile</code></li><li>定义文件参数<ul><li><code>File</code> 是直接继承于 <code>Form</code> 的类</li><li>需要记住的是，从 <code>fastapi</code> 导入的 <code>Query</code>，<code>Path</code>，<code>File</code> 其实是返回同名类的函数</li><li>为声明文件正文，必须显示使用 <code>File</code>，某则会被识别为查询参数或者 <strong>body</strong> 参数</li></ul></li></ol><p>文件将会以 <strong>表单数据</strong> 的形式上传，如果在文件参数中声明了 <code>bytes</code> 类型，<strong>FastApi</strong> 将会以二进制字节的方式读取文件</p><p>这意味着整个二进制文件将会存储在内存中，当上传的文件较小时是ok的</p><p>但在一些情况中，使用 <code>UploadFile</code> 将会受益</p><h3 id="File-parameters-with-UploadFile"><a href="#File-parameters-with-UploadFile" class="headerlink" title="File parameters with UploadFile"></a><code>File</code> parameters with <code>UploadFile</code></h3><p>声明文件参数的类型为 <code>UploadFile</code></p><p><code>UploadFile</code> 相较于 <code>bytes</code> 有以下好处：</p><ul><li>它使用 <code>spooled file</code><ul><li>超过内存存储文件的上限时，文件将会存储在硬盘中</li></ul></li><li>这意味着对于类似图片，视频，较大的二进制文件，它可以在不消耗全部内存的情况下工作的很好</li><li>可以从上传的文件中获得元信息</li><li>他有<a href="https://docs.python.org/3/glossary.html#term-file-like-object" target="_blank" rel="noopener">file-like</a> 的异步接口</li><li>他暴露了一个 python  <a href="https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile" target="_blank" rel="noopener"><code>SpooledTemporaryFile</code></a> 对象，可以将其直接传递给其他接受 <code>file-like</code> 对象的库</li></ul><h4 id="UploadFile"><a href="#UploadFile" class="headerlink" title="UploadFile"></a>UploadFile</h4><p><code>UploadFile</code> 有以下<a href="https://fastapi.tiangolo.com/tutorial/request-files/#uploadfile" target="_blank" rel="noopener">属性</a></p><p><strong>技术细节：</strong></p><p>当使用 <code>async</code> 方法时，<strong>FastApi</strong> 将会在线程池中运行文件方法并且等待他们</p><p><code>UploadFile</code> 直接继承自 <strong>Starlette</strong> 的 <code>UploadFile</code>，并且添加了一些必要的组件使其和 <strong>Pydantic</strong> 以及 <strong>FastApi</strong> 兼容</p><h3 id="What-is-“Form-Data”"><a href="#What-is-“Form-Data”" class="headerlink" title="What is “Form Data”"></a>What is “Form Data”</h3><p>HTML 表单(<code>&lt;form&gt;&lt;/form&gt;</code>)通常使用不同于 JSON 的 “特殊编码” 发送数据至服务器，</p><p><strong>FastAPI</strong> 会确保从正确的位置读取数据</p><p><strong>技术细节：</strong>和之前一节相同</p><h3 id="Multiple-file-uploads"><a href="#Multiple-file-uploads" class="headerlink" title="Multiple file uploads"></a>Multiple file uploads</h3><p>可以同时上传多个文件</p><p>它们将与<strong>表单数据</strong>发送的同一<strong>表单字段</strong>相关联</p><p>使用 <code>List</code> + <code>bytes</code>/<code>UploadFile</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> File<span class="token punctuation">,</span> UploadFile<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> HTMLResponseapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/files/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_files</span><span class="token punctuation">(</span>files<span class="token punctuation">:</span> List<span class="token punctuation">[</span>bytes<span class="token punctuation">]</span> <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"file_sizes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>len<span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">]</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/uploadfiles/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_upload_files</span><span class="token punctuation">(</span>files<span class="token punctuation">:</span> List<span class="token punctuation">[</span>UploadFile<span class="token punctuation">]</span> <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"filenames"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>file<span class="token punctuation">.</span>filename <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">]</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;body>&lt;form action="/files/" enctype="multipart/form-data" method="post">&lt;input name="files" type="file" multiple>&lt;input type="submit">&lt;/form>&lt;form action="/uploadfiles/" enctype="multipart/form-data" method="post">&lt;input name="files" type="file" multiple>&lt;input type="submit">&lt;/form>&lt;/body>    """</span>    <span class="token keyword">return</span> HTMLResponse<span class="token punctuation">(</span>content<span class="token operator">=</span>content<span class="token punctuation">)</span></code></pre><p><strong>注：</strong> </p><ul><li><p>Swagger UI 不支持在同一个表单字段上传多文件</p></li><li><p>但是，<strong>FastAPI</strong> 已经和它兼容，通过使用标准 <strong>OpenAPI</strong></p></li><li><p>只要 Swagger UI 支持多文件上传，或者使用其他支持 <strong>OpenAPI</strong> 的工具，它们将会和 <strong>FastAPI</strong> 兼容</p></li></ul><p><strong>技术细节：</strong></p><ul><li><code>from fastapi.responses import HTMLResponse</code> 与 <code>from starlette.responses import HTMLResponse</code> 相同，前者只是后者的简便形式</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Form Data</title>
      <link href="/fastapi-form-data/"/>
      <url>/fastapi-form-data/</url>
      
        <content type="html"><![CDATA[<h3 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h3><p>当需要接受表单字段而不是 JSON 时，可以使用 <code>Form</code></p><p><strong>注：</strong>需要借助 <code>python-multipart</code> 来使用表单</p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Formapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/login/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> str <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> str <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">}</span></code></pre><ul><li>导入 <code>Form</code></li><li>定义表单参数：和使用 <code>Body</code> 以及 <code>Query</code> 等的方法一样<ul><li>例如在一种 OAuth2 规范(“password flow”)中，需要使用 <code>username</code> 和 <code>password</code> 作为表单字段，规范要求字段必须准确命名为 <code>username</code> 和 <code>password</code>，并且以表单的形式发送，而不是 JSON</li><li><code>Form</code> 可以和 <code>Body</code>，<code>Query</code> 等一样声明元信息和验证参数</li></ul></li></ul><p><strong>注：</strong> <code>Form</code> 是继承于 <code>Body</code> 的类</p><p><strong>提示：</strong>必须用 <code>Form</code> 显示声明表单正文，如果没有显示声明，则会被解释为查询参数或者 <code>body</code> 参数</p><h3 id="About-“Form-Fields”"><a href="#About-“Form-Fields”" class="headerlink" title="About “Form Fields”"></a>About “Form Fields”</h3><p>与 JSON 不同，HTML 表单(<code>&lt;form&gt;&lt;/form&gt;</code>)发送通常采用特殊的编码方式发送数据到服务器 </p><p><strong>FastAPI</strong> 将确保从正确的位置读取数据</p><p><strong>技术细节：</strong></p><ul><li>来自表单的数据通常使用  “media type” <code>application/x-www-form-urlencoded</code> 的方式进行编码</li><li>但是当表单包含文件的时候，则会以 <code>multipart/form-data</code> 的方式进行编码</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener">MDN</a></li></ul><p><strong>警告：</strong></p><ul><li>可以在路径操作中定义多个 <code>Form</code> 参数，但是不能以接受 JSON 的方式去接受表单数据，例如声明 <code>Body</code> 字段，因为请求的正文将会以 <code>application/x-www-form-urlencoded</code> 方式而不是 <code>application/json</code> 方式进行编码</li><li>这不是 <strong>FastAPI</strong> 的限制，而是 HTTP 协议的一部分</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Response Status Code</title>
      <link href="/fastapi-response-status-code/"/>
      <url>/fastapi-response-status-code/</url>
      
        <content type="html"><![CDATA[<h3 id="Response-Status-Code"><a href="#Response-Status-Code" class="headerlink" title="Response Status Code"></a>Response Status Code</h3><p>和声明返回模型一样，可以在装饰器函数中用 <code>status_code</code> 参数声明 HTTP 状态码，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">,</span> status_code<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span></code></pre><p><strong>注：</strong> <code>status_code</code> 是装饰器的参数，而不是 <code>Query</code> 等路径操作函数的参数</p><p><code>status_code</code> 会：</p><ul><li>在响应中返回状态码</li><li>在 <strong>OpanAPI</strong> 模式中记录，例如自动文档</li></ul><p><strong>注：</strong>一些响应码表明相应没有 <strong>body</strong>，<strong>FastAPI</strong> 知道这一点，并且能够生成没有响应正文的 <strong>OpenAPI</strong> 文档</p><h3 id="About-HTTP-status-codes"><a href="#About-HTTP-status-codes" class="headerlink" title="About HTTP status codes"></a>About HTTP status codes</h3><p>在 HTTP 中，将发送 3 位数的数字状态码作为响应的一部分</p><p>这些状态代码有一个相关联的名字用来识别它们，但是重要的部分是数字</p><p>简而言之：</p><ul><li><p><code>100</code> 及以上用来表示信息，很少会直接使用它们，具有这些状态码的响应不应有正文</p></li><li><p><code>200</code> 及以上表明成功响应，它们也是最常被使用的：</p><ul><li><code>200</code> 是默认的状态码，表示 <code>OK</code></li><li><code>201</code> 表示 <code>created</code>，常用于在数据库中新创建了一个记录</li><li><code>204</code> 表示 <code>No Content</code>，被用于没有内容返回给客户端，因此响应不应有正文</li></ul></li><li><p><code>300</code> 及以上用来表示重定向，这些状态码可能有或者没有响应正文，除了 <code>304</code> <code>Not Modified</code> 不能有响应正文</p></li><li><p><code>400</code> 及以上用来表示客户端错误，这也是第二常用的：</p><ul><li><code>404</code> 用来表示 <code>Not Found</code></li><li>对于客户端产生的通用错误，可以仅使用 <code>400</code></li></ul></li><li><p><code>500</code> 及以上用来表示服务器错误，很少会直接使用它们，当应用代码或者服务器出现错误时，将会自动返回这些状态码中的一种</p></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener">MDN</a></p><h3 id="Shortcut-to-remember-the-names"><a href="#Shortcut-to-remember-the-names" class="headerlink" title="Shortcut to remember the names"></a>Shortcut to remember the names</h3><p>可以使用 <code>fastapi.status</code> 中的便捷变量来代替单纯的数字</p><p>例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> statusapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">,</span> status_code<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span></code></pre><p>它们只是为了便利，它们和状态码有一样的数值，只是它们可以使用 IDE 的自动补全功能</p><p><strong>技术细节：</strong></p><ul><li>也可以使用 <code>from starlette import status</code></li><li><strong>FastAPI</strong> 的 <code>fastapi.status</code> 和 <code>starlette.status</code> 相同，只是为了方便，其实 <code>fastapi.status</code> 直接来自 <code>starlette.status</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extra Models</title>
      <link href="/fastapi-extra-models/"/>
      <url>/fastapi-extra-models/</url>
      
        <content type="html"><![CDATA[<h3 id="Extra-Models"><a href="#Extra-Models" class="headerlink" title="Extra Models"></a>Extra Models</h3><p>有时候我们常常会有不止一个关系模型</p><p><strong>用户模型</strong>尤其如此，因为：</p><ul><li><strong>input model</strong> 需要有密码字段</li><li><strong>output model</strong> 不应该有密码字段</li><li><strong>database model</strong> 需要有哈希密码字段</li></ul><p><strong>警告：</strong>永远不要存储用户的明文密码，应该总是存储可以验证的<strong>安全哈希</strong></p><h3 id="Multiple-models"><a href="#Multiple-models" class="headerlink" title="Multiple models"></a>Multiple models</h3><p>下面的例子是关于在用户模型中如何放置密码字段的通用思想</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> EmailStrapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    password<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">UserOut</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">UserInDB</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    hashed_password<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token keyword">def</span> <span class="token function">fake_password_hasher</span><span class="token punctuation">(</span>raw_password<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"supersecret"</span> <span class="token operator">+</span> raw_password<span class="token keyword">def</span> <span class="token function">fake_save_user</span><span class="token punctuation">(</span>user_in<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    hashed_password <span class="token operator">=</span> fake_password_hasher<span class="token punctuation">(</span>user_in<span class="token punctuation">.</span>password<span class="token punctuation">)</span>    user_in_db <span class="token operator">=</span> UserInDB<span class="token punctuation">(</span><span class="token operator">**</span>user_in<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hashed_password<span class="token operator">=</span>hashed_password<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"User saved! ..not really"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> user_in_db@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserOut<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> user_in<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_saved <span class="token operator">=</span> fake_save_user<span class="token punctuation">(</span>user_in<span class="token punctuation">)</span>    <span class="token keyword">return</span> user_saved</code></pre><h4 id="关于-user-in-dict"><a href="#关于-user-in-dict" class="headerlink" title="关于 **user_in.dict()"></a>关于 <code>**user_in.dict()</code></h4><p><code>user_in</code> 是 类 <code>UserIn</code> 的<code>Pydantic</code> 模型实例</p><p><code>Pydantic</code> 模型的 <code>.dict()</code> 方法返回一个含有模型数据的字典</p><p>例如，如果我们创建一个 <code>Pydantic</code> 对象 <code>user_in</code></p><pre class=" language-python"><code class="language-python">user_in <span class="token operator">=</span> UserIn<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">"john"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"secret"</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">"john.doe@example.com"</span><span class="token punctuation">)</span></code></pre><p>接着调用 </p><pre class=" language-python"><code class="language-python">user_dict <span class="token operator">=</span> user_in<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>那么 <code>user_dict</code> 实际上是一个 Python <code>dict</code>，其内容为</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>    <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">'john.doe@example.com'</span><span class="token punctuation">,</span>    <span class="token string">'full_name'</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h4 id="Unwrapping-a-dict"><a href="#Unwrapping-a-dict" class="headerlink" title="Unwrapping a dict"></a>Unwrapping a <code>dict</code></h4><p>如果我们在函数调用或者类实例化时，用 <code>**user_dict</code> 的方法传递像 <code>user_dict</code> 这样的字典参数，Python 将会对其解包，即以关键字参数的方式传递 <code>user_dict</code> 的所有键和值</p><p>在上面的例子中，使用</p><pre class=" language-python"><code class="language-python">UserInDB<span class="token punctuation">(</span><span class="token operator">**</span>user_dict<span class="token punctuation">)</span></code></pre><p>相当于</p><pre class=" language-python"><code class="language-python">UserInDB<span class="token punctuation">(</span>    username<span class="token operator">=</span><span class="token string">"john"</span><span class="token punctuation">,</span>    password<span class="token operator">=</span><span class="token string">"secret"</span><span class="token punctuation">,</span>    email<span class="token operator">=</span><span class="token string">"john.doe@example.com"</span><span class="token punctuation">,</span>    full_name<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p>更准确的说，是</p><pre class=" language-python"><code class="language-python">UserInDB<span class="token punctuation">(</span>    username <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    password <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    email <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    full_name <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"full_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h4 id="Unwrapping-a-dict-and-extra-keywords"><a href="#Unwrapping-a-dict-and-extra-keywords" class="headerlink" title="Unwrapping a dict and extra keywords"></a>Unwrapping a <code>dict</code> and extra keywords</h4><p>在上面的例子中，我们除了进行解包 <code>**user_in.dict()</code>，还添加了额外的关键字参数</p><pre class=" language-python"><code class="language-python">UserInDB<span class="token punctuation">(</span><span class="token operator">**</span>user_in<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hashed_password<span class="token operator">=</span>hashed_password<span class="token punctuation">)</span></code></pre><p>则实际上传递的参数为</p><pre class=" language-python"><code class="language-python">UserInDB<span class="token punctuation">(</span>    username <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    password <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    email <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    full_name <span class="token operator">=</span> user_dict<span class="token punctuation">[</span><span class="token string">"full_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hashed_password <span class="token operator">=</span> hashed_password<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h3 id="Reduce-duplication"><a href="#Reduce-duplication" class="headerlink" title="Reduce duplication"></a>Reduce duplication</h3><p><strong>FastAPI</strong> 的核心宗旨之一是<strong>减少代码冗余</strong></p><p>因为<strong>代码冗余</strong>会增加出现 bug，安全问题，代码不同步问题(在某一处更新代码，而其他的地方没有)的几率</p><p>在上面的例子中，模型共享了具有大量重复属性名字和类型的数据</p><p>我们可以做得更好</p><p>我们可以声明一个 <code>UserBase</code> 模型作为其他模型的基本模型。然后，我们可以使该模型的子类继承其属性（类型声明，验证等）</p><p>所有的数据转换、验证、自动文档等都会正常工作</p><p>这样的话，我们只需要声明这些模型不同的部分(<code>password</code>，<code>hashed_password</code> 以及没有密码)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> EmailStrapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserBase</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    password<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">UserOut</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">UserInDB</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    hashed_password<span class="token punctuation">:</span> str<span class="token keyword">def</span> <span class="token function">fake_password_hasher</span><span class="token punctuation">(</span>raw_password<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"supersecret"</span> <span class="token operator">+</span> raw_password<span class="token keyword">def</span> <span class="token function">fake_save_user</span><span class="token punctuation">(</span>user_in<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    hashed_password <span class="token operator">=</span> fake_password_hasher<span class="token punctuation">(</span>user_in<span class="token punctuation">.</span>password<span class="token punctuation">)</span>    user_in_db <span class="token operator">=</span> UserInDB<span class="token punctuation">(</span><span class="token operator">**</span>user_in<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hashed_password<span class="token operator">=</span>hashed_password<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"User saved! ..not really"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> user_in_db@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserOut<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> user_in<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_saved <span class="token operator">=</span> fake_save_user<span class="token punctuation">(</span>user_in<span class="token punctuation">)</span>    <span class="token keyword">return</span> user_saved</code></pre><h3 id="Union-or-anyOf"><a href="#Union-or-anyOf" class="headerlink" title="Union or anyOf"></a><code>Union</code> or <code>anyOf</code></h3><p>我们可以声明相应为两种类型的联合，即，相应为两种类型之一</p><p>在 <strong>OpenAPI</strong> 中将会使用 <code>anyOf</code> 来定义</p><p>要做到这一点，可以使用 Python 的 <code>typing.Union</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Union<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BaseItem</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    description<span class="token punctuation">:</span> str    type<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">CarItem</span><span class="token punctuation">(</span>BaseItem<span class="token punctuation">)</span><span class="token punctuation">:</span>    type <span class="token operator">=</span> <span class="token string">"car"</span><span class="token keyword">class</span> <span class="token class-name">PlaneItem</span><span class="token punctuation">(</span>BaseItem<span class="token punctuation">)</span><span class="token punctuation">:</span>    type <span class="token operator">=</span> <span class="token string">"plane"</span>    size<span class="token punctuation">:</span> intitems <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"item1"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"All my friends drive a low rider"</span><span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"car"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"item2"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Music is my aeroplane, it's my aeroplane"</span><span class="token punctuation">,</span>        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"plane"</span><span class="token punctuation">,</span>        <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Union<span class="token punctuation">[</span>PlaneItem<span class="token punctuation">,</span> CarItem<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span></code></pre><h3 id="List-of-models"><a href="#List-of-models" class="headerlink" title="List of models"></a>List of models</h3><p>同样，我们可以声明返回一组对象</p><p>要做到这一点，使用 Python 的 <code>typing.List</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> stritems <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"There comes my hero"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Red"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"It's my aeroplane"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>List<span class="token punctuation">[</span>Item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items</code></pre><h3 id="Response-with-arbitrary-dict"><a href="#Response-with-arbitrary-dict" class="headerlink" title="Response with arbitrary dict"></a>Response with arbitrary <code>dict</code></h3><p>我们也可以使用简单任意 <code>dict</code> 声明返回响应，在 <code>dict</code> 中，只需要声明键和值的类型，而不需要使用 <code>Pydantic</code> 模型</p><p>如果事先不知道有效的字段/属性名称（Pydantic模型需要此名称），这将很有用。</p><p>例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/keyword-weights/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Dict<span class="token punctuation">[</span>str<span class="token punctuation">,</span> float<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_keyword_weights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">:</span> <span class="token number">3.4</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Response Model</title>
      <link href="/fastapi-response-model/"/>
      <url>/fastapi-response-model/</url>
      
        <content type="html"><![CDATA[<h3 id="Response-Model"><a href="#Response-Model" class="headerlink" title="Response Model"></a>Response Model</h3><p>可以在路径操作中通过 <code>response_model</code> 参数声明用来返回的模型，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Item<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> item</code></pre><p><strong>注：</strong><code>response_model</code> 是装饰器方法 <code>get</code>，<code>post</code> 的参数，而不是 <code>Query</code> 等路径操作函数的参数</p><p>该参数的接受值具有和声明的 <code>pydantic</code> 模型相同属性，它可以是 <code>Pydantic</code> 模型，或者是 <code>Pydantic</code> 模型列表，如 <code>List[Item]</code></p><p><strong>FastAPI</strong> 将会使用 <code>response_model</code> 来：</p><ul><li>将输出数据转化为其类型</li><li>验证数据</li><li>为返回数据添加 JSON 模式，用来 OpanAPI 路径操作中</li><li>用于自动文档生成系统</li><li><strong>最重要的一点：</strong>对输出数据进行过滤</li></ul><p><strong>技术细节：</strong> <code>response_model</code> 作为 <code>get</code> 等而不是 <code>Query</code> 等的参数的原因是路径函数更可能会先返回 <code>dict</code>，数据库对象或者其他的模型，再交由 <code>response_model</code> 来执行字段的限制和序列化</p><h3 id="Return-the-same-input-data"><a href="#Return-the-same-input-data" class="headerlink" title="Return the same input data"></a>Return the same input data</h3><p>声明一个 <code>UserIn</code> 模型，它包含一个明文密码字段</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> EmailStrapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    password<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token comment" spellcheck="true"># Don't do this in production!</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserIn<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user</code></pre><p>我们用同样的模型 <code>UserIn</code> 声明我们的输入和输出</p><p>当浏览器船舰一个带有密码的用户时，该接口会返回相同的密码</p><p>在上面的例子中，可能不是一个问题，因为是用户自己发送密码</p><p>但是如果我们再其他的路径操作中使用相同的模型，我们可能会把用户的密码发送给所有的客户端</p><p><strong>危险：</strong>永远不要返回用户的明文密码</p><h3 id="Add-an-output-model"><a href="#Add-an-output-model" class="headerlink" title="Add an output model"></a>Add an output model</h3><p>我们可以为输入和输出创建不同的模型，输出模型不包括密码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> EmailStrapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    password<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">UserOut</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserOut<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user</code></pre><p>在这个例子中，即使我们的路径操作函数接受包含密码的用户模型 <code>UserIn</code> ，我们设置返回模型 <code>response_model</code> 为 <code>UserOut</code>，这将不包含用户的密码</p><p><strong>FastAPI</strong> 将会借助 <code>Pydantic</code> 过滤掉所有不在输出模型中的数据</p><h3 id="See-it-in-the-docs"><a href="#See-it-in-the-docs" class="headerlink" title="See it in the docs"></a>See it in the docs</h3><p>当再自动文档中查看时，可以发现输入模型和输出模型具有它们独自的 JSON 模式，并且两个模型都会用于 api 交互文档</p><h3 id="Response-Model-encoding-parameters"><a href="#Response-Model-encoding-parameters" class="headerlink" title="Response Model encoding parameters"></a>Response Model encoding parameters</h3><p>返回的模型可以有默认值，即使 <code>input model</code> 不包含这些默认属性，在 <strong>response</strong> 中也会默认会包含他们</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">10.5</span>    tags<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>items <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The bartenders"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">20.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"baz"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">,</span> <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">10.5</span><span class="token punctuation">,</span> <span class="token string">"tags"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span> response_model_exclude_unset<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span></code></pre><ul><li><p><code>description: str = None</code> 有默认值 <code>None</code></p></li><li><p><code>tax: float = 10.5</code> 有默认值 <code>10.5</code></p></li><li><p><code>tag: List[str] = []</code> 有默认值 <code>[]</code></p></li></ul><p>如果想要在他们没有实际值(只有默认值)的时候忽略他们，例如在 NoSQL 中模型有很多可选的属性，但是并不想返回所有具有默认值的 JSON response，可以设置 <code>response_model_exclude_unset</code> 为 <code>True</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">10.5</span>    tags<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>items <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The bartenders"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">20.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"baz"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> None<span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">,</span> <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">10.5</span><span class="token punctuation">,</span> <span class="token string">"tags"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span> response_model_exclude_unset<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span></code></pre><p>这样默认值将不会包含在返回值中，只有当数据实际存在时才会返回</p><p>如果发送 <code>foo</code> ，则返回的数据为</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">50.2</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong> <strong>FastAPI</strong> 使用 <code>Pydantic</code> 模型的 <code>.dict()</code> 做到这一点</p><p>但是如果数据在默认字段中有值，例如发送 <code>bar</code>，将会返回其自身值，即</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The bartenders"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">62</span><span class="token punctuation">,</span>    <span class="token property">"tax"</span><span class="token operator">:</span> <span class="token number">20.2</span><span class="token punctuation">}</span></code></pre><p>如果数据和默认字段的值相同，<strong>Pydantic</strong> 足够聪明去识别</p><p><strong>注：</strong>默认值可以是任何数，而不只是 <code>None</code></p><h3 id="response-model-include-and-response-model-exclude"><a href="#response-model-include-and-response-model-exclude" class="headerlink" title="response_model_include and response_model_exclude"></a><code>response_model_include</code> and <code>response_model_exclude</code></h3><p>装饰器参数 <code>response_model_include</code> 和 <code>response_model_exclude</code> 接受一个 <code>str</code> 的 <code>set</code>，其中 <code>str</code> 是包含(忽略剩余)或者不包含(包含剩余)的属性名</p><p>这可以被用在只有一个 <code>Pydantic</code> 模型，并且试图快速从输出移出某个数据</p><p><strong>注：</strong>这样的作法并不被推荐。因为 JSON 协议生成的 OpanAPI 仍然会包含整个模型，即使使用 <code>response_model_include</code> 或者 <code>response_model_exclude</code> 忽略了一些属性</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">10.5</span>items <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The Bar fighters"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">20.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"baz"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"There goes my baz"</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">,</span>        <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">10.5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"/items/{item_id}/name"</span><span class="token punctuation">,</span>    response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span>    response_model_include<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item_name</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}/public"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span> response_model_exclude<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"tax"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item_public_data</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span></code></pre><h4 id="Using-lists-instead-of-sets"><a href="#Using-lists-instead-of-sets" class="headerlink" title="Using lists instead of sets"></a>Using <code>list</code>s instead of <code>set</code>s</h4><p>如果在 <code>response_model_include</code> 和 <code>response_model_exclude</code> 中使用 <code>list</code> 或者 <code>tuple</code>，则 <strong>FastAPI</strong> 将会将他们自动转化为 <code>set</code> 并且正确工作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">10.5</span>items <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The Bar fighters"</span><span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">20.2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"baz"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"There goes my baz"</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">50.2</span><span class="token punctuation">,</span>        <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">10.5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"/items/{item_id}/name"</span><span class="token punctuation">,</span>    response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span>    response_model_include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item_name</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}/public"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span> response_model_exclude<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"tax"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item_public_data</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Header Parameters</title>
      <link href="/fastapi-header-parameters/"/>
      <url>/fastapi-header-parameters/</url>
      
        <content type="html"><![CDATA[<h3 id="Header-Parameters"><a href="#Header-Parameters" class="headerlink" title="Header Parameters"></a>Header Parameters</h3><p>定义 Header 参数也和定义 <code>Query</code> 等相同</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Headerapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> user_agent<span class="token punctuation">:</span> str <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> user_agent<span class="token punctuation">}</span></code></pre><p><strong>技术细节</strong>：</p><ul><li><code>Header</code> 是 <code>Path</code>，<code>Query</code> 等的姐妹类，他也继承于 <code>Param</code> 类</li><li>一样是返回同名类的函数</li></ul><p><strong>注：</strong>声明 Header 参数必须显示使用 <code>Header</code></p><h3 id="Automatic-conversion"><a href="#Automatic-conversion" class="headerlink" title="Automatic conversion"></a>Automatic conversion</h3><p><code>Header</code> 在 <code>Path</code> 等的基础上有一些额外的功能</p><p>大多数的标准头由连字符 <code>-</code> 分割，但在 <code>python</code> 中是不合法的变量名，例如 <code>user-agent</code></p><p>因此，<code>Header</code> 会将 python 变量名的下划线 <code>_</code>，自动转化为连字符 <code>-</code></p><p>由于 HTTP 请求头是不区分大小写，因此可以用 python 标准风格 <code>snake_case</code> 来声明它们，即 <code>User-Agent</code> 可以用 <code>user_agent</code> 来声明，而不必 <code>User_Agent</code></p><p>如果因为某些原因要禁用自动转换，可以设置参数 <code>convert_underscores</code> 为 <code>False</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Headerapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> strange_header<span class="token punctuation">:</span> str <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">,</span> convert_underscores<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"strange_header"</span><span class="token punctuation">:</span> strange_header<span class="token punctuation">}</span></code></pre><p><strong>注：</strong>在将 <code>convert_underscores</code>设置为 <code>False</code> 之前，必须明确一些 http 代理或者服务器不允许使用带有下划线的 headers</p><h3 id="Duplicate-header"><a href="#Duplicate-header" class="headerlink" title="Duplicate header"></a>Duplicate header</h3><p>有可能会接收到重复的 headers，即，具有不同值的相同 headers</p><p>可以用 <code>list</code> 类型来定义</p><p>将会从重复的 headers 接收到值</p><p>例如，声明 <code>X-TOKEN</code> header 可以出现多次</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Headerapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>x_token<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"X-Token values"</span><span class="token punctuation">:</span> x_token<span class="token punctuation">}</span></code></pre><p>如果 HTTP header 如下</p><pre class=" language-json"><code class="language-json">X-Token<span class="token operator">:</span> fooX-Token<span class="token operator">:</span> bar</code></pre><p>则返回</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"X-Token values"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"bar"</span><span class="token punctuation">,</span>        <span class="token string">"foo"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie Parameters</title>
      <link href="/fastapi-cookie-parameters/"/>
      <url>/fastapi-cookie-parameters/</url>
      
        <content type="html"><![CDATA[<h3 id="Cookie-Parameters"><a href="#Cookie-Parameters" class="headerlink" title="Cookie Parameters"></a>Cookie Parameters</h3><p>cooke 变量的声明与之前定义 <code>Query</code> 和 <code>Path</code> 变量相同</p><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Cookie<span class="token punctuation">,</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> ads_id<span class="token punctuation">:</span> str <span class="token operator">=</span> Cookie<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"ads_id"</span><span class="token punctuation">:</span> ads_id<span class="token punctuation">}</span></code></pre><p><strong>技术细节</strong>：</p><ul><li><code>Cookie</code> 是 <code>Path</code> 和 <code>Query</code> 的姐妹，他同样继承于 <code>Param</code> 类</li><li>从 <strong>fastapi</strong> 中导入的<code>Cookie</code>，<code>Path</code> 实际上是函数，它们返回同名的类</li></ul><p><strong>注：</strong>声明 cookies，必须显示使用 <code>Cookie</code>，否则会被识别为查询参数</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extra Data Types</title>
      <link href="/fastapi-extra-data-types/"/>
      <url>/fastapi-extra-data-types/</url>
      
        <content type="html"><![CDATA[<p>见<a href="https://fastapi.tiangolo.com/tutorial/extra-data-types/" target="_blank" rel="noopener">官方文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Schema Extra - Example</title>
      <link href="/fastapi-schema-extra-example/"/>
      <url>/fastapi-schema-extra-example/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center;">    Schema Extra - Example</h1><h3 id="Schema-Extra-Example"><a href="#Schema-Extra-Example" class="headerlink" title="Schema Extra - Example"></a>Schema Extra - Example</h3><p>可以为 JSON 模式定义额外的信息</p><p>一个常见的用法是为 api 文档添加一个例子</p><p>有如下的几种方式来定义额外的 JSON 模式信息</p><h4 id="Pydantic-schema-extra"><a href="#Pydantic-schema-extra" class="headerlink" title="Pydantic schema_extra"></a>Pydantic <code>schema_extra</code></h4><p>可以通过使用 <code>Config</code> 和 <code>schema_extra</code> 为 <code>Pydantic</code> 模型声明例子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>        schema_extra <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"example"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>                <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"A very nice Item"</span><span class="token punctuation">,</span>                <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">35.4</span><span class="token punctuation">,</span>                <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p>这些额外的信息会被添加到 api 文档的 <code>example value</code> 中</p><h4 id="Field-additional-arguments"><a href="#Field-additional-arguments" class="headerlink" title="Field additional arguments"></a><code>Field</code> additional arguments</h4><p>在 <code>Field</code>，<code>Path</code> 等，可以通过 <code>example</code> 参数来添加例子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> Fieldapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token string">"Foo"</span><span class="token punctuation">)</span>    description<span class="token punctuation">:</span> str <span class="token operator">=</span> Field<span class="token punctuation">(</span>None<span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token string">"A very nice Item"</span><span class="token punctuation">)</span>    price<span class="token punctuation">:</span> float <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token number">35.4</span><span class="token punctuation">)</span>    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Field<span class="token punctuation">(</span>None<span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token number">3.2</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p><strong>注：</strong>这些额外的参数只是用来为帮助文档添加注释，并不会有任何验证的功能</p><h4 id="Body-additional-arguments"><a href="#Body-additional-arguments" class="headerlink" title="Body additional arguments"></a><code>Body</code> additional arguments</h4><p>同 <code>Field</code> 的用法一样，也可以对 <code>Path</code>， <code>Query</code>，<code>Body</code> 中添加例子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        example<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>            <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"A very nice Item"</span><span class="token punctuation">,</span>            <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">35.4</span><span class="token punctuation">,</span>            <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><h3 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h3><p>JSON 协议中在最近的版本中定义了 <code>examples</code> 字段，但是 <strong>OpenAPI</strong> 基于老版本的 JSON，因此没有 <code>examples</code> 字段</p><p><strong>OpenAPI</strong> 通过定义 <code>example</code> 实现和 JSON 类似的功能，这也是帮助文档界面所使用的</p><h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><p>可以用相同的方式为 JSON 模式添加额外信息，例如自定义前端UI</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Body - Nested Models</title>
      <link href="/fastapi-body-nested-models/"/>
      <url>/fastapi-body-nested-models/</url>
      
        <content type="html"><![CDATA[<h3 id="Body-Nested-Models"><a href="#Body-Nested-Models" class="headerlink" title="Body - Nested Models"></a>Body - Nested Models</h3><p>可以将属性定义为子类型，例如 python 的 <code>list</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p><code>tags</code> 表示实体列表，尽管没有显式声明每个实体的类型</p><h3 id="List-fields-with-subtype"><a href="#List-fields-with-subtype" class="headerlink" title="List fields with subtype"></a>List fields with subtype</h3><p>可以通过 python 的 <code>typing</code> 标准库来声明具有子类型的列表，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><h3 id="Set-types"><a href="#Set-types" class="headerlink" title="Set types"></a>Set types</h3><p>使用 <code>set</code> 类型可以声明一组不重复的实体</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p>通过 <code>set</code>，即使接收到一组重复数据，也将会被自动转化为一组没有重复的实体</p><p>这些也会被自动加入注解</p><h3 id="Nested-Models"><a href="#Nested-Models" class="headerlink" title="Nested Models"></a>Nested Models</h3><p><code>Pydantic</code> 模型的每一个属性都有其类型，并且这些类型可以是另一个 <code>Pydantic</code> 模型，因此可以声明嵌套的 <code>JSON</code> 对象，并且这些对象可以有特定的属性名称，类型和验证</p><p><strong>所有这些都可以被任意嵌套</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> str    name<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    image<span class="token punctuation">:</span> Image <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p>在上面的例子中，<code>Image</code> 模型作为 <code>Item</code> 模型的一个属性</p><p><strong>FastAPI</strong> 期望的 <strong>request body</strong> 类似于</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>    <span class="token property">"tax"</span><span class="token operator">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"rock"</span><span class="token punctuation">,</span> <span class="token string">"metal"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"image"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://example.com/baz.jpg"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"The Foo live"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>仅仅使用上述声明以及 <strong>FastAPI</strong>，将可以获得</p><ul><li>IDE 支持</li><li>数据自动转换</li><li>数据验证</li><li>自动文档</li></ul><h3 id="Special-types-and-validation"><a href="#Special-types-and-validation" class="headerlink" title="Special types and validation"></a>Special types and validation</h3><p>除了类似于 <code>str</code>，<code>int</code>，<code>float</code> 普通的单一类型，还可以使用继承于 <code>str</code> 的更加复杂的类型</p><p>例如，在 <code>Image</code> 模型里面，我们可以用 <code>HttpUrl</code> 类型来代替普通的 <code>str</code>，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> HttpUrlapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> HttpUrl    name<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    image<span class="token punctuation">:</span> Image <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p><code>url</code> 属性将会自动检查是否是合法的 <code>URL</code>，并且在自动文档中标注</p><h3 id="Attributes-with-lists-of-submodels"><a href="#Attributes-with-lists-of-submodels" class="headerlink" title="Attributes with lists of submodels"></a>Attributes with lists of submodels</h3><p><code>Ptdantic</code> 模型同样可以作为 <code>list</code>，<code>set</code> 等的子类型，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> HttpUrlapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> HttpUrl    name<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    images<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Image<span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p>上面的例子将会期待 <strong>body</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>    <span class="token property">"tax"</span><span class="token operator">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>    <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"rock"</span><span class="token punctuation">,</span>        <span class="token string">"metal"</span><span class="token punctuation">,</span>        <span class="token string">"bar"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"images"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://example.com/baz.jpg"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"The Foo live"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://example.com/dave.jpg"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"The Baz"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="Deeply-nested-models"><a href="#Deeply-nested-models" class="headerlink" title="Deeply nested models"></a>Deeply nested models</h3><p>可以定义任意深度嵌套的模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> HttpUrlapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> HttpUrl    name<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    images<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Image<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Offer</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    items<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Item<span class="token punctuation">]</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/offers/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_offer</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> offer<span class="token punctuation">:</span> Offer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> offer</code></pre><h3 id="Bodies-of-pure-lists"><a href="#Bodies-of-pure-lists" class="headerlink" title="Bodies of pure lists"></a>Bodies of pure lists</h3><p>如果希望 <strong>JSON body</strong> 的顶层值是一个 JSON <code>array</code>，可以如下声明</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> HttpUrlapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> HttpUrl    name<span class="token punctuation">:</span> str@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/images/multiple/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_multiple_images</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> images<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Image<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> images</code></pre><h3 id="Bodies-of-arbitrary-dicts"><a href="#Bodies-of-arbitrary-dicts" class="headerlink" title="Bodies of arbitrary dicts"></a>Bodies of arbitrary <code>dict</code>s</h3><p>同样可以使用具有某些类型的键和某些类型的值的 <code>dict</code> 来声明 <strong>request body</strong></p><p><strong>可以被用在如果某些键和值名字不确定的情况</strong>，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/index-weights/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_index_weights</span><span class="token punctuation">(</span>weights<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>int<span class="token punctuation">,</span> float<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> weights</code></pre><p>在上述例子中，只要是整形的 <code>key</code> 和浮点型的 <code>value</code> 就会被接受</p><p><strong>注：</strong>JSON 只支持 <code>str</code> 作为键，但是 <code>Pydantic</code> 模型可以对数据进行自动转换。即，即使客户端只支持发送字符串作为键，只要这些键只包含纯整数，<code>Pydantic</code> 就会进行自动转化和验证</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Body - Multiple Parameters</title>
      <link href="/fastapi-body-multiple-parameters/"/>
      <url>/fastapi-body-multiple-parameters/</url>
      
        <content type="html"><![CDATA[<h3 id="Mix-Path-Query-and-body-parameters"><a href="#Mix-Path-Query-and-body-parameters" class="headerlink" title="Mix Path, Query and body parameters"></a>Mix <code>Path</code>, <code>Query</code> and body parameters</h3><p>我们可以自由的混合 <code>Path</code> 和 <code>Query</code> 和 <strong>request body</strong>，<strong>FastAPI</strong> 知道如何自动处理</p><p><strong>request body</strong> 参数也是可选的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Path<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> int <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The ID of the item to get"</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item <span class="token operator">=</span> None<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> item<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p><strong>注：</strong>再上面的例子中，<strong>request body</strong> 是可选的</p><h3 id="Multiple-body-parameters"><a href="#Multiple-body-parameters" class="headerlink" title="Multiple body parameters"></a>Multiple body parameters</h3><p>可以同时声明多个 <strong>request body</strong>，如下面的例子同时声明了 <code>Item</code> 和 <code>User</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> user<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p><strong>注：</strong>上述例子中期望的 <strong>body</strong> 会加上参数名作为字段名称，即</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"item"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token property">"tax"</span><span class="token operator">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"dave"</span><span class="token punctuation">,</span>        <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"Dave Grohl"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>FastAPI</strong> 将会对接收到的 <strong>body</strong> 进行自动转换和数据验证，因此 <code>item</code> 将会自动被转换为 <code>Item</code> 类型</p><h3 id="Singular-values-in-body"><a href="#Singular-values-in-body" class="headerlink" title="Singular values in body"></a>Singular values in body</h3><p>对于查询参数和路径参数而言，可以用 <code>Query</code> 和 <code>Path</code> 声明额外的数据。<strong>FastAPI</strong> 为 <strong>request body</strong> 提供了 <code>Body</code> 函数</p><p>例如，在上面的例子中，想要声明另一个单值键 <code>importance</code>，如果直接在参数中声明，会由于是单值而被 <strong>FastAPI</strong> 识别为查询参数，这时可以使用 <code>Body</code> 来告诉 <strong>FastAPI</strong> 要声名的是 <code>Body</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> user<span class="token punctuation">:</span> User<span class="token punctuation">,</span> importance<span class="token punctuation">:</span> int <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span> <span class="token string">"importance"</span><span class="token punctuation">:</span> importance<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p>按照上述声明，则结果为</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"item"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token property">"tax"</span><span class="token operator">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"dave"</span><span class="token punctuation">,</span>        <span class="token property">"full_name"</span><span class="token operator">:</span> <span class="token string">"Dave Grohl"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"importance"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre><h3 id="Multiple-body-params-and-query"><a href="#Multiple-body-params-and-query" class="headerlink" title="Multiple body params and query"></a>Multiple body params and query</h3><p>单值变量将会被解释为查询参数，而不需要用 <code>Query</code> 显式声明，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    full_name<span class="token punctuation">:</span> str <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span>    user<span class="token punctuation">:</span> User<span class="token punctuation">,</span>    importance<span class="token punctuation">:</span> int <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span> <span class="token string">"importance"</span><span class="token punctuation">:</span> importance<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>中 <code>q</code> 为查询参数</p><p><strong>注：</strong><code>Body</code> 和 <code>Query</code> ，<code>Path</code> 一样有所有的验证参数和元信息</p><h3 id="Embed-a-single-body-parameter"><a href="#Embed-a-single-body-parameter" class="headerlink" title="Embed a single body parameter"></a>Embed a single body parameter</h3><p>为 <code>Body</code> 添加 <code>embed</code> 参数可以使得单个 <strong>body</strong> 也是嵌入的，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p>期望的 <strong>body</strong> 是</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"item"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token property">"tax"</span><span class="token operator">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Body - Fields</title>
      <link href="/fastapi-body-fields/"/>
      <url>/fastapi-body-fields/</url>
      
        <content type="html"><![CDATA[<h3 id="Body-Fields"><a href="#Body-Fields" class="headerlink" title="Body - Fields"></a>Body - Fields</h3><p>和路径操作函数 <code>Query</code>，<code>Path</code>，<code>Body</code> 一样，可以在 <strong>Pydantic</strong> 模型中使用 <code>Field</code> 添加验证信息和元信息</p><h3 id="Import-Field"><a href="#Import-Field" class="headerlink" title="Import Field"></a>Import <code>Field</code></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> Fieldapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> Field<span class="token punctuation">(</span>None<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The description of the item"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    price<span class="token punctuation">:</span> float <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"The price must be greater than zero"</span><span class="token punctuation">)</span>    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><p><strong>注意：</strong><code>Field</code> 参数直接由 <code>pydantic</code>导入，而不是来自 <strong>FastAPI</strong></p><p><strong>提示：</strong> <code>Field</code> 提供和 <code>Query</code> 等一样的 api</p><h4 id="技术细节："><a href="#技术细节：" class="headerlink" title="技术细节："></a>技术细节：</h4><ul><li><p><code>Query</code>，<code>Path</code> 等都会创建 <code>Param</code> 子类的实例，而 <code>Param</code> 又继承于 <code>pydantic</code> 的 <code>FieldInfo</code></p></li><li><p><code>Field</code> 也会返回 <code>FieldInfo</code> 的实例</p></li><li><p><code>Body</code> 也会返回 <code>FieldInfo</code> 子类的实例，包括 <code>Body</code> 的子类等</p></li><li><p><strong>从 <code>fastapi</code> 导入的 <code>Query</code>，<code>Path</code> 等等都是返回特殊类的函数</strong></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm compressive</title>
      <link href="/algorithm-compressive/"/>
      <url>/algorithm-compressive/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>二分法最好情形比较 $1$ 次，最坏 $\lfloor \log n \rfloor +1$</li><li>合并排序的比较次数 $min(n_1,n_2) \sim n_1+n_2-1$</li><li>选择排序比较次数恒为 $\frac{n(n-1)}{2}$</li><li>插入排序比较次数 $n-1 \sim \frac{n(n-1)}{2}$</li><li><font color="red">自底向上合并排序</font>：第 $k$ 次迭代中，对 $n/2^k$ 个有$2^k$ 个元素的数组一共进行了 $n/2^{k+1}$ 合并，总比较次数为 $2^k \sim 2^{k+1}-1$，比较次数为 $\frac{n \log n}{2} \sim n \log n -n + 1$</li><li>根据评分的歌曲随机播放算法：1：根据评分复制编号次数（时间复杂度$O(1)$，空间复杂$O(n*歌曲评分)$）；2：根据评分生成区间+随机数判断落入哪一个区间（时间复杂度$O(logn)$，空间复杂度$O(n^2)$）</li><li>euclid 算法最坏情况当$m,n$为 fibonacci 数列中连续的数，$O(\log n)$</li></ol><h3 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h3><ol><li>相对补 $A \bigoplus B=(A-B) \bigcup (B-A)=(A \bigcup B)-(A \bigcap B)$</li><li>集合的二元关系：空集；非空集合且元素都是<font color="red">有序对</font></li><li>等价关系=自反+对称+传递；偏序关系=自反+反对称+传递；可比关系？</li></ol><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ol><li>堆不一定是完全二叉树（如斐波那契堆）</li><li>堆的基本操作：make(每一个非叶子节点下移，时间复杂度 O(n))、insert(插堆尾+siftUp)、delete(与堆尾元素交换，尾大则siftUp，尾小则siftDown)、pop</li><li><font color="red">计数排序</font>（适用于整数且数值较小）：A(待排序)、B(已排序)、C(临时空间,长度为 A 的最大值)，C[i] 表示 A 中值为 i 的元素所在的区间左端点，也即 i 在 B 中的下标</li><li><font color="red">基数排序</font>（适用于具有相同或相近位数的排序）：对所有数从低位到高位依次进行排序（位数不齐补0）（必须使用稳定排序算法、也可以用表的方法）</li><li>不相交集基本操作：find、union（rank、权重平衡）</li><li>路径压缩：找 y 的根节点，找到之后重复操作并将途径所有节点直接指向根节点（即成为根节点的儿子节点）；可能会造成<font color="red">根节点的 rank 大于树的高度</font>（find 操作不会改变 rank）</li></ol><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ol><li><p>解决递归的相关问题最重要的两个要素是<font color="red">边界条件</font>和<font color="red">递归方程</font></p></li><li><p>perm 算法关键在于 <font color="red">交换+递归+交换</font>，时间复杂度 $O(nn!)$</p></li><li><p><font color="red">整数划分</font>：$q(n,m)$ 表示正整数 $n$ 的最大加数不超过 $m$ 的划分，则有 ：$q(n,1)=1；q(n,m)=q(n,n)[m&gt;n]；q(n,n)=q(n,n-1)+1；q(n,m)=q(n, m-1)+q(n-m,m)$</p><p>(最后一个式子表示不大于 $m$ 的划分由<font color="red">至少包含一个 $m$ </font>以及<font color="red">不大于 $m-1$</font> 构成)</p></li><li><p>递归树：节点的<font color="red">总和</font>为时间复杂度</p></li><li><p>$f(n)=f(\lfloor c_1n \rfloor)+f(\lfloor c_2n \rfloor)+bn$；当 $c_1+c_2=1,O(n \log n) $ ；$c_1 + c_2 &lt; 1, \Theta(n)$ </p></li><li><p>$T(n)=aT(n / b) + n^x$；当 $a &lt; b^x, \Theta(n^x)$ ；$a=b^x, \Theta(n^x \log n)$；$a &gt; b^x, \Theta(n^{log_b a})$ </p></li><li><p>桶排序(桶之间顺序已经确定，只需要桶内排序)：$n$ 个数放到 $k$ 个桶，平均 $n+\frac{n^2}{k}$</p></li></ol><h3 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h3><ol><li><p>过程：分解+解决+合并</p></li><li><p>找出$A$中第$k$小的元素：(1)五个元素一组，组内排序(2)取出每个组中间的元素形成组$B$，递归找$B$的中间的元素$m$(3)用$A_1,A_2,A_3$分别存储$A$中小于、等于、大于$m$的元素，若$k&lt;=len(A_1)$，在$A_1$中递归寻找；若$k&lt;=len(A_1)+len(A_2)$，返回$m$；否则在$A_3$中递归寻找 </p></li><li><p>快速排序：找到指定元素所在位置，分割左、右子数组。</p></li><li><p>大整数乘法：$XY=(A·2^{n/2}+B)(C·2^{n/2}+D)=A·C·2^n+((A+B)(C+D)-AC-BD)·2^{n/2}+BD$</p><p>时间复杂度 $O(n^{log_23})$</p></li><li><p>最大子数组(分治法)：$max(左半边，右半边，跨中间)$ 跨中间的求法为：遍历直到两边（先遍历完左边或者右边都可以）并记录和最大的两个下标。时间复杂度 $O(n \log n)$</p></li></ol><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ol><li>动态规划的实质是<font color="red">分治</font>和<font color="red">消除冗余</font>，基本步骤为：找出最优解性质；递归定义最优值；自底向上算出最优值；根据最优值构造最优解</li><li>矩阵连乘问题：设$A_i=p_{i-1} \times p_{i}$；$A[i:j]$表示$A_i·…·A_j$；$m[i:j]$表示$A[i:j]$最优值；$s[i:j]$记录$A[i:j]$最优划分的位置(即$k$)。则有$m[i,i]=0;m[i,j]=min(m[i,k]+m[k+1,j]+p_{i-1} \times p_k \times p_j)$</li><li>求$X,Y$<font color="red">最长公共子序列</font>：$c[i:j]$表示$X$的前$i$个元素和$Y$的前$j$个元素得到的最长公共子序列的长度，则$c[0:k]=c[t:0]=0$；$c[i:j]=c[i-1:j-1]+1$   <font color="purple">$ if \,\,X[i]=Y[j]$</font>；$c[i:j]=max(c[i-1:j],c[i:j-1])$  <font color="purple">$if \,\, X[i]!=Y[j]$</font>。最长的公共子序列为$c$中的拐点对应的元素</li><li>求$a[1:n]$最大子数组(DP)：$b[j]$表示$a[1:j]$中包含$a[j]$的最大子数组的值，当$b[i-1]&gt;0$时，有$b[i]=b[i-1]+a[i]$；当$b[i-1]&lt;0$时，$b[i]=a[i]$。最大子数组为从最大的$b[k]$到左边最后一个非负的$b[t]$</li><li>动态规划必须具备<font color="red">最优子结构</font>和<font color="red">子问题重叠</font></li><li>0-1背包问题：$m[i:j]$表示在容量为$j$和前$i$个物品的情况下的最优值，当$0&lt;j&lt;w_i$时，有$m[i:j]=m[i-1:j]$；否则$m[i:j]=max(m[i-1:j],m[i-1:j-w_i]+v_i)$。选用的背包可以通过$m[i:j],m[i-1:j]$的关系来确定</li><li>floyd：$d^k[i:j]$表示经过前$k$个后$i,j$之间的最短距离，则$k=0$时$d^k[i:j]=初始距离$$d^k[i:j]=min(d^{k-1}[i:j],d^{k-1}[i:k]+d^{k-1}[k:j])$ <font color="red">第$k$次迭代中$k$行$k$列都不变</font></li><li>OBST：$k[1:n]$是已排序关键字序列，$d[0:n]$是伪关键字序列，且有$d_{i-1}&lt;k_i&lt;d_i$，$p[1:n]$为关键字搜索频率，$q[0:n]$为伪关键字搜索频率，且 $\sum p_i+\sum q_j=1$ ，$e[i:j]$为包含$k[i:j]$和$d[i-1:j]$的最优值，$w[i:j]$为 $\sum_{k=i}^j p_k+\sum_{t=i-1}^j q_t$，$root[i:j]$记录形成$e[i:j]$的根节点。则有$e[i,i-1]=q_i$；$e[i:j]=min(e[i:k-1]+e[k+1:j]+w[i:j])$ <font color="red">这里的$k-1$从$i-1$开始，$k+1$可到$j+1$</font></li><li>金钱分配问题(n 种面值硬币兑换 y 元)：$M[k]$表示$k$元的最优解，则$M[k]=min(M[k-v_i]+1)$ </li></ol><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><ol><li><font color="red"><strong>贪心算法的证明</strong></font>：将贪心解与<font color="red">任一最优解</font>比较，如果不同，寻找第一个不同的$X_i$，<strong><em>证明用贪心解替换最优解之后<font color="red">总价值不减</font></em></strong>，反复进行下去即可得贪心解即是最优解</li><li>活动安排问题(greedy)：按照结束时间排序；选择最早开始的活动；删除在该活动结束之前就开始的活动；重复上述过程。（证明：用子问题中最早结束的活动替换子问题的<font color="lightblue">最大兼容活动子集</font>中最早结束的活动）</li><li>霍夫曼编码(<font color="red">左零右一、左小右大</font>)：算法实现可以用小根堆(每次弹出两个合并在放回堆)。正确性的证明(最低频的一定深度最深+<font color="red">最优子结构</font>?)</li><li>最小生成树：包含图的所有顶点且边权之和最小的树</li><li>最小生成树性质：将顶点划分为两个集合$U,V$，则$U,V$中权值最小的边一定在图的某个最小生成树中</li><li>Prim：将顶点划分为两个集合$U,V$，初始$U=\phi$。将根节点加入，作为当前节点并更新所有与其相邻的节点；加入权值最短的边对应的顶点并作为当前顶点；重复上述步骤直到加入所有的顶点。<font color="red">证明?</font>。时间复杂度$O(E \log V)$</li><li>Kruskal：<font color="red">在边所对应的两个点的祖先节点不同时</font>依次将权值最小的边加入。可以用并查集和小根堆实现。时间复杂度$O(E \log E)$</li><li>Dijkstra：用$\lambda[1:n]$表示和源点的最短距离，将顶点划分为两个集合$X,Y$，初始$Y = 源节点$，将$X$中与<font color="red">源节点</font>距离最短(即最小的 \lambda[k] 对应)的点$y$加入$X$(<font color="red">这也是和Prim不同的地方</font>)；更新所有与$y$相邻的节点的$\lambda[k]$值</li><li>dijkstra证明(数学归纳法)：$\lambda[1:n],\xi[1:n]$为算法求得最短路径和实际最短路径。对新加入的点$y$，在其<font color="red">真实</font>最短路径经过的点中找到<font color="red">逆向</font>找到第一个$X$中的点$x$。则若$x,y$中没有其他点，有$\lambda[y] \le \lambda[x]+dis[x:y]$(<font color="red">将$X$加入时算法的更新操作</font>)$=\xi[x]+dis[x:y]=\xi[y]$；若$x,y$中有点$w$，则$\lambda[y] \le \lambda[w]+dis[x:w]=\xi[w] $$\le xi[y]$</li><li>B-F：$d[1:n]$为距离数组。遍历图中的每一条边并作<font color="red">松弛</font>(边 &lt;u,v&gt;，如果 d[v]&gt;d[u]+dis[u:v]，则 d[v]=d[u]+dis[u:v] )，遍历$i$次时，即找到经过$i$条边的最短距离(并不一定是最终的最短距离)，至多遍历$n-1$次即可找出源点到其他点的最短距离；遍历第$n$次时，若存在$k$使得$d[k]$发生改变，说明存在负环。</li><li>B-F改进(spfa)：B-F算法中只需要对<font color="red">新加入</font>的节点进行<font color="red">松弛</font>，可以用队列实现这个结构。(某个点入队超过 n 次表明存在负环)</li></ol><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><ol><li><font color="red">先序号</font>：先序遍历的序号。<font color="red">后序号</font>：回溯的序号。无向图：对于某条边$(u,v)$，若$vis[v]=0$，则为<font color="red">树边</font>；否则为<font color="red">回边</font>。有向图：对于某条边$&lt;u,v&gt;$，若$vis[v]=0$，则为<font color="red">树边</font>；否则若$u$是$v$的祖先，则为<font color="red">前向边</font>；否则若$v$是$u$的祖先，则为<font color="red">回边</font>；否则为<font color="red">横跨边</font></li><li><strong>图回路判定</strong>：若是联通的无向图，仅当$|E|=|V|-1$，否则可根据是否有<font color="red">回边</font>来判断</li><li><strong>拓扑排序</strong>(<font color="red">有向无回路</font>)：从入度为$0$的点(<font color="red">有多个时可以新增一个节点指向这些入度为$0$的节点</font>)进行DFS，反序号<font color="red"><strong>从大到小</strong></font>对应一个拓扑序</li><li><strong>寻找关节点</strong>(<font color="red">无向图</font>中存在某两个点之间的所有路径必须经过该节点)：每个点$v$有两个信息$\alpha_v=先序号,\beta_v=min(\alpha_v,\alpha_{parents},\beta_{sons})$，若点$v$有回边，则$\alpha_{parents}$为祖先节点的$\alpha$，$\beta_{sons}$指孩子节点的$\beta$。判断：若是$v$根节点，则至少有两个儿子；若不是根节点，则$v$至少有一个儿子$w$满足$\beta_w \ge \alpha_v$</li><li><strong>强连通分支</strong>(任意两个点之间都有路径的<font color="red">有向图</font>)：进行深度优先搜索得到每一个点的后序号；颠倒图中边的方向；从后序号最大的点开始，在新图中进行DFS；形成的每一棵树即为一个强连通分支</li><li>BFS有向图中只有<font color="red">树边</font>和<font color="red">横跨边</font>；无向图中只有：<font color="red">树边</font>和<font color="red">回边</font>和<font color="red">横跨边</font></li><li>DFS有向图中边<strong>分类</strong>：DFS获得先序号$pre$和后序号$post$，对于边$&lt;x,y&gt;$，若$vis[y]=0$，则为<em>树边</em>；否则若 $x_{pre}&lt;y_{pre} \quad and \quad x_{post}&gt;y_{post}$ ，则为<em>前向边</em>；否则若 $x_{pre} &gt; y_{pre} \quad and \quad x_{post}&lt;y_{post}$ ，则为<em>回边</em>；否则为横跨边</li></ol><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><ol><li>回溯框架：若已有部分解$(x_1,…,x_j)$，考察$v=(x_1,…,x_{j+1})$：若是最终解，则输出或结束；若是部分解，则选择$X_{j+2}$中的最小元素$x_{j+2}$；否则若$X_{j+1}$中还有没有用过的元素，则选择该元素作为$x_{j+1}$，若无其他元素，则<font color="red">回溯</font>，将$X_j$中下一个元素作为$x_j$，<font color="red">重置</font>$X_{j+1}$</li></ol><pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 层数</span><span class="token keyword">while</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> unchecked<span class="token punctuation">(</span>X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> boundry<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># boundry为约束函数, unchecked 返回所有可能的值</span>        <span class="token keyword">if</span> is_answer<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            reset<span class="token punctuation">(</span>X<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>            k <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span></code></pre><ol start="2"><li>0-1背包问题：$P34$在哪里减？改进方法为左子树用<font color="red">边界条件</font>右子树用<font color="red">约束函数(小数背包问题)</font>进行剪枝</li><li>最大团问题(找最大完全子图)：左子树用<font color="red">可行性条件</font>，右子树用<font color="red">当前最优值</font>剪枝</li><li>单源最短路径(分支限界法)：经过某节点到终点的下界(不大于最优解的界限)为：源点到该节点的最短路径+此节点的最短边(<font color="red">点是可以重复取的</font>。若已经到终点：不大于对顶元素时找到解，否则继续入堆</li><li>分支限界法找到的<font color="red">上界(下界)</font>必须总是保证<font color="red">不少于(不大于)</font>最优解(即比最优解还要优，虽然不一定存在)，才能保证最后获得正确的结果</li><li>0-1背包问题：用小数背包的结果作为上界，可用当前最优解和上界相比进行剪枝</li><li>TSP：可先用<font color="red">贪心算法</font>找到一个解(不一定是最优解)进行剪枝。用每个点的相邻最近的两个顶点的距离(<strong><em>若已经有选择的边则必须算上选择的边</em></strong>)之和相加除以二<font color="red">取上整</font>作为下界</li><li>任务分配问题：贪心+最优时间(不管任务是否已经分配)作为下界</li></ol><h3 id="NP"><a href="#NP" class="headerlink" title="NP"></a>NP</h3><ol><li>$P$类问题：对于一个判定问题，能够以$O(n^k)$运行一个<font color="red">确定性算法(每一步只有一个确定的选择)</font>得到答案。$NP$类问题：对于一个判定问题，能够以$O(n^k)$时间运行一个<font color="red">非确定性算法(猜测+验证)</font>得到答案。简单来说，$P$可以在多项式时间内解出，$NP$能够在多项式时间验证解(显然 P \subseteq NP )。 NP 完全问题： NP 类问题+每一个$NP$类问题都可以在多项式时间规约为该问题。$NP$难问题：所有$NP$类问题能在多项式时间化为该问题，但该问题不一定是$NP$类问题。NPI 问题：不知道属于 P 还是 NP 。</li><li>证明一个问题是$NPC$问题：$NP$问题+一个已知的$NPC$问题能在多项式时间转化为该问题</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原根与指标</title>
      <link href="/math-yuan-gen-yu-zhi-biao/"/>
      <url>/math-yuan-gen-yu-zhi-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$m &gt; 1 \in Z, \; (a, m) = 1 $，则使得 $a^e \equiv 1 \quad (mod \; m)$ 成立的<strong>最小正整数</strong> $e$ 称为 $a$ 对模 $m$ 的<strong>指数</strong>或者<strong>阶</strong>，记作 $ord_m a$，若 $\psi(m) = ord_m a$，则 $a$ 称为模 $m$ 的<strong>原根</strong></p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p><strong>注：</strong>$m &gt; 1 \in Z, \; (a, m) = 1$</p><ul><li><p>$a^d \equiv 1 \quad (mod \; m) \iff ord_m a | d$</p><ul><li>取 $d = \psi(m)$ 可知原根必然是欧拉函数 $\psi(m)$ 的因数</li></ul></li><li><p>$a \equiv b \quad (mod \; m) \implies ord_m a = ord_m b$</p></li><li><p>$ord_m a^{-1} = ord_m a$</p></li><li><p>$a^i, \quad i \in [0, ord_m (a) - 1]$ 两两不同余：</p><ul><li>若 $a$ 是模 $m$ 的原根，则其构成模 $m$ 的一个简化剩余系</li></ul></li><li><p>$a^d \equiv a^k \quad (mod \; m) \iff d \equiv k \quad (mod \; ord_m a)$</p></li><li><p><font color="red">$ord_m a^d = \cfrac{ord_m a}{(d, ord_m a)}$</font></p><ul><li>$g^d$ 是模 $m$ 的原根当且仅当 $(d, \psi(m)) = 1$，<strong>此定理可用来求一个数的所有原根</strong></li><li>模 $m$ 的原根个数为 $\psi(\psi(m))$ 或 $0$</li><li>$k | ord_m a$，则使得 $ord_m a^d = k$ 的 $d$ 满足 $\cfrac{ord_m a}{k} | d$，且这样的 $d$ 有 $\psi(k)$ 个</li></ul></li><li><p><font color="red">$a, b$ 都与 $m$ 互素，则 $(ord_m a, ord_m b) = 1 \iff ord_m(ab) = ord_m (a) \cdot ord_m (b)$</font></p></li><li><p>$n | m \implies ord_n a | ord_m a$</p></li><li><p><font color="red">$(m, n) = 1 \implies ord_{mn} a = [ord_m a, ord_n a]$</font></p><ul><li>若 $m$ 的标准分解式为 $m = 2^n \cdot p_1^{\alpha_1} \cdots p_k^{\alpha_k}$，则</li></ul><p>$$<br>ord_m a = [ord_{2^n} a, \dots, ord_{p^{\alpha_k}_k} a]<br>$$</p></li><li><p>$(m, n) = 1$，则对于与 $mn$ 互素的任意整数 $a_1, a_2$，满足</p></li></ul><p>$$<br>ord_{mn} a  = [ord_m a_1, ord_m a_2]<br>$$</p><p>​        的整数 $a$ 是同余式<br>$$<br>\begin{cases}<br>x \equiv a_1 \quad (mod \; m) \\<br>x \equiv a_2 \quad (mod \; n)<br>\end{cases}<br>$$<br>​        的解 $x \equiv a \quad (mod \; mn)$</p><ul><li><font color="red">与 $m$ 互素的任意整数 $a, b$，存在整数 $c$，使得</font><br>$$<br>ord_m c = [ord_m a, ord_m b]<br>$$<br>该定理可以用于找原根，例如</li></ul><img src="/img/math/3.png" alt="喵喵喵" style="zoom: 67%;"><ul><li>$a_i, \quad i \in [1, \psi(m)]$ 是模 $m$ 的简化剩余系，$e$ 是使得 $a_i^e \equiv 1 \quad (mod \; m)$ 成立的最小正整数，则存在整数 $a$，使得，其中 $e$ 称为模 $m$ 的简化剩余系指数<br>$$<br>e = ord_m a = [ord_m a_1, ord_m a_2, \dots, ord_m a_{\psi(m)}]<br>$$</li></ul><h3 id="原根的存在性"><a href="#原根的存在性" class="headerlink" title="原根的存在性"></a>原根的存在性</h3><h4 id="模-p-原根"><a href="#模-p-原根" class="headerlink" title="模 $p$ 原根"></a>模 $p$ 原根</h4><p>设 $p$ 是奇素数，则模 $p$ 的原根存在，且有 $\psi(p-1)$ 个原根</p><p><strong>事实上：</strong>若 $p$ 是奇素数，$d | p-1$，则模 $p$ 指数为 $d$ 的原根存在</p><h4 style="color:red;">    原根的构造方法</h4><p>设 $p$ 为奇素数，$p-1$ 的所有不同素因数是 $q_1, \dots , q_s$，则 $g$ 是模 $p$ 的原根等价于<br>$$<br>g^{(p-1)/q_i} \neq 1 \quad (mod \; p)<br>$$</p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li>$g$ 是模 $p$ 的一个原根，则 $g$ 或者 $g+p$ 是模 $p^2$ 原根</li><li>$g$ 是模 $p, p^2$ 的原根，则 $g$ 是模 $p^{\alpha}$ 原根</li><li>$g$ 是模 $p^{\alpha}$ 的一个原根，则 $g, g+p^{\alpha}$ 中的奇数是模 $2 p^{\alpha}$ 原根</li></ul><p>设 $p$ 为奇素数，则 $m$ 原根存在的充要条件是：$m = 2, 4, p^{\alpha}, 2p^{\alpha}$ </p><h3 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>$m &gt; 1 \in Z$，$g$ 是模 $m$ 的一个原根，$(a, m) = 1$，则存在唯一的整数 $r$，使得<br>$$<br>g^r \equiv a \quad (mod \; m) \quad 1 &lt; r &lt; \psi(m)<br>$$<br>$r$ 叫做以 $g$ 为底的 $a$ 对模 $m$ 的一个指标，记作 $r = ind_g a$ 或者 $r = ind \; a$</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><p>$m &gt; 1 \in Z$，$g$ 是模 $m$ 的一个原根，$(a, m) = 1$</p><ul><li><p>$r \in Z$ ，$g^r \equiv a \quad (mod \; m) \iff r\equiv ind_g a \quad (mod \; \psi(m))$</p></li><li><p>$(a_i, m) = 1$，则<br>$$<br>ind_g(a_1a_2 \cdots a_n) \equiv ind_g a_1 + ind_g a_2 + \cdots + ind_g a_n \quad (mod \; \psi(m))<br>$$</p></li></ul><h4 style="color: red;">    n 次同余式</h4><p><strong>定理一：</strong> $m &gt; 1 \in Z$，$g$ 是模 $m$ 的一个原根，$(a, m) = 1$，则<br>$$<br>x^n \equiv a \quad (mod \; m)<br>$$<br>有解的充分必要条件是<br>$$<br>(n, \psi(m)) | ind_g a<br>$$<br>且若有解，则解数为 $(n, \psi(m))$</p><p><strong>例题：</strong>求解同余式 $x^{12} \equiv 37 \quad (mod \; 41)$</p><p>由 $(12, 40) = 4 | ind_{41} 37 = 32$，故有解</p><p>由性质一知原方程等价于求解<br>$$<br>12 ind_{41} x \equiv ind_{41} 37 \equiv (mod \; \psi(41))<br>$$<br>即<br>$$<br>3 ind_{41} x \equiv 8 \quad (mod \; 10)<br>$$<br>即<br>$$<br>ind_{41} x \equiv 6 \quad (mod \; 10)<br>$$<br>即<br>$$<br>ind_{41} x \equiv 6, 16, 26, 36 \quad (mod \; 40)<br>$$<br>故<br>$$<br>x \equiv 39, 18, 2, 23 \quad (mod \; 41)<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>semaphore</title>
      <link href="/os-semaphore/"/>
      <url>/os-semaphore/</url>
      
        <content type="html"><![CDATA[<h2 id="进程之间的制约关系："><a href="#进程之间的制约关系：" class="headerlink" title="进程之间的制约关系："></a>进程之间的制约关系：</h2><blockquote><p>直接制约关系(协作关系，需要<strong>同步</strong>)：合作进程之间产生的制约关系</p><p>间接制约关系(竞争关系、需要<strong>互斥</strong>)：共享资源产生的制约关系</p></blockquote><h2 id="关键词："><a href="#关键词：" class="headerlink" title="关键词："></a>关键词：</h2><ul><li>互斥：即排它。互斥不足以反应访问的顺序<ul><li>例如采用忙等的方式获得锁</li></ul></li><li>同步：排它+协作。在等待的事件出现之前，即使获得锁也无法前进</li><li>睡眠(Sleep)：引起调用进程阻塞的系统调用，直至被另一个进程唤醒</li><li>唤醒(Wakeup)：唤醒相应的进程</li></ul><p><strong>注意</strong>：计算机系统的各类问题中，涉及到协作的，要么是等待方<strong>主动的去查询</strong>，即过一会就去主动的查询一下(忙等)；要么就<strong>被动的等待唤醒</strong>。忙等的方式有其局限性，因此引入了 <em>睡眠-唤醒</em> 机制</p><h2 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h2><ul><li><p>定义：信号量由两个成员(s, q)组成，其中s是一个具有<strong>非负初值的整形变量</strong>，q是一个初始状态为空的队列，又称为 <em>信号灯</em></p></li><li><p>s是被保护的整数变量，在初始化完成之后，<strong>只能进行P和V操作</strong>，不能参与如 <code>if</code> 判断等</p></li><li><p>PV原语：不可被中断(由OS保证)</p><ul><li><p>P(Prolaag)：P操作意味着请求一个资源，在一定条件下代表阻塞进程操作</p><blockquote><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">if</span> s <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> 设置进程状态为等待 将进程放入q 转调度程序</code></pre></blockquote></li><li><p>V(Verhoog)：V操作意味着释放一个资源，在一定条件下代表唤醒被阻塞进程的操作</p><blockquote><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> s <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>    将q中的第一个进程p移出    设置p为就绪状态并插入就绪队列    返回原进程继续执行</code></pre></blockquote></li></ul></li><li><p>信号量的具体实现：由OS保证，可以采用禁用中断(单CPU)、自旋锁(忙等)等方式</p></li><li><p>分类：</p><ul><li>二元信号量(互斥量)：仅允许取值为0或者1，主要用于解决互斥问题</li><li>一般信号量：允许取大于1的整数，主要用于解决同步问题</li></ul></li></ul><p><strong>注意</strong>：</p><blockquote><ul><li>对于信号量访问和修改<strong>只能够通过PV</strong></li><li>PV操作必须<strong>成对出现</strong>：<ul><li>用于互斥时，位于<strong>同一进程</strong>之内</li><li>用于同步时，<strong>交错出现在两个合作进程</strong>之内</li></ul></li><li>多个V操作次序可任意</li><li>多个P操作次序<strong>不能颠倒</strong>，否则可能造成死锁：<ul><li>如果将P(互斥量)理解为上锁，P(一般信号量)理解为等待某种资源，则一起出现时，通常是一般信号量在前(上锁意味着排它，不能够既排它又等待其他进程释放资源)</li></ul></li><li>很多时候我们需要判断信号量所表示资源数目，通常的做法是<strong>设置一个与信号量同步变化的共享变量，用来标记资源数目，由于共享变量在并发进程中均可访问，所以需要在共享变量上增加一个互斥量</strong></li></ul></blockquote><h3 id="信号量的理解"><a href="#信号量的理解" class="headerlink" title="信号量的理解"></a>信号量的理解</h3><h4 id="信号量的基本原理是利用信号灯实现进程协作"><a href="#信号量的基本原理是利用信号灯实现进程协作" class="headerlink" title="信号量的基本原理是利用信号灯实现进程协作"></a>信号量的基本原理是利用信号灯实现进程协作</h4><ul><li><strong>互斥</strong>是指同一时刻仅允许一个访问者，具有<strong>唯一性</strong>和<strong>排他性</strong>，但互斥无法反应<strong>访问顺序</strong></li><li><strong>同步</strong>是指通过有序的访问实现<strong>协同</strong></li><li>在多数情况下同步已经实现了互斥，特别是在有写入资源的情况下必定是互斥的，少数情况是指可以允许访问者同时访问资源，如读者</li></ul><h3 id="信号量小结"><a href="#信号量小结" class="headerlink" title="信号量小结"></a>信号量小结</h3><ul><li>一个信号量可用于 n 个进程的同步互斥，且<strong>只能由P、V操作修改</strong><ul><li>用于互斥时，s 初值为 1，取值为 1 ~ -(n-1)<ul><li>s = 1：临界区可用</li><li>s = 0：已有一个进程进入临界区</li><li>s &lt; 0：临界区已经被占用，|s| 个进程正等待进入</li></ul></li><li>用于同步时，s 初值 &gt;= 0<ul><li>s &gt;= 0：可用资源个数</li><li>s &lt; 0：资源的等待队列长度</li></ul></li></ul></li></ul><h3 id="P、V-操作小结"><a href="#P、V-操作小结" class="headerlink" title="P、V 操作小结"></a>P、V 操作小结</h3><ul><li>P(s)：请求分配一个资源</li><li>V(s)：释放一个资源</li><li>P、V操作必须<strong>成对出现</strong><ul><li>用于互斥时，位于同一进程内：<strong>(其实也不一定，如吃水果问题)</strong></li><li>用于同步时，交错出现于两个合作进程内</li></ul></li><li>多个 P 操作的次序不可颠倒，一般<strong>同步P</strong>优先于<strong>互斥P</strong></li><li>多个 V 操作次序可任意</li></ul><h3 id="利用信号量解决同步问题的思路"><a href="#利用信号量解决同步问题的思路" class="headerlink" title="利用信号量解决同步问题的思路"></a>利用信号量解决同步问题的思路</h3><h4 id="明确同步和互斥进程"><a href="#明确同步和互斥进程" class="headerlink" title="明确同步和互斥进程"></a>明确同步和互斥进程</h4><ul><li>分析题目，明确要同步和互斥的进程</li><li>站在进程的角度来思考问题：<ul><li>不要站在操作系统的角度来审视</li><li>进程是被<strong>调度和管理</strong>的对象</li></ul></li><li>状态的感知与判断<ul><li>进程<strong>无法感知</strong>其他进程的状态</li><li>进程对同步、互斥条件的判断，仅依赖<strong>信号量</strong>或共<strong>享变量</strong></li></ul></li></ul><h4 id="理清同步与互斥关系"><a href="#理清同步与互斥关系" class="headerlink" title="理清同步与互斥关系"></a>理清同步与互斥关系</h4><ul><li><p>哪些资源和对象需要互斥访问</p></li><li><p>哪些资源的访问顺序对进程调度有制约关系</p></li><li><p>同步信号量要表示出资源的等待条件和数目</p></li><li><p>P 操作内包含等待；V 操作内包含唤醒</p></li><li><p>同类资源可设置多个信号量：</p><ul><li>例如生产者消费者问题中的 empty 和 full</li></ul></li><li><p><strong>同步P</strong>优先于<strong>互斥P</strong></p></li><li><p>信号量的操作只能为P、V，不能取值和赋值：</p><ul><li>如果需要进行判断，可以通过设置共享变量副本</li></ul></li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="produce"> 生产者-消费者问题：</h3><p>有大小为N的缓冲区，生产者生产产品放到缓冲区，消费者从缓冲区取出产品进行消费。生产者和消费者满足如下关系：</p><ul><li>互斥关系：对缓冲区的访问需要互斥，包括生产者与消费者之间，生产者与生产者之间，消费者与消费者之间</li><li>同步关系：当缓冲区满时生产者需要等待，当缓冲区空时消费者需要等待</li></ul><p><strong>分析</strong>：对缓冲区的访问需要互斥，因此设置互斥信号量mutex，并设初值为1；生产者和消费者分别需要满足各自的同步关系，因此设置同步信号量empty(表示缓冲区剩余的产品数)，并设初值为0；以及同步信号量full(表示将缓冲区装满所需的产品数)，并设初值为n</p><pre class=" language-python"><code class="language-python">生产者<span class="token punctuation">:</span>    生产产品    P<span class="token punctuation">(</span>full<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里的两个P不能调换位置，否则可能造成死锁</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    将产品送入缓冲区    V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里的两个V可以调换位置</span>    V<span class="token punctuation">(</span>empty<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 同步关系交错出现在两个进程中</span>消费者<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>empty<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    从缓冲区取出一个产品    V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>full<span class="token punctuation">)</span>    消费一个产品</code></pre><h3 id="读者-写者问题："><a href="#读者-写者问题：" class="headerlink" title="读者-写者问题："></a>读者-写者问题：</h3><p>一个数据对象可以被多个并发进程所共享，其中一些进程只要求读数据对象的内容，另一些进程要求修改或写数据对象的内容，允许多个进程同时读数据对象，一个写进程不能同时与其他进程(无论是写或者读)同时访问此数据对象</p><p>读者-写着问题根据同步关系的不同可以分为以下几类：</p><ul><li>读者优先：写者提出请求后需要等待所有的读者读完之后才可以进行修改</li><li>写着优先：<ul><li>可插队</li><li>不可插队</li></ul></li><li>读写者公平：按照提出请求的顺序先来先服务</li></ul><h4 id="读者优先："><a href="#读者优先：" class="headerlink" title="读者优先："></a>读者优先：</h4><p><strong>分析</strong>：写者与读者需要互斥，因此引入互斥量mutex；涉及到对读者数目的判断，因此增加读者的共享变量readcount和互斥变量rmutex</p><pre class=" language-python"><code class="language-python">读者：    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对共享变量(读者数量)的修改需要互斥</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    readcount <span class="token operator">+=</span> <span class="token number">1</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    读操作    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    readcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>写者：    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    写操作    V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span></code></pre><h4 id="写者优先-不可插队"><a href="#写者优先-不可插队" class="headerlink" title="写者优先-不可插队"></a>写者优先-不可插队</h4><p>与读者-写者公平算法的区别在于：<strong>只有第一个写者需要排队</strong></p><p><strong>分析</strong>：写时需要互斥，因此引入互斥量mutex；涉及到对读者数目的判断，因此引入共享变量readcount和互斥量rmutex；涉及到对写者数目的判断，因此引入共享变量writecount和互斥量wmutex；涉及到读写者的排队，因此引入新的互斥信号量queue</p><pre class=" language-python"><code class="language-python">读者：    P<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 读者写者均在 queue 上排队</span>    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    readcount <span class="token operator">+=</span> <span class="token number">1</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 因为读者可以同时进行读操作，所以到这里释放 queue</span>    读操作    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    readcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>写者：    P<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> writecount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 只有第一个写者需要排队</span>    writecount <span class="token operator">+=</span> <span class="token number">1</span>    V<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    写操作    V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>    writecount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> writecount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span></code></pre><h4 id="写者优先-可插队"><a href="#写者优先-可插队" class="headerlink" title="写者优先-可插队"></a>写者优先-可插队</h4><p><strong>分析</strong>：读者和写者排<strong>不同的队列</strong>，因此引入新的互斥信号量 priority</p><pre class=" language-python"><code class="language-python">读者：    P<span class="token punctuation">(</span>priority<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 读者首先在 priority 上排队，故写者进入时，只需要等待 queue 上的一个</span>    P<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    readcount <span class="token operator">+=</span> <span class="token number">1</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>priority<span class="token punctuation">)</span>    读操作    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    readcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>写者：    P<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> writecount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意这里的操作</span>    writecount <span class="token operator">+=</span> <span class="token number">1</span>    V<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    写操作    V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span>    writecount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> writecount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>wmutex<span class="token punctuation">)</span></code></pre><p><strong>一些典型的错误</strong>：</p><ol><li>在读者操作中，误以为queue可以代替rmutex：rmutex的作用是使得修改readcount互斥，如果去除，则某一个读者在下方进行关于 <code>readcount</code> 的操作时与上方的 <code>readcount</code> 操作并不互斥</li><li>在读者操作中，用rmutex代替priority，误将读者等待再rmutex处。则若读者1读操作完成，持有mutex等待rmutex，写者1持有queue等待mutex，读者2持有rmutex等待queue，会造成死锁</li></ol><h4 id="读写者公平"><a href="#读写者公平" class="headerlink" title="读写者公平"></a>读写者公平</h4><p><strong>分析</strong>：涉及到读者和写者的互斥，引入互斥量mutex；涉及到对读者数目的判断，引入互斥量rmutex和共享变量readcount；引入队列信号量queue</p><pre class=" language-python"><code class="language-python">读者：    P<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    readcount <span class="token operator">+=</span> <span class="token number">1</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    读操作    P<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>    readcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> readcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>rmutex<span class="token punctuation">)</span>写者：    P<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    写操作    V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span></code></pre><h3 id="哲学家进餐问题："><a href="#哲学家进餐问题：" class="headerlink" title="哲学家进餐问题："></a>哲学家进餐问题：</h3><p>有五个哲学家，他们的生活方式是交替地进行思考和进餐；哲学家们公用一张圆桌，分别坐在周围的五张椅子上，在圆桌上有五只筷子；平时哲学家进行思考，饥饿时便试图取左右最靠近他的筷子，只有在同时拿到两只筷子时才能进餐；进餐完毕，放下筷子又继续思考</p><h4 id="服务生解法"><a href="#服务生解法" class="headerlink" title="服务生解法"></a>服务生解法</h4><p>引入一个餐厅服务生，服务生了解当前筷子的使用情况，哲学家必须经过服务生的允许才可以拿起筷子</p><h4 id="破坏环路"><a href="#破坏环路" class="headerlink" title="破坏环路"></a>破坏环路</h4><p>？</p><h4 id="资源分级"><a href="#资源分级" class="headerlink" title="资源分级"></a>资源分级</h4><p>为资源的分配设置一个编号，同时设置资源访问的偏序关系。</p><p>例如约定哲学家总是先拿起左右两边<strong>编号较低</strong>的餐叉，用完餐后，总是先放下<strong>编号较高</strong>的餐叉。在这种情况下，若有四位哲学家都拿起手边编号较低的餐叉时，第五位哲学家无法拿起任何一个餐叉。注意到，<strong>只有一位哲学家能够使用最高编号的餐叉</strong>，所以它能够使用两只餐叉用餐。</p><h3 id="睡眠的理发师问题"><a href="#睡眠的理发师问题" class="headerlink" title="睡眠的理发师问题"></a>睡眠的理发师问题</h3><p>理发店里有一位理发师，一把理发椅和N把供等候理发顾客坐的椅子；如果没有顾客，理发师睡眠，当一个顾客到来时叫醒理发师；若理发师正在理发时又有顾客来，有空椅子就坐下，没有则离开理发店</p><p>互斥关系：访问的顾客数量需要互斥</p><p>同步关系：没有顾客时，理发师休息；理发师工作时，顾客等待</p><p><strong>分析</strong>：需要用两个信号量customers和barbers表示同步关系，一个互斥信号量mutex和count表示互斥关系(<strong>不用customers代替count的原因是信号量只能通过PV操作访问</strong>)</p><pre class=" language-python"><code class="language-python">理发师：    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>customers<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待顾客</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 等待中的顾客减1</span>        count <span class="token operator">-=</span> <span class="token number">1</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># mutex 在前可以看作顾客在理发店里面等待，即等在barbers上,若barbers在前则可以看作在理发店外面等待，即等在mutex上</span>        V<span class="token punctuation">(</span>barbers<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 理发师已经准备好开始剪头发</span>        cut_hair<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 非临界区</span>顾客：    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">&lt;</span> N<span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        V<span class="token punctuation">(</span>customers<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 唤醒理发师</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>        P<span class="token punctuation">(</span>barbers<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 等待理发师准备好</span>        cut_hair<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 椅子满了，顾客离开</span></code></pre><h3 id="吃水果问题"><a href="#吃水果问题" class="headerlink" title="吃水果问题"></a>吃水果问题</h3><p>桌子上有一个盘子，可以存放<strong>一个</strong>水果。父亲总是放苹果到盘子中，母亲总是放香蕉到盘子中，儿子专心等吃盘中的香蕉，女儿专心等吃盘中的苹果</p><p><strong>分析：</strong>本题是 <a href="#produce">生产者-消费者</a> 的一种变形，生产者、消费者以及放入缓冲区的产品都有两类，但每类消费者只能够消费其中固定的一种产品，用 dish 表示盘子是否为空，初值为 1；apple 表示盘中是否有苹果，初值为 0；banana 表示盘中是否有香蕉，初值为 0</p><pre class=" language-python"><code class="language-python">father<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        cut_apple<span class="token punctuation">(</span><span class="token punctuation">)</span>        P<span class="token punctuation">(</span>dish<span class="token punctuation">)</span>        将苹果放入盘中        V<span class="token punctuation">(</span>apple<span class="token punctuation">)</span>mother<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        peal_banana<span class="token punctuation">(</span><span class="token punctuation">)</span>        P<span class="token punctuation">(</span>dish<span class="token punctuation">)</span>        将香蕉放入盘中        V<span class="token punctuation">(</span>banana<span class="token punctuation">)</span>son<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>banana<span class="token punctuation">)</span>        从盘中取出香蕉        V<span class="token punctuation">(</span>dish<span class="token punctuation">)</span>        吃香蕉girl<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>apple<span class="token punctuation">)</span>        从盘中取出苹果        V<span class="token punctuation">(</span>dish<span class="token punctuation">)</span>        吃苹果</code></pre><h3 id="独木桥问题"><a href="#独木桥问题" class="headerlink" title="独木桥问题"></a>独木桥问题</h3><h4 id="简单版本"><a href="#简单版本" class="headerlink" title="简单版本"></a>简单版本</h4><p>独木桥上只允许一个车子通过，当车子到达桥头上，若桥上无车则可上桥，否则等待，直到桥上没有汽车</p><p><strong>分析：</strong>加锁即可</p><pre class=" language-python"><code class="language-python">车<span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>        过桥        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span></code></pre><h4 id="扩展一"><a href="#扩展一" class="headerlink" title="扩展一"></a>扩展一</h4><p>独木桥允许同方向的多个车子同时上桥，即要么左道的多辆车都走，要么右道的多辆车都走</p><p><strong>分析：</strong>类似于读者优先问题</p><p>以左边为例</p><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    lmutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>Shared variable<span class="token punctuation">:</span>    lcount <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>left_car<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    lcount <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> lcount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    过桥    P<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    lcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> lcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span></code></pre><h4 id="扩展二"><a href="#扩展二" class="headerlink" title="扩展二"></a>扩展二</h4><p>限定桥上的车辆数最多为 N</p><p><strong>分析：</strong>只需要加上桥数量的同步变量即可</p><p>以左边为例：</p><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    lmutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>    limit <span class="token punctuation">:</span><span class="token operator">=</span> NShared variable<span class="token punctuation">:</span>    lcount <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>left_car<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    lcount <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> lcount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>limit<span class="token punctuation">)</span>    过桥    V<span class="token punctuation">(</span>limit<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    lcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> lcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span></code></pre><h4 id="扩展三"><a href="#扩展三" class="headerlink" title="扩展三"></a>扩展三</h4><p>限定桥上数量至多为 N，且后到达的车子按照顺序上桥，即若左边车在桥上，左边后继到达的车子只有在右边没有先到达等待的车子时才能够上桥</p><p><strong>分析：</strong>类似于读写者公平</p><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    lmutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>    limit <span class="token punctuation">:</span><span class="token operator">=</span> NShared variable<span class="token punctuation">:</span>    lcount <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>left_car<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>limit<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    lcount <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> lcount <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>limit<span class="token punctuation">)</span>    过桥    P<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span>    lcount <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> lcount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>lmutex<span class="token punctuation">)</span></code></pre><h3 id="公园游玩问题"><a href="#公园游玩问题" class="headerlink" title="公园游玩问题"></a>公园游玩问题</h3><p>公园有 m 个旅客和 n 辆车，旅客需要乘车逛公园；每辆车仅能乘坐一个旅客；旅客排队乘坐旅行车，当一辆车可用时，载入一个旅客，在绕花园行驶任意长的时间；若 n 辆车都已经被旅客乘坐游玩，则旅客需要等待；如果一辆车已经空闲，但没有游玩的旅客，则车辆需要等待</p><p><strong>注：</strong>这个题感觉可以有多种理解，过于玄学？</p><h4 id="理解一"><a href="#理解一" class="headerlink" title="理解一"></a>理解一</h4><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    emptyBus <span class="token punctuation">:</span><span class="token operator">=</span> n    readyCustomer <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>顾客<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>emptyBus<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 检查是否有空车</span>    V<span class="token punctuation">(</span>readyCustomer<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 游客上车，等待车辆出发</span>    游玩车<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>readyCustomer<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 检查是否有游客上车</span>    游玩    V<span class="token punctuation">(</span>emptyBus<span class="token punctuation">)</span></code></pre><h4 id="理解二"><a href="#理解二" class="headerlink" title="理解二"></a>理解二</h4><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    emptyBus <span class="token punctuation">:</span><span class="token operator">=</span> n    readyCustomer <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    readyCar <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>Shared variable<span class="token punctuation">:</span>    count <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>顾客<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># 假定公园的最大载客量是 m</span>        登记顾客信息        count <span class="token operator">+=</span> <span class="token number">1</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>        P<span class="token punctuation">(</span>emptyBus<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 判断是否有空车</span>        V<span class="token punctuation">(</span>readyCustomer<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 顾客等待好，唤醒一辆车</span>        P<span class="token punctuation">(</span>readyCar<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 等待车准备好</span>        游玩    <span class="token keyword">else</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>车<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>readyCustomer<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 等待顾客</span>    登记车信息    V<span class="token punctuation">(</span>readCar<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 车准备好</span>    游玩    V<span class="token punctuation">(</span>emptyBus<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 释放车</span></code></pre><h4 id="理解三-感觉有些奇怪"><a href="#理解三-感觉有些奇怪" class="headerlink" title="理解三(感觉有些奇怪)"></a>理解三(感觉有些奇怪)</h4><pre class=" language-c"><code class="language-c">Semaphore<span class="token punctuation">:</span>    car_available <span class="token punctuation">:</span><span class="token operator">=</span> n     passenger_wait <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    readyCar <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    car_busy<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>shared variable<span class="token punctuation">:</span>    car_numberpassenger<span class="token punctuation">:</span>    <span class="token function">wander_some_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 在公园漫步</span>    <span class="token function">V</span><span class="token punctuation">(</span>passenger_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 乘客希望坐车</span>    <span class="token function">P</span><span class="token punctuation">(</span>car_available<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 是否有空车</span>    <span class="token function">P</span><span class="token punctuation">(</span>readyCar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 等待车准备好</span>    <span class="token function">P</span><span class="token punctuation">(</span>car_busy<span class="token punctuation">[</span>car_number<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在编号为k的车上行驶</span>    <span class="token function">V</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 释放锁</span>    <span class="token function">V</span><span class="token punctuation">(</span>car_available<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 释放车</span>car<span class="token punctuation">:</span>    <span class="token function">P</span><span class="token punctuation">(</span>passenger_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 等待乘客</span>    <span class="token function">P</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 加锁</span>    car_number <span class="token operator">=</span> k<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置共享变量为车的编号</span>    <span class="token function">V</span><span class="token punctuation">(</span>readyCar<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 车准备好了</span>    <span class="token function">travel_random_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 行驶一段时间</span>    <span class="token function">V</span><span class="token punctuation">(</span>car_busy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 到达目的地</span></code></pre><h3 style="color: red;">    红黑客问题(解答太妙了！！)</h3><p>船每次坐满四个人才能够离开，三个红客+一个黑客或者一个红客+三个黑客不能同船</p><p><strong>分析：</strong>等待的客人之间先排列组合出可以上船的客人</p><p>以红客为例，只有两种情况，即4个红客，或者2个红客+2个或以上的黑客</p><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>                       <span class="token comment" spellcheck="true"># 用于排列组合的互斥</span>    read_wait <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment" spellcheck="true"># 被阻塞的红客</span>    black_wait <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment" spellcheck="true"># 被阻塞的黑客</span>    boat <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>                         <span class="token comment" spellcheck="true"># 互斥使用船</span>    mutex_wait <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>                     <span class="token comment" spellcheck="true"># 互斥修改等待上船人数</span>    full <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>                         <span class="token comment" spellcheck="true"># 船是否满</span>shared variable<span class="token punctuation">:</span>    red_count <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>                   <span class="token comment" spellcheck="true"># 等待的红客副本</span>    black_count <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>                 <span class="token comment" spellcheck="true"># 等待的黑客副本</span>    wait_count <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>                     <span class="token comment" spellcheck="true"># 等待上船的人数</span>红客<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># 加锁，进行排列组合</span>    red_count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> red_count <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 第一种情况</span>        V<span class="token punctuation">(</span>red_wait<span class="token punctuation">)</span>        V<span class="token punctuation">(</span>red_wait<span class="token punctuation">)</span>        V<span class="token punctuation">(</span>red_wait<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 释放三个人</span>        red_count <span class="token operator">=</span> <span class="token number">0</span>                 <span class="token comment" spellcheck="true"># 等待人数清零</span>        wait_count <span class="token operator">=</span> <span class="token number">4</span>                 <span class="token comment" spellcheck="true"># 四个人等待上船</span>    <span class="token keyword">elif</span> red_count <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> black_count <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>red_wait<span class="token punctuation">)</span>        V<span class="token punctuation">(</span>black_wait<span class="token punctuation">)</span>        V<span class="token punctuation">(</span>black_wait<span class="token punctuation">)</span>        red_count <span class="token operator">=</span> <span class="token number">0</span>        black_count <span class="token operator">-=</span> <span class="token number">2</span>        wait_count <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>        P<span class="token punctuation">(</span>red_wait<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 加入等待队列</span>    P<span class="token punctuation">(</span>mutex_wait<span class="token punctuation">)</span>    <span class="token keyword">if</span> wait_count <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        P<span class="token punctuation">(</span>boat<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 船是否回来</span>    wait_count <span class="token operator">-=</span> <span class="token number">1</span>                   <span class="token comment" spellcheck="true"># 如果没有符合条件排列，则 wait_count &lt; 0</span>    <span class="token keyword">if</span> wait_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>full<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 船满了</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 如果没有符合条件排列，则不会到这里，nb</span>    V<span class="token punctuation">(</span>mutex_wait<span class="token punctuation">)</span>    过河船<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>full<span class="token punctuation">)</span>    过河    V<span class="token punctuation">(</span>boat<span class="token punctuation">)</span></code></pre><h4 id="红黑客问题的变形"><a href="#红黑客问题的变形" class="headerlink" title="红黑客问题的变形"></a>红黑客问题的变形</h4><p>n 个学生 m 个网球场 k 个裁判，两个学生组成一组打网球，每组有一个裁判。需要满足：没有学生，裁判休息；没有裁判，学生等待；没有场地，学生等待</p><pre class=" language-python"><code class="language-python">Semaphore<span class="token punctuation">:</span>    playground <span class="token punctuation">:</span><span class="token operator">=</span> m    referee <span class="token punctuation">:</span><span class="token operator">=</span> k    wait <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    readyStudeng <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    mutex <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>    mutex_wait <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1</span>shared variable<span class="token punctuation">:</span>    s_num <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>    wait_num <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">0</span>学生<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    s_num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> s_num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>wait<span class="token punctuation">)</span>        wait_num <span class="token operator">=</span> <span class="token number">2</span>        s_num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>        P<span class="token punctuation">(</span>wait<span class="token punctuation">)</span>    P<span class="token punctuation">(</span>mutex_wait<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> wait_num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            P<span class="token punctuation">(</span>referee<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 等待教练</span>            P<span class="token punctuation">(</span>playground<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 等待球场</span>        wait_num <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> wait_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            V<span class="token punctuation">(</span>readyStudent<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 到场了，可以等裁判过来评分</span>            V<span class="token punctuation">(</span>mutex<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>mutex_wait<span class="token punctuation">)</span>裁判<span class="token punctuation">:</span>    P<span class="token punctuation">(</span>readStudent<span class="token punctuation">)</span>    评分    V<span class="token punctuation">(</span>referee<span class="token punctuation">)</span>    V<span class="token punctuation">(</span>playground<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
            <tag> os </tag>
            
            <tag> semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Path Parameters and Numeric Validations</title>
      <link href="/fastapi-path-parameters-and-numeric-validations/"/>
      <url>/fastapi-path-parameters-and-numeric-validations/</url>
      
        <content type="html"><![CDATA[<h3 id="Path-Parameters-and-Numeric-Validations"><a href="#Path-Parameters-and-Numeric-Validations" class="headerlink" title="Path Parameters and Numeric Validations"></a>Path Parameters and Numeric Validations</h3><p>和用 <code>Query</code> 为<strong>查询参数</strong>声明更多的验证规则和元信息相同，可以用 <code>Path</code> 为路径参数声明同样的验证规则和元信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Path<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> int <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The ID of the item to get"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> alias<span class="token operator">=</span><span class="token string">"item-query"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p><code>Path</code> 可声明的参数与 <code>Query</code> 完全相同，例如，在上述例子中，为 <code>item_id</code> 声明了元信息 <code>title</code></p><p><strong>注：</strong>因为路径参数总是必须的，因此可以用 <code>...</code> 声明，实际上即使有默认值，也不会有效果，因为<strong>路径参数总是必须的</strong></p><h3 id="Order-the-parameters-as-you-need"><a href="#Order-the-parameters-as-you-need" class="headerlink" title="Order the parameters as you need"></a>Order the parameters as you need</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Pathapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    q<span class="token punctuation">:</span> str<span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The ID of the item to get"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>python 总是要求位置参数在关键字参数前面，因此 <code>q</code> 必须位于 <code>Path</code> 前</li><li>参数的顺序并不会影响 <strong>FastAPI</strong>，它关注的是参数的名字、类型和默认声明 <code>Query</code>，<code>Path</code></li></ul><h3 id="Order-the-parameters-as-you-need-tricks"><a href="#Order-the-parameters-as-you-need-tricks" class="headerlink" title="Order the parameters as you need, tricks"></a>Order the parameters as you need, tricks</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Pathapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The ID of the item to get"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>在 <code>*</code> 后面的参数即使没有默认值，也会被识别为关键字参数，因此可以如上例声明参数 666</p><h3 id="Number-validations-greater-than-or-equal"><a href="#Number-validations-greater-than-or-equal" class="headerlink" title="Number validations: greater than or equal"></a>Number validations: greater than or equal</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Path<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> int <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The ID of the item to get"</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    q<span class="token punctuation">:</span> str<span class="token punctuation">,</span>    size<span class="token punctuation">:</span> float <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> lt<span class="token operator">=</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><h4 id="要点："><a href="#要点：" class="headerlink" title="要点："></a>要点：</h4><ul><li><code>ge</code> 表示 greater equal</li><li><code>gt</code> 表示 greater than</li><li><code>le</code> 表示 less equal</li><li><code>lt</code> 表示 less than</li></ul><h3 id="技术细节："><a href="#技术细节：" class="headerlink" title="技术细节："></a>技术细节：</h3><ul><li><code>Query</code>，<code>Path</code> 等都是 <code>Param</code> 类的子类，它们<strong>共享相同的验证参数和元信息</strong></li><li><code>Query</code>，<code>Path</code> 等，其实只是函数，当他们被调用的时候，<strong>返回同名类的实例</strong>，例如当调用 <code>Query</code> 函数时，返回 <code>Query</code> 类的实例。这样做是为了避免直接使用类，这样编辑器就不会标记和他们类型有关的错误</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quadratic residue</title>
      <link href="/math-quadratic-residue/"/>
      <url>/math-quadratic-residue/</url>
      
        <content type="html"><![CDATA[<h3 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h3><p>若同余式<br>$$<br>x^2 \equiv a \quad (mod \; m), \qquad (a, m) = 1<br>$$<br>有解，则 $a$ 叫做模 $m$ 的<strong>平方/二次剩余</strong>，否则称为<strong>平方/二次非剩余</strong></p><h3 id="模为奇素数的平方剩余"><a href="#模为奇素数的平方剩余" class="headerlink" title="模为奇素数的平方剩余"></a>模为奇素数的平方剩余</h3><h4 id="欧拉判别条件"><a href="#欧拉判别条件" class="headerlink" title="欧拉判别条件"></a>欧拉判别条件</h4><p>$a$ 是模 $p$ 的平方剩余的充要条件是<br>$$<br>a^{(p-1)/2} \equiv 1 \quad (mod \; p)<br>$$<br>$a$ 是模 $p$ 的平方非剩余的充要条件是<br>$$<br>a^{(p-1)/2} \equiv -1 \quad (mod \; p)<br>$$<br>并且当 $a$ 是模 $p$ 的平方非剩余时，恰有两解</p><p>例子：判断 $137$ 是否是 $227$ 的平方剩余</p><p>由 $137^{(227-1)/2} \equiv -1 \quad (mod \; 227)$，知 $137$ 是 $227$ 的平方非剩余</p><h4 id="定理二"><a href="#定理二" class="headerlink" title="定理二"></a>定理二</h4><p>设 $p$ 是奇素数，则模 $p$ 的简化剩余系中平方剩余与平方非剩余的个数各为 $(p-1)/2$，且 $(p-1)/2$ 个平方非剩余与序列：<br>$$<br>1^2, 2^2, \dots , (\cfrac{p-1}{2})^2<br>$$<br>中一个数同余，且仅与一个数同余</p><h3 style="color: red;">     勒让德符号</h3><p>$$<br>(\cfrac{a}{p}) = \begin{cases}<br>1, \quad &amp; 若 a 是模 p 的平方剩余 \\<br>-1, &amp; 若 a 是模 p 的平方非剩余 \\<br>0, &amp; 若 p | a<br>\end{cases}<br>$$</p><h4 id="高斯引理"><a href="#高斯引理" class="headerlink" title="高斯引理"></a>高斯引理</h4><p>$p$ 是奇素数，$a$ 是整数，$(a, p) = 1$，如果整数<br>$$<br>a \cdot 1, a \cdot 2, \dots, a \cdot \frac{p-1}{2}<br>$$<br>中模 $p$ 的最小正剩余中大于 $\frac{p}{2}$ 的个数是 $m$ ，则<br>$$<br>(\cfrac{a}{p}) = (-1)^m<br>$$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$(\cfrac{a}{p}) \equiv a^{(p-1) / 2} \quad (mod \; p)$</p></li><li><p>$(\cfrac{a}{p}) = (\cfrac{a+kp}{p})$</p></li><li><p>$(\cfrac{a}{p})(\cfrac{b}{p}) = (\cfrac{ab}{p})$</p></li><li><p>若$(a, p) = 1$，则 $(\cfrac{a^2}{p}) = 1$</p></li><li><p>$(\cfrac{2}{p}) = (-1)^{\frac{p^2-1}{8}}$</p></li><li><p>若 $(a, 2p) = 1$， 则 $(\cfrac{a}{p}) = (-1)^{T(a,p)}$</p></li></ul><p>$$<br>T(a, p) = \sum_{k=1}^{(p-1)/2} [\cfrac{ak}{p}]<br>$$</p><h3 style="color: red;">    二次互反律</h3><p>$p, q$ 是互素的<strong>奇素数</strong>，则<br>$$<br>(\cfrac{p}{q}) = (-1)^{\frac{p-1}{2} \cdot \frac{q-1}{2}} (\cfrac{q}{p})<br>$$<br><strong>注：</strong>二次互反律成立的条件必须是<strong>奇素数</strong></p><p>例子：判断同余式 $x^2 \equiv 137 \quad (mod \; 227)$ 是否有解<br>$$<br>\begin{align}<br>(\cfrac{137}{227}) = &amp; (-1)^{(\frac{137-1}{2}) \times (\frac{227-1}{2})} \times (\cfrac{90}{137}) \\<br>= &amp; (\cfrac{2}{137}) \times (\cfrac{5}{137}) \times (\cfrac{3^2}{137}) \\<br>= &amp; (-1)^{(137^2-1)/8} \times (-1)^{2 \times 68} \times (\cfrac{2}{5}) \\<br>= &amp; 1 \times (-1)^{(5^2-1)/8} \\<br>= &amp; -1<br>\end{align}<br>$$</p><h3 style="color: red;">     雅可比符号</h3><p>雅可比符号同勒让德符号的书写一样，且只要求 $m$ 是奇数，$a$ 可以为任意整数<br>$$<br>\frac{a}{m}<br>$$<br>但是要注意的是，雅可比符号只能用来判断是否是<strong>二次非剩余</strong>，而<strong>不能判断是否是二次剩余</strong></p><p><strong>雅可比符号</strong>具有和勒让德符号一样的性质，包括二次互反律</p><p><strong>注：</strong>二次互反律只在 $a,m$ 均是奇数的时候成立</p><p>例子：判断同余式<br>$$<br>x^2 \equiv 286 \quad (mod \; 563)<br>$$<br>是否有解<br>$$<br>\begin{align}<br>(\cfrac{286}{563}) = &amp; (\cfrac{2}{563}) \times (\cfrac{143}{563}) \\<br>= &amp; (-1)^{(563^2-1)/8} \times (-1)^{\frac{143-1}{2} \times \frac{563-1}{2}} \times (\cfrac{-9}{143}) \\<br>= &amp; (\cfrac{-1}{143}) \\<br>= &amp; -1<br>\end{align}<br>$$<br>故无解</p><h3 id="模-p-平方根"><a href="#模-p-平方根" class="headerlink" title="模 $p$ 平方根"></a>模 $p$ 平方根</h3><p>设 $p$ 是形如 $4k+3$ 型的素数，则同余式<br>$$<br>x^2 \equiv a \quad (mod \; p)<br>$$<br>的解为<br>$$<br>x \equiv \pm a^{\frac{p+1}{4}} \quad (mop \; p)<br>$$<br>更复杂的情况暂时略</p><h3 style="color: red;">    Rabin密码体制</h3><p>随机选择两个形如 $4k+3$ 的大素数 $p, q$，计算 $n = p \times q$，以 $n$ 作为公开密钥，$p, q$ 作为私有密钥，则密文 $c \equiv m^2 \quad (mod \; n)$，解密即为求方程组<br>$$<br>\begin{cases}<br>x^2 \equiv c \quad (mod \; q) \\<br>x^2 \equiv c \quad (mod \; p)<br>\end{cases}<br>$$<br>由中国剩余定理可知解共有 $4$ 个，于是需要在明文 $m$ 中添加某些信息来确保解密的结果唯一</p><p>例子：取 $p=7, q = 11$</p><ol><li>若明文 $m = 16$，求加密后的密文 $c$</li><li>若密文 $c = 23$，求对应的 $4$ 个明文</li></ol><p>一：<br>$$<br>c  = 16 ^ 2 \equiv  25 \quad (mod \; 77) \\<br>$$<br>二：<br>$$<br>\begin{cases}<br>x^2 \equiv 23 \equiv 2 \quad (mod \; 7) \\<br>x^2 \equiv 23 \equiv 1 \quad (mod \; 11)<br>\end{cases}<br>$$<br>故解为<br>$$<br>\begin{cases}<br>x \equiv \pm 2^{(7+1)/4} \quad (mod \; 7) \\<br>x \equiv \pm 1^{(11+1)/4} \quad (mod \; 11)<br>\end{cases}<br>$$<br>再有中国剩余定理可知四个解为<br>$$<br>x \equiv \pm 4 \times 22 + \pm 1 \times 56 \equiv 10、32、45、67<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>congruence polynomial</title>
      <link href="/math-congruence-polynomial/"/>
      <url>/math-congruence-polynomial/</url>
      
        <content type="html"><![CDATA[<h3 id="同余式"><a href="#同余式" class="headerlink" title="同余式"></a>同余式</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$m \in Z^+$，$f(x)=a_nx^n+ \cdots + a_0$，且 $a_i \in Z$，则<br>$$<br>f(x) \equiv 0 \quad (mod \; m)<br>$$<br>称为模 $m$ 同余式，若 $a_n \neq 0 \quad (mod \; m)$，则 $n$ 叫做 $f(x)$ 的次数，记为 $deg f$，上述式子还可以称为模 $m$ 的 $n$ 次同余式，若 $x \equiv a \quad (mod \; m)$ 使得上述式子成立，则称其为同余式的解</p><h3 id="一次同余式"><a href="#一次同余式" class="headerlink" title="一次同余式"></a>一次同余式</h3><p>$m \in Z^+$，$a \in Z$ 且 $m \nmid a$，则一次同余式<br>$$<br>ax \equiv b \quad (mod \; m)<br>$$<br>有解的充要条件是 $(a, m) | b$，若有解，则其解为：<br>$$<br>x \equiv \cfrac{b}{(a, m)}((\cfrac{a}{(a, m)})^{-1} \quad (mod \; \cfrac{m}{(a, m)})) + t \cdot \cfrac{m}{(a, m)} \quad (mod \; m)<br>$$<br>例子：求解同余式<br>$$<br>33x \equiv 22 \quad (mod \; 77)<br>$$<br>$(33, 77) = 11 | 22 \implies$ 有解</p><p>$3x \equiv 2 \quad (mod \; 7)$ 的解为3</p><p>故全部解为 $3 + 7t, \quad t \in [0, 10]$</p><h3 style="color: red;">    中国剩余定理</h3><p>设 $m_i$ 是 $k$ 个两两互素的正整数，则 $\forall b_i$，同余式组<br>$$<br>\begin{cases}<br>x \equiv b_1 \quad (mod \; m_1) \\<br>\dots \\<br>x \equiv b_k \quad (mod \; m_k)<br>\end{cases}<br>$$<br>有唯一解，若零 $m = \Pi m_i$，$m = m_i \cdot M_i$，$M_i^{-1}M_i \equiv 1 \quad (mod \; m_i)$，则<br>$$<br>x \equiv \sum b_i \cdot M_i \cdot M_i^{-1} \quad (mod \; m)<br>$$</p><p>例子：求解同余式组<br>$$<br>\begin{cases}<br>x \equiv b_1 \quad (mod \; 5) \\<br>x \equiv b_2 \quad (mod \; 6) \\<br>x \equiv b_3 \quad (mod \; 7) \\<br>x \equiv b_4 \quad (mod \; 11)<br>\end{cases}<br>$$<br>$M_1=6 \times 7 \times 11 = 462$，类似求得 $M_2=385$，$M_3=330$，$M_4=210$</p><p>$3 \times M_1 \equiv 1 \quad (mod \;5) \implies M_1^{-1}=3$，类似球的 $M_2^{-1}=1$，$M_3^{-1}=1$，$M_4^{-1}=1$</p><p>带入可知解为<br>$$<br>x \equiv 1386b_1 + 385b_2 + 330b_3 + 210b_4 \quad (mod \; 2310)<br>$$</p><h3 style="color: red;"> 高次同余式的解数及解法</h3><h4 id="中国剩余定理-暴力计算"><a href="#中国剩余定理-暴力计算" class="headerlink" title="中国剩余定理+暴力计算"></a>中国剩余定理+暴力计算</h4><p>略</p><h4 id="高次同余式的提升"><a href="#高次同余式的提升" class="headerlink" title="高次同余式的提升"></a>高次同余式的提升</h4><p>当 $p$ 为素数时，求解多项式 $f(x) \equiv 0 \quad (mod \; p^{\alpha})$</p><p>设 $x \equiv x_1 \quad (mod \; p)$ 是同余式<br>$$<br>f(x) \equiv 0 \quad (mod \; p)<br>$$<br>的一个解，且<br>$$<br>(f’(x_1), p) = 1<br>$$<br>则 $f(x) \equiv 0 \quad (mod \; p^{\alpha})$ 有解<br>$$<br>x \equiv x_{\alpha} \quad (mod \; p^{\alpha})<br>$$<br>其中 $x_{\alpha}$ 满足递归关系式<br>$$<br>\begin{align}<br>&amp; x_i \equiv x_{i-1} + t_{i-1} \cdot p^{i-1} \quad (mod \; p^i) \\<br>&amp; t_{i-1} \equiv \cfrac{-f(x_{i-1})}{p^{i-1}} \cdot (f’(x_1)^{-1} \; (mod \; p)) \quad (mod \; p)<br>\end{align}<br>$$<br>例子：求解同余式 $f(x) \equiv x^4 + 7x + 4 \equiv 0 \quad (mod \; 27)$</p><p>易得 $f(x) \equiv 0 \quad (mod \; 3)$ 的解为 $x_1 \equiv 1$，又 $f’(x_1) = 11 \implies (11, 3) = 1$ 故有解，且 $f’(x_1)^{-1} \equiv 2 \quad (mod \; 3)$ 根据递推关系式可计算得到 $t_1 \equiv 2, x_2 \equiv 4, t_2 \equiv 2, x_3 \equiv 22 $ ，故解为22</p><h3 id="求解素数模的同余式"><a href="#求解素数模的同余式" class="headerlink" title="求解素数模的同余式"></a>求解素数模的同余式</h3><h4 id="多项式欧几里得除法"><a href="#多项式欧几里得除法" class="headerlink" title="多项式欧几里得除法"></a>多项式欧几里得除法</h4><p>$f(x)$ 为 $n$ 次整系数多项式，$g(x)$ 为 $m$ 次首一整系数多项式，则存在整系数多项式 $q(x)$ 和 $r(x)$，使得<br>$$<br>f(x) = q(x) \cdot g(x) + r(x), \qquad deg \; r(x) &lt; deg \; g(x)<br>$$<br>由费马小定理及上述结论可知 $f(x)$ 与一个次数不超过 $p-1$ 的模 $p$ 同余式等价<br>$$<br>f(x) = q(x) \cdot (x^p - x) + r(x)<br>$$</p><h4 id="素数模同余式的因式分解"><a href="#素数模同余式的因式分解" class="headerlink" title="素数模同余式的因式分解"></a>素数模同余式的因式分解</h4><p>素数模同余式满足因式分解定理</p><h4 id="素数模同余式的解数估计"><a href="#素数模同余式的解数估计" class="headerlink" title="素数模同余式的解数估计"></a>素数模同余式的解数估计</h4><p>$f(x)$ 的解数不超过其次数(因式分解立证)</p><h4 id="解的判断"><a href="#解的判断" class="headerlink" title="解的判断"></a>解的判断</h4><p>$p$ 是一个素数，$n \in Z^+$，$n \le p$，则<br>$$<br>f(x) = x^n + \cdots + a_1x + a_0 \equiv \quad (mod \; p)<br>$$<br>有 $n$ 个解的充要条件是 $x^p - x$ 被 $f(x)$ 除所得的余式的所有系数都是 $p$ 的倍数</p><p>例子：判断同余式<br>$$<br>2x^3 + 5x^2 + 6x + 1 \equiv 0 \quad (mod \; 7)<br>$$<br>是否有三个解</p><p>首先将多项式两边 $\times 4$ 变成首1多项式<br>$$<br>4 \times (2x^3 + 5x^2 + 6x + 1) \equiv x^3 - x^2 + 3x - 3<br>$$<br>又有<br>$$<br>x^7 - x \equiv x(x^3+x^2-2x-2) \cdot (x^3 - x^2 + 3x - 3) + 7x(x^2-1)<br>$$<br>故有三个解</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发存储器层次结构</title>
      <link href="/cod-kai-fa-cun-chu-qi-ceng-ci-jie-gou/"/>
      <url>/cod-kai-fa-cun-chu-qi-ceng-ci-jie-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="局部性原理："><a href="#局部性原理：" class="headerlink" title="局部性原理："></a>局部性原理：</h3><ul><li>时间局部性：如果某个数据项被访问，那么在不久的将来他可能再次被访问</li><li>空间局部性：如果某个数据项被访问，那么与地址相邻的数据项可能很快也将被访问</li><li>例子：循环结构体现了指令和数据的时间局部性；顺序执行和对数组或者记录中的元素进行顺序访问则体现了指令和数据的空间局部性</li></ul><h3 id="层次结构："><a href="#层次结构：" class="headerlink" title="层次结构："></a>层次结构：</h3><ul><li><p>存储器层次结构：一种由多存储器层次组成的结构，存储器的容量和访问时间随着离处理器距离的增加而增加</p></li><li><p>数据层次结构：靠近处理器那一层的数据是那些较远层次中的子集，<font color="lightblue">所有的数据</font>被存储在最缓慢的层</p></li><li><p>存储器的层次结构可以由多层构成，但是数据每次只能在相邻的两个层次之间进行复制，高层次的存储器靠近处理器，比低层存储器容量小但是访问速度更快。</p></li><li><p>两级层次结构中存储信息交换的最小单元称为块或行</p></li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>块或行：两级层次结构中存储信息交换的最小单元</li><li>命中率：在高层存储器中找到目标数据的存储访问比例</li><li>缺失率：1-命中率</li><li>命中时间：访问某存储器层次结构所需要的时间，包括了判断当前访问是命中还是缺失所需的时间</li><li>缺失代价：将相应的块或行从低层存储器替换到高层存储器以及将该信息快传送给处理器的时间之和</li></ul><h3 id="存储器技术："><a href="#存储器技术：" class="headerlink" title="存储器技术："></a>存储器技术：</h3><ul><li>一些典型的存储器：<img src="/img/cod/14.png" alt="喵喵喵"></li><li>闪存：一种电可擦除的可编程只读存储器</li><li>磁盘存储器：<ul><li>磁道：位于磁盘表面的数万个同心圆环中的任意一个圆环称为一个磁道</li><li>扇区：构成磁盘上磁道的基本单位，是磁盘上数据读写的最小单位</li><li>每个扇区的容量通常是512-4096字节，信息在磁介质上保存的顺序为扇区号、一个间隙、包含该扇区的纠错码、一个间隙、下一个扇区的扇区号</li><li>为了访问数据，操作系统必须对磁盘进行三步操作：<ul><li>寻道：把读写磁头移动到磁盘上适当的磁道上面</li><li>扇区旋转：磁头到了正确的磁道后，必须等待要访问的扇区转动到读写头下面。等待的时间称为<strong>旋转延时</strong>，<strong>平均延时</strong>通常指磁盘转动一周时间的一半</li><li>？？？（读写数据？）</li></ul></li></ul></li></ul><h3 id="cache-基本原理："><a href="#cache-基本原理：" class="headerlink" title="cache 基本原理："></a>cache 基本原理：</h3><ul><li>直接映射：每个存储器中的数据项都放在cache中的确定位置</li></ul><p>较大的 cache 块能够更好的利用空间局部性以降低缺失率</p><h3 id="指令-cache-缺失时的处理步骤（指令存储器的-cache）："><a href="#指令-cache-缺失时的处理步骤（指令存储器的-cache）：" class="headerlink" title="指令 cache 缺失时的处理步骤（指令存储器的 cache）："></a>指令 cache 缺失时的处理步骤（指令存储器的 cache）：</h3><ol><li>把程序计数器 PC 和 原始值 PC-4 送到存储器中</li><li>通知主存执行一次读操作，并等待主存访问完成</li><li>写 cache 项，将从主存取回的数据写入 cache 中存放数据的部分，并设置 cache 中对应的（有效位，标记为和索引）</li><li>重启指令执行第一步，此时指令在 cache 中</li></ol><p><font color="lightblue">数据 cache 缺失</font>与指令 cache 缺失时的处理步骤基本相同，发生缺失时，处理器发生阻塞，直到从存储器中取回数据后才响应</p><p>写操作和读操作的不同之处在于：如果只将数据写入数据 cache（而不改变主存的内容），那么，再写入 cache 之后，主存与 cache 相应位置的值将<font color="red">不同</font>，此时 cache 和主存被认为<font color="red">不一致</font></p><h3 id="写操作："><a href="#写操作：" class="headerlink" title="写操作："></a>写操作：</h3><ul><li>写命中（处理器 sw 指令的地址在数据 cache 中）时保持 cache 和主存一致性的方法：<ul><li>写直达（写通过、写穿）：更新 cache 的同时更新下一存储器层次，保持二者的一致性<ul><li>写缓冲：一中解决写直达缓慢的解决方法。在一个数据等待被写入主存时，先将它放入写缓冲（保存等待写入主存数据的缓冲队列）中。如果写缓冲已经满了，则处理器必须阻塞直到写缓冲中有一个位置。（写缓冲写入内存主要存储器的写操作速度，数据写入写缓冲主要看处理器的写操作速度）当存储器完成写操作的速度慢于处理器产生写操作的速度，那么就必须产生上述阻塞，再多的缓冲器也没有用，当存储器的写操作速度快于处理器时，也有可能由于写冲突而发生阻塞</li></ul></li><li>写回：新值仅被写入 cache 中，直到修改过的块需要被替换（不论是读或者写，只要有内容替换）的时候才将该块写入下一存储器层次</li></ul></li><li>写缺失时的处理：<ul><li>写分配：将数据写入下一存储器层次，并将该块数据放回 cache</li><li>写不分配：将数据写入下一存储器层次，不放回 cache</li></ul></li><li>因为采用写回操作时，如果出现写缺失，更新操作可能造成 cache 中更新但是没有写入下一存储器层次的数据丢失（可以采用脏位），因此写回一般和写不分配搭配（并不绝对）</li></ul><p>在<font color="red">组相联</font>中，cache 的组成为</p><table><thead><tr><th>标记</th><th>索引</th><th>块偏移</th></tr></thead><tbody><tr><td>选择块</td><td>选择组</td><td>选择被请求的数据地址</td></tr></tbody></table><ul><li>全相联不需要索引位</li></ul><p>汉明码达到 DED 只需要加一位奇偶校验位校验所有的数据</p><h3 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h3><ul><li><p>一种将主存用作辅助存储器高速缓存的技术。主存可以看作硬盘的 cache（<font color="red">主存既有虚拟页号也有物理页号？？</font>）</p></li><li><p>虚拟存储器实现了程序地址空间（虚拟地址）到物理地址的转换，这种地址转换处理加强了各个程序地址空间之间的保护</p><ul><li>物理地址：主存储器的地址</li><li>保护：一组确保共享处理器、主存、I/O 设备的多个进程之间没有故意地、无意地读写其他进程地数据机制，这些保护机制可以将操作系统和用户的进程隔离开来</li></ul></li><li><p>虚拟存储器允许单用户使用超过主要存储器的容量</p></li><li><p>虚拟存储器和 cache 的工作原理是一样的，但是在虚拟存储器中，块被称之为页，访问缺失被称为缺页，在虚拟存储器中，处理器产生一个虚拟地址，再结合软硬件转换成一个物理地址</p><ul><li>缺页：访问的页不在主存储器中</li><li>虚拟地址：虚拟空间的地址，当需要访问主存时需要通过地址映射转换为物理地址</li><li>地址转换（地址映射）：在访问内存时将虚拟地址映射为物理地址</li></ul></li><li><p>虚拟存储器中通常采用写回机制，因为写直达的开销太大</p></li><li><p>页表：保存着虚拟地址和物理地址之间转换关系的表。包含有效位、虚页号和物理页号</p><ul><li>若有效位为 1，则表明该页在主存中，可以直接通过访问物理页号获取数据</li><li>若有效位为 0，表明该页不在主存中，即缺页，需要去磁盘访问</li><li>页表包含了每一个可能的虚拟页的映射</li></ul></li><li><p>因为虚拟存储器采用全相连映射，所以物理页号和虚拟页号其实没有什么关系</p></li></ul><p><strong>段式管理</strong>：一种可变长度的地址映射策略。其中每个地址由两部分组成：映射到物理地址的段号和段内偏移</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理器</title>
      <link href="/cod-chu-li-qi/"/>
      <url>/cod-chu-li-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="逻辑单元："><a href="#逻辑单元：" class="headerlink" title="逻辑单元："></a>逻辑单元：</h3><ul><li>组合单元：处理数据值的单元，其输出只取决于当前的输入。例如：alu、门</li><li>状态单元：存储状态的单元。例如：指令存储器、数据存储器、寄存器。一个状态单元至少有两个输入（时钟信号和写入单元的值）和一个输出</li></ul><p>时钟方法：规定了信号可以读出和写入的时间，用来确定相对于时钟何时稳定和有效的方法</p><p>如果某状态单元在每个有效的时钟边沿都进行写入操作，则可以忽略写控制信号，否则需要写控制信号和时钟信号共同控制</p><p><font color="red">使用沿时钟边沿的写信号时，可以在一个周期同时进行读和写操作，因为在一个周期中随时可以读出数据，但是只有在时钟的边沿才能触发写操作</font> （不确定正确性）</p><h3 id="数据通路："><a href="#数据通路：" class="headerlink" title="数据通路："></a>数据通路：</h3><ul><li><p>数据通路部件：一个用来操作或保存处理器中数据的单元。在MIPS的实现中，数据通路部件包括：指令存储器、数据存储器、alu、寄存器堆、加法器（<font color="red">这个算alu吗？</font>）</p></li><li><p>指令存储器是<font color="lightblue">只读的</font>，可以视为<font color="lightblue">组合逻辑</font>：任意时刻的输出都反映了输入地址处的内容，从而不需要读控制信号（忽略了装载程序时写入指令）</p></li><li><p>程序计数器在每个时钟周期末都会被写入（多周期似乎并不是如此），从而不需要写控制信号</p></li><li><p>加法器可以看成只进行加法的<font color="lightblue">alu</font></p></li><li><p>寄存器堆：寄存器的集合，包含了计算机寄存器的状态。其中的寄存器都可以通过指定相应的寄存器号来进行读写。寄存器堆包含有4个输入（3个寄存器号（2个读1个写）+1个要写入的数据）</p></li><li><p>因为写操作是在时钟边沿触发的，而读操作并非是在时钟边沿触发的，因此同一个时钟周期可以进行读写操作，且读的数据是该时钟周期写入之前的数据</p></li><li><p>数据存储器有两个时钟信号，<font color="lightblue">读、写控制信号</font>，且任意一个时钟周期只能激活其中的一个信号。有读控制信号的原因是可能会读取一个无效的地址</p></li><li><p>在 beq 指令中，立即数字段<font color="lightblue">先拓展再左移</font></p></li><li><p>alu控制信号的产生使用了<font color="lightblue">多级译码</font>的方式。即，主控制单元生成 aluop 作为 alu 控制单元的输入，再由 alu 控制单元生成真正的 alu 控制信号。使用多级译码可以减少主控制单元的规模，使用多个小控制单元还可以提高控制单元的速度。</p></li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>单周期设计可以正确的工作，但现代设计中往往并不采用这种方式，因为效率太低。单周期设计中，时钟周期必须对所有指令等长，这样，时钟周期由执行时间最长的那条指令决定（lw指令），它使用了五个功能单元：指令存储器、寄存器堆、alu、数据存储器、寄存器堆</li></ul><h3 id="一个MIPS指令通常包含的步骤："><a href="#一个MIPS指令通常包含的步骤：" class="headerlink" title="一个MIPS指令通常包含的步骤："></a>一个MIPS指令通常包含的步骤：</h3><ol><li>从指令存储器中读取指令</li><li>指令译码的同时读取寄存器</li><li>执行操作或者计算地址</li><li>从数据存储器中读取操作数</li><li>写回寄存器</li></ol><p>流水线的时钟周期应该视为最慢的<font color="lightblue">功能单元</font>的时间</p><p>流水线所带来的性能提高是通过<font color="lightblue">增加指令的吞吐量</font>，而不是<font color="pink">减少单条指令的执行时间</font></p><h3 id="MIPS适合流水线的原因："><a href="#MIPS适合流水线的原因：" class="headerlink" title="MIPS适合流水线的原因："></a>MIPS适合流水线的原因：</h3><ul><li>所有的MIPS指令的长度都是相同的</li><li>MIPS指令只有很少的几种格式</li><li>MIPS中的存储器操作数仅出现在存取指令中</li><li>MIPS中，所有的操作数必须在存储器中对齐</li></ul><p><font color="red">设计MIPS体系结构指令集的另一个原则</font>：每条 MIPS 指令最多只写一个结果并且在流水线的最后一级执行（为了简化旁路的设计）</p><h3 id="流水线冒险："><a href="#流水线冒险：" class="headerlink" title="流水线冒险："></a>流水线冒险：</h3><ul><li><p>定义：在下一个时钟周期中，下一条指令不能执行</p></li><li><p>冒险的种类</p><ul><li>结构冒险：硬件不支持多条指令在同一时钟周期执行</li><li>数据冒险：因无法提供指令执行所需数据而导致不能在预定时钟周期执行的情况</li><li>控制冒险：取到的指令不是所需要的（往往发生在分支跳转中）</li></ul></li><li><p>分支预测：一种解决控制冒险的方法，预测某一个分支结果并<font color="red">立即</font>（不论分支指令是在ID、EX或是MEM执行，下一条指令是预测的指令）沿预测方向执行，而不是等真正的分支结果确定后才开始执行</p></li><li><p>延迟分支：另一种解决控制冒险的方法，将一条不受该分支影响的指令插入决策指令的后面，在一条指令延迟之后再开始执行分支，<font color="red">不论是否分支，该指令都必须执行完</font>，可以看成总是预测分支不发生，但不会清除该指令（只有分支延迟较短的时候，延迟分支才有效，所以没有处理器使用超过一个时钟周期的延迟分支。对于更长的分支，一般使用硬件分支预测器）</p></li></ul><p>除了存储系统以外，流水线的有效运作是决定处理器 CPI 乃至其性能的最重要的因素</p><p>延迟：流水线的级数或者顺序执行过程中两条指令间的级数，也可认为是某条指令从开始到完成所需要的时间</p><h3 id="流水线的数据通路："><a href="#流水线的数据通路：" class="headerlink" title="流水线的数据通路："></a>流水线的数据通路：</h3><ul><li><p>单周期中的指令流大致遵循从左至右的规律，但是有两个例外，这两个例外导致若将该数据通路直接运用到流水线中会导致数据冒险和结构冒险</p><ul><li>写回寄存器</li><li>选择PC的下一个值</li></ul></li><li><p>在流水线中为了从前面的流水级向后面的流水级传递信息，必须将信息放入<strong>流水线寄存器</strong>中，否则当下一条指令进入该流水级时这些信息将会丢失</p></li><li><p>数据通路中的每一个结构单元（指令存储器、寄存器读取端口、alu、数据存储器、寄存器写入端口等）都只能在一个流水级中使用，否则就会产生结构冒险</p></li><li><p>流水线的两种表示方法：</p><ul><li>多时钟周期的流水线图：<img src="/img/cod/10.png" alt="喵喵喵"></li><li>单时钟周期的流水线图（从多时钟周期中抽取<strong>一列</strong>）：<img src="/img/cod/11.png" alt="喵喵喵"></li></ul></li><li><p>将指令译码阶段产生的控制信号存入流水线寄存器时，不同的流水线寄存器所需要存取的讯号数量不同：</p><ul><li>ID/EX：需要存储所有的9个控制信号</li><li>EX/MEM：需要存储除了4个用于计算阶段（ALUSrc、ALUOp、<font color="lightblue">RegDst（因为已经将要写入的寄存器号存入了流水线寄存器，所以不需要存储该信号）</font>）的剩下的五个控制信号</li><li>MEM/WB：存储除了3个用于存储阶段（MemRead、MemWrite、Branch）的剩下的两个控制信号（RegWrite、MemtoReg）</li></ul></li><li><p>EX 冒险：<br>$$<br>if (EX/MEM.RegWrite \quad<br>and \quad \\ (EX/MEM.RegisterRd \ne 0) \quad<br>and \quad \\ (EX/MEM.RegisterRd=ID/EX.RegisterRs(ID/EX.RegisterRt)))<br>$$</p></li><li><p>MEM 冒险：</p></li></ul><p>$$<br>if (MEM/WB.RegWrite \quad<br>and \quad \\ (MEM/WB.RegisterRd \ne 0) \quad<br>and \quad \\ (MEM/WB.RegisterRd=ID/EX.RegisterRs(ID/EX.RegisterRt)))<br>$$</p><ul><li><p>当同时发生 EX 冒险和 MEM 冒险的时候，按 <font color="lightblue">EX 冒险</font>来算</p></li><li><p>装载指令发生的冒险必须通过阻塞流水线一个周期：</p><ul><li>装载指令冒险检测单元：<br>$$<br>if (ID/EX.MemRead \quad<br>and \quad \\(ID/EX.RegisterRt = IF/ID.RegisterRt) \quad<br>or \quad \\(ID/EX.RegisterRt=IF/ID.RegisterRs)) \\<br>stall \quad the \quad pipeline<br>$$</li></ul></li><li><p>当ID级的指令被阻塞时，其IF级的指令也必须被阻塞，否则已经取到的指令就可能丢失，因此<font color="lightblue">需要保持PC寄存器和IF/ID流水线寄存器不变</font></p></li><li><p>插入空指令的方法是将该指令的控制信号全部清零（这里事实上只需要将RegWrite、MemWrite清零，因为只有这两个的写入可能会改变原有的值），并且阻塞该指令之前的指令（参见上一条）</p></li></ul><h3 id="缩短分支的延迟："><a href="#缩短分支的延迟：" class="headerlink" title="缩短分支的延迟："></a>缩短分支的延迟：</h3><ul><li>将分支地址的计算和分支条件的判断提前到 ID 级（<font color="red">这里有可能会产生两种比较复杂的因素</font>）：<ul><li>需要引入新的旁路单元（分支指令的操作数可能来自 ALU/MEM 或 MEM/WB）</li><li>可能需要阻塞流水线（需要冒险检测单元）：<ul><li>遇到 R 型指令冒险时需要阻塞一个周期</li><li>遇到 load 指令冒险时需要阻塞两个周期</li></ul></li></ul></li><li>如果遇到数据冒险需要阻塞相应的时钟周期（alu指令1个时钟周期，lw指令两个时钟周期）</li></ul><h3 id="动态分支预测："><a href="#动态分支预测：" class="headerlink" title="动态分支预测："></a>动态分支预测：</h3><ul><li>动态分支预测：查找指令的地址观察上一次执行该指令时分支是否发生，如果上一次分支发生，就从上次分支发生的地方开始取新的信号</li><li>一种实现方法是采用分支预测缓存或者分支记录表：分支预测缓存是一小块按照分支地址低位索引的存储器区，其中包括一位或者多位数据用以说明最近是否发生过分支</li></ul><p>分支指令时间槽：紧跟延迟分支指令的时间片，在MIPS体系结构中，用不影响分支的一条指令填充到该时间片中</p><p>分支目标缓存：一种用于缓存分支目标地址或分支目标指令的结构，其一般形式为带标志位的 cache（硬件开销大于简单的分支预测缓存器）</p><p>相关预测器：综合考虑特定分支的局部行为和最近执行分支的全局行为的分支预测器</p><p>竞争预测器：具有多种预测机制的分支预测器，其带有一个选择器，对给定分支可选择其中一个作为预测结果</p><h3 id="控制："><a href="#控制：" class="headerlink" title="控制："></a>控制：</h3><ul><li>异常：控制流中<font color="lightblue">任何</font>意外的改变，无论其产生的原因是来自处理器的内部还是外部（一般指内部）</li><li>中断：来自<font color="lightblue">处理器外部</font>的异常</li><li>例子：<img src="/img/cod/12.png" alt="喵喵喵"></li></ul><h3 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h3><ul><li>异常发生时处理器必须进行的基本操作是：在<strong>异常程序计数器（EPC）</strong>中保存出错指令的地址，并把控制权转交给操作系统的特定地址</li><li>操作系统除了要知道是哪条指令引起异常之外，还必须知道引起异常的原因，主要有两种方法用于表示异常的原因：<ul><li>设置一个状态寄存器，其中有一个字段用于记录异常产生的原因（MIPS中的方法）</li><li>向量中断：控制权被转移到由异常原因决定的地址处，例如：<img src="/img/cod/13.png" alt="喵喵喵"></li></ul></li><li>用于异常处理的寄存器：<ul><li>EPC：32位寄存器，用于保存发生异常的指令地址（向量中断也需要这样一个寄存器），实际上保存的是发生异常后面一条指令的地址</li><li>Cause：记录异常原因的寄存器，在MIPS体系结构中它是32位的，其中某一个字段用于异常原因的编码</li></ul></li></ul><h3 id="流水线中的异常："><a href="#流水线中的异常：" class="headerlink" title="流水线中的异常："></a>流水线中的异常：</h3><ul><li>在流水线实现中，异常可被视作另一种形式的控制冒险</li><li>在算术溢出导致的异常中：<ul><li>溢出指令后一条指令的地址保存到 EPC 中</li><li>该周期<font color="red">后面</font>所有的flush信号置为有效（前面的指令正常执行）</li><li>该指令的控制信号置为无效</li><li>异常指令地址被强制放入PC</li></ul></li><li>在流水线中有5条活动的指令，确定哪条指令引发异常以及处理发生多个异常的方法：<ul><li>对异常划分优先级</li><li>硬件对异常进行排序，从而使得最先发生异常的指令被中断</li></ul></li><li>EPC捕捉中断指令（后一条）的地址，MIPS的Cause寄存器在一个时钟周期内记录下所有可能的异常</li><li>如果Cause寄存器中保存有多个异常，当优先级最高的异常处理之后，会继续导致硬件中断，从而处理后面的异常</li><li>硬件与操作系统必须协同工作：<ul><li>硬件一般暂停指令流中导致异常的指令，同时执行完该指令前的所有指令，清除指令后的所有指令，并且预设一个寄存器描述异常发生的原因，保存异常发生的指令（下一条）的地址，然后跳转到预先确定的地址开始执行</li><li>操作系统查看异常发生的原因并采取相应的操作：<ul><li>对于一个未定义的指令异常、硬件错误异常或算术溢出异常，操作系统通常终止执行的程序并返回原因描述</li><li>对于I/O设备请求或操作系统服务调用，操作系统保存程序的当前状态，执行期望的任务，然后重新载入程序继续运行。在I/O设备请求的情况下，我们可能需要在继续执行发出I/O设备请求的任务前先运行另一个任务，因为该任务一般在I/O完成之后才能继续执行（一个最重要且频繁出现的异常是页缺失与TLB异常）</li></ul></li></ul></li></ul><h3 id="异常的类型："><a href="#异常的类型：" class="headerlink" title="异常的类型："></a>异常的类型：</h3><ul><li>非精确中断：也称为非精确异常，流水线计算机中的中断或异常不与导致中断或异常的指令准确的关联，而让操作系统来决定</li><li>精确中断：也成为精确异常，流水线计算机中的中断或异常与导致中断或异常的指令准确的关联</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机的算术运算</title>
      <link href="/cod-ji-suan-ji-de-suan-zhu-yun-suan/"/>
      <url>/cod-ji-suan-ji-de-suan-zhu-yun-suan/</url>
      
        <content type="html"><![CDATA[<h3 id="溢出发生的条件："><a href="#溢出发生的条件：" class="headerlink" title="溢出发生的条件："></a>溢出发生的条件：</h3><ul><li>加法：<ul><li>同正得负</li><li>同负得正</li></ul></li><li>减法：<ul><li>正负得负</li><li>负正得正</li></ul></li></ul><p>对于 MiPS 指令而言：</p><ul><li>有符号数的加减法（add、sub、addi）在溢出时产生异常</li><li>无符号数的加减法（addu、subu、addiu）在溢出时不产生异常</li></ul><p><strong>addiu</strong> 在做无符号数的加法时，立即数<font color="lightblue"><strong>符号扩展</strong></font>至32位</p><p>MIPS 使用异常程序计数器 $EPC$ 来保存导致异常的指令地址，指令 $mcf0$ 用来将 $EPC$ 存入一个通用寄存器</p><p><strong>饱和</strong>操作是指结果发生溢出时，结果被设置为最大的正数或者最小的负数，一般用于多媒体操作</p><p>检测 MIPS 溢出举例：</p><ol><li><p>对于有符号加法检测的步骤为：</p><ol><li>首先判断加数和被加数的符号是否相异，如果相异则不会溢出，否则进行下一步检验</li><li>判断相加之后的结果于原来加数的符号是否相同</li></ol><ul><li>代码如下：<img src="/img/cod/9.png" alt="喵喵喵"></li></ul></li><li><p>对于无符号加法的检测步骤为：</p><ol><li>判断两数之和是否超过 $2^{31}-1$ ，方法为将其中一个加数取反看是否小于另一个加数</li><li>代码如下：<img src="/img/cod/8.png" alt="喵喵喵"></li></ol></li></ol><h3 id="MIPS-提供了寄存器-Hi-和-Lo-来容纳乘法过程中-64-位的乘积，例如："><a href="#MIPS-提供了寄存器-Hi-和-Lo-来容纳乘法过程中-64-位的乘积，例如：" class="headerlink" title="MIPS 提供了寄存器 $Hi$ 和 $Lo$ 来容纳乘法过程中 64 位的乘积，例如："></a>MIPS 提供了寄存器 $Hi$ 和 $Lo$ 来容纳乘法过程中 64 位的乘积，例如：</h3><ul><li>$mult/multu \quad rs,\; rt$ 将寄存器 $rs$ 和 $rt$ 的数据相乘，乘积的低32位存入$Lo$ ,高32位存入 $Hi$ </li><li>指令 $mul \quad rd,\; rs,\; rt$ 将 $rs$ 和 $rt$ 乘积的低32位存入寄存器 $rd$ 中</li><li>指令 $mfhi/mflo \quad rd$ 将 $Hi/Lo$ 的值送入寄存器 $rd$ </li></ul><p>MIPS 乘法指令都忽略溢出，需要有如软件来检测是否可能因为积过大而32位不够表示，对于 multu 指令，可以检测 Hi 的值是否为0，对于mult 指令，可以检测 Hi 的值是否为 Lo 的符号为</p><p>在有符号的除法中，必须满足等式 $被除数=商 \times 除数 + 余数$ 以及<strong> $-(x \div y)=(-x)\div y$</strong>，因此余数的正负号的设置必须格外小心，例如：</p><ul><li>$-7 \div 2=-3…-1$ 而不是 <font color="red">$-7 \div 2 = -4…1$</font>  （不满足后面一条性质）</li></ul><h3 id="提供了-Hi-和-Lo-来存储余数和商："><a href="#提供了-Hi-和-Lo-来存储余数和商：" class="headerlink" title="提供了 $Hi$ 和 $Lo$ 来存储余数和商："></a>提供了 $Hi$ 和 $Lo$ 来存储余数和商：</h3><ul><li>$div \quad rs,\; rt$ 将 $rs \div rt$ 的商存入寄存器 $Lo$，余数存入寄存器 $Hi$ </li><li>$divu$ 无符号的除法</li></ul><p>MIPS 除法指令同样忽略溢出，需要软件来检测商是否溢出</p><p><font color="red">P130精解不理解</font></p><p>检测溢出可以用最高为的进位和次高为的进位相异或，$1 \Rightarrow Overflow \quad else \; no \; overflow$ </p><p><strong>规格化数</strong>：没有前导零且小数点左边只有一位整数（如 $1.0*10^{-9}$）</p><p>MIPS 中浮点数的表示：1位符号位+8位指数位+23位尾数位（指数部分表示数的范围，尾数部分表示数的精度），MIPS 中浮点数的值可用 $(-1)^S \times (1+F) \times 2^E$ 其中 $F$ 为尾数，$E$ 为指数</p><h3 id="浮点数的溢出："><a href="#浮点数的溢出：" class="headerlink" title="浮点数的溢出："></a>浮点数的溢出：</h3><ul><li>上溢：正的指数太大而导致指数域放不下的情况</li><li>下溢：负的指数太小而导致指数域放不下的情况</li></ul><h3 id="浮点数的精度："><a href="#浮点数的精度：" class="headerlink" title="浮点数的精度："></a>浮点数的精度：</h3><ul><li>单精度：浮点数由一个32位的字表示（1+8+23），范围约为 $2.0 \times 10^{\pm38}$ </li><li>双精度：浮点数由两个32位的字表示（1+11+52），范围约为 $2.0 \times 10^{\pm308}$</li></ul><p>为了提高精度，$IEEE \quad 754$ 通常省略了前导一，即将浮点数的表示为：$(-1)^S \times (1+F) \times 2^E$ ，$F \in [0,1)$ </p><p>如果从左到右标记尾数依次为 $s1, s2, s3, … ,s_t$ ，且指数的值为 $E$ ，则浮点数的值为：$(-1)^S \times [1+s_1 \times 2^{-1}+s_2 \times 2^{-2}+…] \times 2^E$ </p><img src="/img/cod/7.png" alt="喵喵喵"><h3 id="带偏阶的计数法："><a href="#带偏阶的计数法：" class="headerlink" title="带偏阶的计数法："></a>带偏阶的计数法：</h3><ul><li>希望计数法能将最小的负数表示为 $000…00_2$ ，最大的正数表示为 $1111…11_2$ ，我们通常在原数的基础上加上一个偏阶</li><li>$IEEE \quad 754$ 规定单精度的偏阶为 127，例如指数为-1时，会表示成126，即 $01111110_2$ ，指数为+1时，会表示成 128，即 $10000000_2$ ；双精度额偏阶规定为 1023，给指数带偏阶之后，浮点数的表示为： $(-1)^S \times (1+F) \times 2^{E-Bias}$ </li></ul><h3 id="求-0-75-10-的单精度和双精度表示："><a href="#求-0-75-10-的单精度和双精度表示：" class="headerlink" title="求 $-0.75_{10}$ 的单精度和双精度表示："></a>求 $-0.75_{10}$ 的单精度和双精度表示：</h3><ul><li>单精度：{1, 01111110, 100…0}</li><li>双精度：{1, 011111111110, 100…0}</li></ul><h3 id="浮点数加法的步骤："><a href="#浮点数加法的步骤：" class="headerlink" title="浮点数加法的步骤："></a>浮点数加法的步骤：</h3><ol><li>将指数较小的数向指数较大的数对齐</li><li>将有效数相加</li><li>规格化（不一定要做）</li><li>四舍五入（不一定要做，做了之后由于进位可能会返回步骤3）</li></ol><ul><li>例子1（假定有效位数为4）： $9.999 \times 10^{1}+1.610 \times 10^{-1}$<ol><li>$1.610 \times 10^{-1} \rightarrow 0.016 \times 10^1$ </li><li>$9.999 \times 10^1+0.016 \times 10^1=10.0015\times10^1$ </li><li>$10.0015 \times 10^1=1.0015 \times10^2$</li><li>$1.0015 \times 10^2 \rightarrow 1.002 \times 10^2$  </li></ol></li><li>例子2（假定有效位数为4）：$0.5_{10}+(-0.4375_{10})$ <ol><li>两者的科学表示分别为 $1.000 \times 2^{-1}、-1.110\times2^{-2}$ </li><li>$-1.110 \times 2^{-2} \rightarrow -0.111 \times2^{-1}$ </li><li>$1.000 \times 2^{-1} + -0.111 \times 2^{-1}=0.001\times2^{-1}$</li><li>$0.001\times2^{-1} \rightarrow 1.000 \times 2^{-4}$</li></ol></li><li>浮点数基本结构示意图：<img src="/img/cod/6.png" alt="喵喵喵"></li></ul><h3 id="浮点数乘法的步骤："><a href="#浮点数乘法的步骤：" class="headerlink" title="浮点数乘法的步骤："></a>浮点数乘法的步骤：</h3><ol><li>将源操作数的指数相加作为积的指数（注意要减去一个偏阶）</li><li>计算有效数的乘法</li><li>规格化（检查上溢或者下溢）</li><li>舍入</li><li>积的符号相同为正，相异为负</li></ol><ul><li>例子1（假定有效位为4）：计算 $0.5_{10} \times (-0.4375)_{10}$ <ol><li>二进制表示分别为：$1.000\times2^{-1}$ 和 $-1.110 \times 2^{-2}$ </li><li>计算积的偏阶为：$-1+(-2)=-3$ （此时是没有带偏阶的，所以不需要减去偏阶）</li><li>将有效数相乘：$1.000 \times 1.110=1.110$，因此此时得到的结果为 $1.110 \times 2^{-3}$ </li><li>符合规格化且没有发生溢出</li><li>舍入后结果不变</li><li>符号为 $-$ </li></ol></li></ul><h3 id="MIPS-中的浮点数指令："><a href="#MIPS-中的浮点数指令：" class="headerlink" title="MIPS 中的浮点数指令："></a>MIPS 中的浮点数指令：</h3><ul><li>MIPS 常见的浮点数指令为：<img src="/img/cod/5.png" alt="喵喵喵"></li><li>MIPS 中有32个32位浮点寄存器$(\$f_0,\$f_1,…,\$f_{31})$ ，单精度浮点数直接用某一个寄存器来表示，双精度浮点数由一组单精度寄存器（偶数+奇数）来表示，例如 $\$f_2,\$f_3$ 形成一个双精度寄存器，称为 $\$f_2$ </li><li>常见的浮点数指令如图：<img src="/img/cod/4.png" alt="喵喵喵"></li></ul><img src="/img/cod/3.png" alt="喵喵喵"><h3 id="浮点算数的精确性："><a href="#浮点算数的精确性：" class="headerlink" title="浮点算数的精确性："></a>浮点算数的精确性：</h3><ul><li>保护位：右边多保留的第一位</li><li>舍入位：右边多保留的第二位</li><li>粘贴位：当舍入位右边有非零的数即置1，主要用于当保护位和舍入位恰好是10的情况</li></ul><p><strong>混合乘加</strong>指令执行一次乘法和一次加法，但只在加法后执行一次舍入，能够提高浮点性能</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>为了从一次浮点操作中最大限度的获得精度，标准允许一些数（指数最小时）以非规格化的形式出现，例如：<ul><li>最小的正的单精度规格化数为：$1.00…0 \times 2^{-126}$ </li><li>最小的正的单精度非规格化数为：$0.000…1\times2^{-126}$ </li></ul></li><li>左移指令可以代替2的幂次方数相乘，右移指令<font color="red">不能</font>代替2的幂次方数相除（对于无符号整数是对的，但是对于有符号整数不一定正确（负数可能变成正数））</li><li>浮点数加法<font color="red">没有</font>结合律（例如$c=-1.5 \times 10^{38},a=1.5\times10^{38},b=1.0$，则$c+(a+b)=0$ 而 $(c+a)+b=1$） </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机的语言</title>
      <link href="/cod-ji-suan-ji-de-yu-yan/"/>
      <url>/cod-ji-suan-ji-de-yu-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="常用的寄存器（32个）："><a href="#常用的寄存器（32个）：" class="headerlink" title="常用的寄存器（32个）："></a>常用的寄存器（32个）：</h3><ul><li>$\$0(\$zero)$：零寄存器，值恒为 $0$ </li><li>$\$1(\$at)$：寄存器 $at$ ，保留给汇编器使用</li><li>$\$2、\$3(\$v_0、\$v_1)$：函数返回值寄存器，调用时不保存</li><li>$\$4-\$7(\$a_0-\$a_3)$：函数参数寄存器，调用时不保存</li><li>$\$8-\$15、\$24-\$25(\$t_0-\$t_9)$：临时寄存器，调用时不保存</li><li>$\$16-\$23(\$s_0-\$s_7)$：保留寄存器，调用过程中必须被保存，保用完毕需要恢复之前值</li><li>$\$26-\$27(\$k_0-\$k_1)$：保留给异常处理函数使用</li><li>$\$28(\$gp)$：全局指针寄存器，调用时需要保存</li><li>$\$29(\$sp)$：栈指针寄存器，调用时需要保存</li><li>$\$30(\$fp)$：帧指针寄存器，调用时需要保存</li><li>$\$31(\$ra)$：返回地址寄存器，调用时需要保存</li></ul><img src="/img/cod/1.png" alt="喵喵喵"><p>MIPS 进行<strong>算数运算</strong>指令的操作数必须来自<strong><em>寄存器</em></strong></p><h5 id="硬件设计的基本原则："><a href="#硬件设计的基本原则：" class="headerlink" title="硬件设计的基本原则："></a>硬件设计的基本原则：</h5><ul><li>简单源于规整</li><li>越小越快</li><li>优秀的设计需要适宜的折衷方案</li></ul><p><strong>最高有效位</strong>指MIPS字中最左边的一位，<strong>最低有效位</strong>指最右边的一位，因为 MIPS 是 <font color="red">大端编址</font>，即地址低位对应数据高位</p><p>对于任意一个二进制数 $x$ 有，$\overline{x}+x+1=0$ ，即 $-x=\overline{x}+1$ ，若 $x$ 是正数， $-x$ 的补码为 $\overline{x}+1$ </p><h5 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h5><ul><li><p>$R$ 型指令：</p><ul><li><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">rd</th><th align="center">shamt</th><th align="center">funct</th></tr></thead><tbody><tr><td align="center">6</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">5</td><td align="center">6</td></tr></tbody></table></li><li><p>$R$ 型指令由 $op$ 和 $funct$ 字段决定指令的功能</p></li><li><p>$rs,rt$ 指源操作数寄存器</p></li><li><p>$rd$ 目的操作数寄存器</p></li><li><p>$shamt$ 位移量</p></li></ul></li><li><p>$I$ 型指令：</p><ul><li><table><thead><tr><th align="center">op</th><th align="center">rs</th><th align="center">rt</th><th align="center">imme</th></tr></thead><tbody><tr><td align="center">6</td><td align="center">5</td><td align="center">5</td><td align="center">16</td></tr></tbody></table></li><li><p>$rs$ 基址寄存器</p></li><li><p>$rt$ 目的寄存器</p></li><li><p>$imme$ 地址偏移量</p></li><li><p>$op$ 指令的功能</p></li></ul></li><li><p>$J$ 型指令：</p><ul><li><table><thead><tr><th align="center">op</th><th align="center">address</th></tr></thead><tbody><tr><td align="center">6</td><td align="center">26</td></tr></tbody></table></li><li><p>$op$ 指令的功能</p></li><li><p>$address$ 跳转的地址</p></li></ul></li></ul><h5 id="计算机基于两个重要的准则构建："><a href="#计算机基于两个重要的准则构建：" class="headerlink" title="计算机基于两个重要的准则构建："></a>计算机基于两个重要的准则构建：</h5><ul><li>指令用数的形式表示</li><li>和数据一样，程序存储在存储器中，并且可以读写</li></ul><p><strong>and</strong> 操作和先左移再进行右移都可以将字中的一部分分离出来</p><h5 id="基本块："><a href="#基本块：" class="headerlink" title="基本块："></a>基本块：</h5><ul><li>基本块是没有分支(可能出现在末尾者除外)，并且没有分支目标/分支标签(可能出现在开始者除外)的指令序列</li><li>编译最初阶段的任务之一就是将程序分解为若干基本块</li></ul><h5 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h5><ul><li>$C$ 语言中有很多的决策和循环语句，而 $MIPS$ 中却很少，这样的不均衡是因为：<ul><li>更多的决策语句使得代码更<font color="red">容易</font>被阅读和理解（相比于 mips 而言）</li><li>更少的决策语句简化了负责执行的底层工作</li><li>更多的决策语句意味着更少的代码量，这节约了编程的时间</li><li>更多的决策语句意味着更少的代码量，这意味着执行更少的操作</li></ul></li><li>注意 $C$ 语言中的 $\&amp;$ 和 $|$ 表示按位的逻辑操作，$\&amp;\&amp;$ 和 $||$ 表示条件分支</li></ul><p><strong>过程</strong>：根据提供的参数执行一定任务的存储的子程序</p><h5 id="过程运行中，程序必须遵守的步骤："><a href="#过程运行中，程序必须遵守的步骤：" class="headerlink" title="过程运行中，程序必须遵守的步骤："></a>过程运行中，程序必须遵守的步骤：</h5><ul><li>将参数放在过程可以访问的位置</li><li>将控制转交给过程</li><li>获得过程所需要的存储资源</li><li>执行需要的任务</li><li>将结果的值放在调用程序可以访问的位置</li><li>将控制返回初始点，因为一个过程可能由一个程序中的多个点调用</li></ul><h5 id="过程运行所需要的实体："><a href="#过程运行所需要的实体：" class="headerlink" title="过程运行所需要的实体："></a>过程运行所需要的实体：</h5><ul><li>调用者：调用一个过程并为过程提供必要参数值的程序</li><li>被调用者：根据调用者提供的参数执行一系列存储的指令，然后将控制权返回调用者的过程</li><li>程序计数器$(PC)$ ：包含在程序中正在被执行指令地址的寄存器</li></ul><p>在一个过程中，如果需要用到更多的寄存器 (多于4个参数寄存器和2个返回值寄存器)，则可能需要使用<font color="red">栈</font>来保护调用过程中的寄存器，例如 $\$t_0-\$t_9$ 属于临时寄存器，可以不必被调用者保存，$\$s_0-\$s_7$ 为保留寄存器，需要被调用者保存，<font color="red">由于可能存在嵌套过程，$ra$ 和参数寄存器也可能需要压栈</font></p><p>全局指针$gp$ ：指向静态数据区的保留寄存器</p><img src="/img/cod/2.png" alt="喵喵喵"><h3 id="加载-32-位常量（假定高十六位为-a，低十六位为-b）到寄存器-s-0-的操作："><a href="#加载-32-位常量（假定高十六位为-a，低十六位为-b）到寄存器-s-0-的操作：" class="headerlink" title="加载 32 位常量（假定高十六位为 a，低十六位为 b）到寄存器 $\$s_0$ 的操作："></a>加载 32 位常量（假定高十六位为 a，低十六位为 b）到寄存器 $\$s_0$ 的操作：</h3><ul><li><p>$lui \quad \$s_0, \; a$</p></li><li><p>$ori \quad \$s_0,\; b $</p></li></ul><p>保留寄存器 $\$at$ 通常用来创建长整数值</p><p>mips 中的条件分支寻址的形式为 <font color="purple">PC 相对寻址</font>，且是相对于 $PC+4$ 而不是当前指令 $PC$ ，并且寻址时的地址是<font color="pink">字地址</font> 而不是字节地址</p><p>$J$ 型指令的目标地址 $PC_{target}= \lbrace PC[31:28], addr &lt;&lt; 4\rbrace$ </p><h3 id="远距离的分支转移替换："><a href="#远距离的分支转移替换：" class="headerlink" title="远距离的分支转移替换："></a>远距离的分支转移替换：</h3><ul><li>$beq \quad \$s_0,\; \$s_1,\; L1$ 可以转换为下述指令：<ul><li>$bne \quad \$s_0,\; \$s1, \; L2$</li><li>$j \quad L1$ </li><li>$L2:\quad …$   </li></ul></li></ul><h3 id="MIPS-寻址模式"><a href="#MIPS-寻址模式" class="headerlink" title="MIPS 寻址模式"></a>MIPS 寻址模式</h3><ul><li>立即数寻址：操作数是位于指令自身的常数，如 (addi, subi等)</li><li>寄存器寻址：操作数是寄存器，如 (add, sub等)</li><li>基址寻址：操作数在内存中，其地址是指令中基址寄存器和常数的和，如 (lw, sw等)</li><li>PC 相对寻址：地址是PC和指令中常数 (左移两位)的和，如 (beq, bne等)</li><li>伪直接寻址：地址是PC高4位和26位立即数字段 (左移两位)组成</li></ul><p>数据竞争：假如来自不同线程的两个访存请求访问同一个地址，他们连续出现，并且至少其中一个是<font color="lightblue"><strong>写</strong></font>操作，那么这两个存储访问形成数据竞争</p><h3 id="翻译和执行程序的步骤："><a href="#翻译和执行程序的步骤：" class="headerlink" title="翻译和执行程序的步骤："></a>翻译和执行程序的步骤：</h3><ol><li>编译：将高级语言转化为汇编语言</li><li>汇编：将汇编语言转化为机器语言</li><li>链接：将多个模块和库程序组合在一起解析所有的引用</li><li>加载：将可执行程序加载到内存的适当位置</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机概要与技术</title>
      <link href="/cod-ji-suan-ji-gai-yao-yu-ji-zhu/"/>
      <url>/cod-ji-suan-ji-gai-yao-yu-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机的应用的分类及其特性："><a href="#计算机的应用的分类及其特性：" class="headerlink" title="计算机的应用的分类及其特性："></a>计算机的应用的分类及其特性：</h3><ul><li>个人计算机：用于个人使用的计算机，价格低廉，通常包含图形显示器、键盘和鼠标等</li><li>服务器：用于为多用户运行大型程序的计算机，通常由多个用户并行使用，并且一般通过网络访问</li><li>嵌入式计算机：嵌入到其他设备中的计算机，一般运行预定义的一个或者一组应用程序</li></ul><p>现代计算机的特征是<strong>处理器的并行性</strong>和<strong>内存的层次性</strong> </p><h3 id="程序的性能取决于："><a href="#程序的性能取决于：" class="headerlink" title="程序的性能取决于："></a>程序的性能取决于：</h3><ul><li>程序所用算法的有效性</li><li>用来建立程序并将其翻译成机器指令的软件系统</li><li>计算机执行机器指令的有效性</li></ul><h3 id="计算机结构中的-8-个伟大思想："><a href="#计算机结构中的-8-个伟大思想：" class="headerlink" title="计算机结构中的 8 个伟大思想："></a>计算机结构中的 8 个伟大思想：</h3><ul><li>面向摩尔定律的设计</li><li>使用抽象简化设计</li><li>加速大概率事件</li><li>通过并行提高性能</li><li>通过流水线提高性能</li><li>通过预测提高性能</li><li>存储器层次</li><li>通过冗余提高可靠性</li></ul><h3 id="软件的层次结构："><a href="#软件的层次结构：" class="headerlink" title="软件的层次结构："></a>软件的层次结构：</h3><ul><li>应用软件 $\rightarrow$ 系统软件 $\rightarrow$ 硬件</li><li>系统软件：提供常用服务的软件，包括操作系统、编译程序、加载程序和汇编程序等：<ul><li>操作系统：是用户和硬件之间的接口，为用户提供各种服务和监控功能，其最为重要的功能为：<ul><li>处理基本的输入和输出操作</li><li>分配外存和内存</li><li>为多个应用程序提供共享计算机资源的服务</li></ul></li><li>编译程序：把高级语言编写的程序翻译成硬件能执行的指令（机器语言）</li></ul></li></ul><h3 id="组成计算机的部件："><a href="#组成计算机的部件：" class="headerlink" title="组成计算机的部件："></a>组成计算机的部件：</h3><ul><li>输入</li><li>输出</li><li>存储器</li><li>处理器：<ul><li>数据通路（运算器）</li><li>控制器</li></ul></li></ul><h3 id="指令集体系结构-ISA"><a href="#指令集体系结构-ISA" class="headerlink" title="指令集体系结构 (ISA):"></a>指令集体系结构 (ISA):</h3><ul><li>是最重要的抽象之一，是硬件和底层软件之间的接口</li><li>计算机的体系结构包括程序员正确编写二进制机器语言所需的全部信息（如指令、I/O设备等）</li><li>提供给应用程序员的基本指令</li><li>令集和操作系统接口合成为<strong>应用二进制接口(ABI)</strong> </li></ul><h3 id="存储设备："><a href="#存储设备：" class="headerlink" title="存储设备："></a>存储设备：</h3><p>主存储器、二级存储器、磁盘、闪存</p><h3 id="联网的计算机的优点："><a href="#联网的计算机的优点：" class="headerlink" title="联网的计算机的优点："></a>联网的计算机的优点：</h3><p>通信、资源共享、远距离访问</p><h3 id="处理器制造中的一些概念："><a href="#处理器制造中的一些概念：" class="headerlink" title="处理器制造中的一些概念："></a>处理器制造中的一些概念：</h3><ul><li>定义：每块芯片的价格 $p_c$ ，每片晶圆的价格 $p_w$ ，每片晶圆的芯片数量 $m$ ，晶圆面积 $S$，成品率 $y$ ，合格芯片数量 $i$ ，总芯片数量 $I$ ，单位面积的瑕疵数量 $m_f$ ，芯片面积 $s$</li></ul><ol><li>$y=\frac{i}{I}$ ，$y=\frac{1}{(1+m_f·s/2)^2}$ （后一个公式是基于集成电路工厂的成品率经验） </li><li>$m \approx \frac{S}{s}$ （此处没有减去晶圆边上不满足芯片举行的面积）</li><li>$p_c=\frac{p_w}{m·y}$ </li></ol><p>性能定义为<strong>执行时间</strong>的倒数</p><h3 id="经典CPU性能公式："><a href="#经典CPU性能公式：" class="headerlink" title="经典CPU性能公式："></a><font color="red">经典CPU性能公式：</font></h3><ul><li>定义：$CPU$ 时间为 $t_{cpu}$ ，指令的数量为 $I$ ，每条指令执行的平均时间为 $CPI$ ，时钟周期的频率为 $f$ ，时钟周期的时间为 $t$</li><li>$t_{cpu}=I \times CPI/f=I \times CPI \times t$ </li></ul><p>唯一能够被完全可靠测量的计算机性能指标是<strong>时间</strong>，执行指令数量最少的代码其执行速度未必是最快的</p><h3 id="能耗的相关公式："><a href="#能耗的相关公式：" class="headerlink" title="能耗的相关公式："></a>能耗的相关公式：</h3><ul><li>能耗 $ \propto $ $\frac{1}{2} \times$ 负载电容 $\times$ 电压$^2$ </li><li>功耗 $ \propto $ $\frac{1}{2} \times$ 负载电容 $\times$ 电压$^2$ $\times$ 开关频率</li></ul><h3 id="谬误："><a href="#谬误：" class="headerlink" title="谬误："></a>谬误：</h3><ul><li>改进计算机的<strong><em>某个</em></strong>方面时期望总性能的提高与改进大小成正比：即，加速大概率事件不等于同等倍数的加速于整个程序</li><li>利用率低的计算机功耗低</li><li>用性能公式的一个子集去度量性能</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同余</title>
      <link href="/math-tong-yu/"/>
      <url>/math-tong-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z, m \in Z^+$，若有 $m | a - b$，则称 $a, b$ 模 $m$ 同余，记作 $a \equiv b \quad (mod \; m)$</p><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><ol><li><p>$a \equiv b \quad (mod \; m) \iff \exists q \in Z, a = b + q \cdot m$</p></li><li><p>模同余是一种等价关系，即有<strong>自反性</strong>、<strong>对称性</strong>、和<strong>传递性</strong></p></li><li><p>$a \equiv b \quad (mod \; m) \iff$ $a, b$ 被 $m$ 除的余数相同</p></li><li><p>同余做<strong>加法</strong>和<strong>乘法</strong>之后仍然同余</p></li></ol><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li>设 $d \cdot a \equiv d \cdot b \quad (mod \; m)$，若 $(d,m) = 1$，则 $a \equiv b \quad (mod \; m)$</li><li>$m \in Z^+$，设 $a \equiv b \quad (mod \; m)$，$d &gt; 0$，则 $a \cdot d \equiv b \cdot d \quad (mod \; d \cdot m)$</li><li>设 $a \equiv b \quad (mod \; m)$，若 $d | (a, b, m)$，则 $\frac{a}{d} \equiv \frac{b}{d} \quad (mod \; \frac{m}{d})$</li><li>设 $a \equiv b \quad (mod \; m)$，若 $d | m$，则 $a \equiv b \quad (mod \; d)$</li><li>设 $a \equiv b \quad (mod \; m_i)$，则 $a \equiv  b \quad mod([m_1, … m_k])$</li><li>设 $a \equiv b \quad (mod \; m)$，则 $(a, m) = (b, m)$</li></ul><h3 id="剩余类和完全剩余系"><a href="#剩余类和完全剩余系" class="headerlink" title="剩余类和完全剩余系"></a>剩余类和完全剩余系</h3><h4 id="剩余类与剩余"><a href="#剩余类与剩余" class="headerlink" title="剩余类与剩余"></a>剩余类与剩余</h4><p>$m \in Z^+$，$\forall a \in Z$，令 $C_a = \lbrace c | c \in Z, c \equiv a (mod \; m) \rbrace$，则 $C_a$ 称为模 $m$ 的 $a$ 的<strong>剩余类</strong>，一个剩余类中的任一数称为该类的<strong>剩余</strong>或<strong>代表元</strong>，若 $r_0, r_1, \dots, r_n \in Z$ 且任意两个数都不在同一个剩余类中，则称其为模 $m$ 的一个完全剩余系</p><p>通常将模 $m$ 的所有剩余类记作 $Z/mZ$，模 $m$ 的所有简化剩余类记作 $(Z/mZ)^*$</p><h4 id="完全剩余系"><a href="#完全剩余系" class="headerlink" title="完全剩余系"></a>完全剩余系</h4><p>$r_0, r_1, \dots ,r_n$ 为模 $m$ 的一个完全剩余系 $\iff$ 模 $m$ 两两不同余</p><p>一些特殊的完全剩余系：<strong>最小非负完全剩余系</strong>、<strong>最小正完全剩余系</strong>、<strong>最大非正完全剩余系</strong>、<strong>最大负完全剩余系</strong>、<strong>绝对值最小完全剩余系</strong> </p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li><font color="red">$m \in Z^+, (a, m) = 1$，$\forall b \in Z$，若 $k$ 遍历模 $m$ 的一个完全剩余系，则 $a \cdot k + b$ 也遍历模 $m$ 的一个完全剩余系</font></li><li>$(m_1, m_2) = 1$，若 $k_1, k_2$ 分别遍历模 $m_1, m_2$ 的完全剩余系，则 $m_2 \cdot k_1 + m_1 \cdot k_2$ 遍历模 $m_1 \cdot m_2$ 的完全剩余系</li></ul><h3 id="简化剩余系与欧拉函数"><a href="#简化剩余系与欧拉函数" class="headerlink" title="简化剩余系与欧拉函数"></a>简化剩余系与欧拉函数</h3><h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><p>欧拉函数 $\psi(m)$，指 $0, 1, \dots, m-1$ 中与 $m$ 互素的整数个数</p><h4 id="简化剩余类"><a href="#简化剩余类" class="headerlink" title="简化剩余类"></a>简化剩余类</h4><p>若剩余类 $C_a$ 中的一个剩余 $a$ 满足 $(a, m)=1$，则称该类为<strong>简化剩余类</strong>，简化剩余类中的剩余称为<strong>简化剩余</strong>，从每个简化剩余类中任取一个整数组成的集合称为<strong>简化剩余系</strong></p><p><strong>注：</strong>由定义可知 $|(Z/mZ)^*|=\psi(m)$</p><p>同剩余系，简化剩余也可分为一些特殊的简化剩余系</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$(a, m) = 1$，如果 $x$ 遍历模 $m$ 的一个简化剩余系，则 $a \cdot x$ 也遍历模 $m$ 的一个简化剩余系</p></li><li><p>$(a, m) = 1$，存在 $a^{-1} \in Z$，且 $1 \le a^{-1} &lt; m$，使得 $a \cdot a^{-1} \equiv 1 \quad (mod \; m)$ </p><ul><li>由 Bezout 等式立即得到结论成立</li></ul></li><li><p>$(m_1, m_2) = 1$，如果 $k_1, k_2$ 分别遍历模 $m_1,m_2$ 的简化剩余系，则 $m_2 \cdot k_1 + m_1 \cdot k_2$ 遍历模 $m_1 \cdot m_2$ 的简化剩余系</p></li><li><p><font color="red">$(m, n) = 1$，则 $\psi(mn)=\psi(m) \cdot \psi(n)$</font></p><ul><li>考虑 $xm + yn$ 由上一条定理立证</li></ul></li><li><p>设 $n = \Pi p_i^{\alpha_i}$，则 $\psi(n) = n \cdot \Pi(1-\frac{1}{p_i})$</p></li><li><p>$$<br>\sum_{d|m} \psi(d) = m<br>$$</p><ul><li><font color="red">该定理将用于原根的构造</font></li><li>$1, \dots , m$ 中的每一个整数按照与 $m$ 的最大公因数进行分类</li></ul></li></ul><h3 id="欧拉定理和费马小定理"><a href="#欧拉定理和费马小定理" class="headerlink" title="欧拉定理和费马小定理"></a>欧拉定理和费马小定理</h3><h4 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h4><p>若 $(a, m) = 1$，则有 $a^{\psi(m)} \equiv 1 \quad (mod \; m)$</p><h4 style="color:red;"> RSA  <p>设 $p, q$ 是两个不同的奇素数，$n = p \cdot q$，$a \in Z$ 且 $(a, n) = 1$，如果 $e$ 满足：<br>$$<br>1 &lt; e &lt; \psi(n), \quad (e, \psi(n)) = 1<br>$$<br>那么存在整数 $d$，使得 $e \cdot d \equiv 1 \quad (mod \; \psi(n))$，而且，对于整数<br>$$<br>a^e \equiv c \quad (mod \; n), \quad 1 &lt; c &lt; n<br>$$<br>有<br>$$<br>c^d \equiv a \quad (mod \; n)<br>$$<br>上述公钥为 $n,e$，私钥为 $p,q,d$，明文为 $a$，密文为 $c$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GeneratePrime</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""generate prime by miller robin algorithm"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> judge_numbers<span class="token punctuation">:</span> Iterable<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># judge_numbers are numbers to test in miller robin algorithm</span>        <span class="token keyword">if</span> <span class="token operator">not</span> judge_numbers<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>judge_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>judge_numbers <span class="token operator">=</span> judge_numbers    <span class="token keyword">def</span> <span class="token function">gen_nbit_prime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""generate nbit length prime"""</span>        <span class="token comment" spellcheck="true"># support n &lt;= 1024</span>        <span class="token keyword">assert</span> n <span class="token operator">&lt;=</span> <span class="token number">1024</span>        lower_bound <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> n        upper_bound <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> num <span class="token operator">&lt;</span> threshold<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># keep odd</span>            p <span class="token operator">=</span> randint<span class="token punctuation">(</span>lower_bound<span class="token punctuation">,</span> upper_bound<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> p            num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fail to find prime"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> p <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> p <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> judge_num <span class="token keyword">in</span> self<span class="token punctuation">.</span>judge_numbers<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>miller_robin_test<span class="token punctuation">(</span>p<span class="token punctuation">,</span> judge_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">miller_robin_test</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> int<span class="token punctuation">,</span> a<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""miller robin algorithm to test if p is prime        More details can be found in wikipedia "https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test"        """</span>        <span class="token comment" spellcheck="true"># fermat theorem: a^p = a (mod p) if p is prime</span>        <span class="token comment" spellcheck="true"># here we use builtin function for efficiency</span>        <span class="token keyword">if</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">!=</span> a<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        n <span class="token operator">=</span> p <span class="token operator">-</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># if x^2 = 1 (mod p) then, x = 1/p-1 (mod p)</span>        <span class="token keyword">while</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            remainder <span class="token operator">=</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">)</span>            <span class="token keyword">if</span> remainder <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            n <span class="token operator">//=</span> <span class="token number">2</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">RSA</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""RSA example    Description:        this implement 2.4.5 in chapter2    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nbit<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">65537</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        prime_gen <span class="token operator">=</span> GeneratePrime<span class="token punctuation">(</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> prime_gen<span class="token punctuation">.</span>gen_nbit_prime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>        q <span class="token operator">=</span> prime_gen<span class="token punctuation">.</span>gen_nbit_prime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>        n <span class="token operator">=</span> p <span class="token operator">*</span> q        phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>        d<span class="token punctuation">,</span> <span class="token operator">*</span>_ <span class="token operator">=</span> self<span class="token punctuation">.</span>extended_euclidean<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span>        d <span class="token operator">%=</span> phi_n        self<span class="token punctuation">.</span>private_key <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"p"</span><span class="token punctuation">:</span> p<span class="token punctuation">,</span>            <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span>            <span class="token string">"phi_n"</span><span class="token punctuation">:</span> phi_n<span class="token punctuation">,</span>            <span class="token string">"d"</span><span class="token punctuation">:</span> d        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>public_key <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"n"</span><span class="token punctuation">:</span> n<span class="token punctuation">,</span>            <span class="token string">"e"</span><span class="token punctuation">:</span> e        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""encrypt plaintext a with public key e"""</span>        e <span class="token operator">=</span> self<span class="token punctuation">.</span>public_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> self<span class="token punctuation">.</span>public_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> self<span class="token punctuation">.</span>private_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> self<span class="token punctuation">.</span>public_key<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">extended_euclidean</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""use extended euclidean algorithm to calculate s, t, k, s.t. sa + tb = k = (a, b)"""</span>        quotients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        q<span class="token punctuation">,</span> r1 <span class="token operator">=</span> divmod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        r2 <span class="token operator">=</span> b        quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">while</span> r1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            q<span class="token punctuation">,</span> r <span class="token operator">=</span> divmod<span class="token punctuation">(</span>r2<span class="token punctuation">,</span> r1<span class="token punctuation">)</span>            r2 <span class="token operator">=</span> r1            r1 <span class="token operator">=</span> r            quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        s<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        t<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>quotients<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r2</code></pre></h4><h4 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h4><p>$p$ 是一个素数，$\forall a,t,k \in Z$，有 $a^{t + k \cdot (p-1)} \equiv a^t \quad (mod \; p)$</p><h4 id="Wilson-定理"><a href="#Wilson-定理" class="headerlink" title="Wilson 定理"></a>Wilson 定理</h4><p>$p$ 是一个素数，则有<br>$$<br>(p-1)! \equiv -1 \quad (mod \; p)<br>$$</p><h3 style="color: red;">模重复平方计算法</h3><p>计算 $b^n \; (mod \; m)$ 的步骤：</p><ul><li>将 $n$ 表示成二进制 $n=(n_{k-1}n_{k-2} \cdots n_0)_2$</li><li>在模 $m$ 下计算 $b_0=b,b_1=b_0^2, \dots, b_{k-1}=b_{k-2}^2$</li><li>在模 $m$ 下计算 $a_0 = b_0^{n_0}, a_t=a_{t-1} \cdot b_t^{n_t}, \; \; t \in [1, k-1]$</li><li>$a_{k-1}$ 即为结果</li></ul><p>例子：计算 $312^{13} \; (mod \; 667)$<br>$$<br>\begin{align}&amp; 13 = (1101)_2 \\&amp; b_0 = b = 312； b_1 = b_0^2 = 629； b_2 = b_1^2 = 110；b_3 = b_2^2 = 94 \\&amp; a_0 = b_0^{n_0} = 312；a_1 = a_0 \cdot b_1^{n_1} = 312；a_2 = a_1 \cdot b_2^{n_2} = 303；a_3 = a_2 \cdot b_3^{n_3} = 468 \end{align}<br>$$<br>故结果为 $468$</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exponentiation_by_squaring</span><span class="token punctuation">(</span>b<span class="token punctuation">:</span> int<span class="token punctuation">,</span> e<span class="token punctuation">:</span> int<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""calculate non-negative integer k that satisfies b^e = k (mod m)    Description:        This function implement exponentiation mod in chapter2    Args:        b: the base integer        e: the exponent integer        m: the modulus    Returns:        the non-negative integer k that satisfies b^e = k (mod m) and 0 &lt;= k &lt; m    """</span>    <span class="token keyword">def</span> <span class="token function">integer_to_binary</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""change non-negative integer s to binary"""</span>        bin_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            bin_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>            s <span class="token operator">//=</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># the binary is expressed as a_0 + a_1*2 + ... + a_n*2^n</span>        <span class="token keyword">return</span> bin_array    bin_list <span class="token operator">=</span> integer_to_binary<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># previously calculate b, b^2, b^4, ... in the case of module m</span>    previous_b_list<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>b <span class="token operator">%</span> m<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>bin_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        previous_b_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>previous_b_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">%</span> m<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># calculate k</span>    k <span class="token operator">=</span> b <span class="token operator">**</span> bin_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">%</span> m    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>bin_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> bin_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> k <span class="token operator">*</span> previous_b_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> m    <span class="token keyword">return</span> k</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Query Parameters and String Validations</title>
      <link href="/fastapi-query-parameters-and-string-validations/"/>
      <url>/fastapi-query-parameters-and-string-validations/</url>
      
        <content type="html"><![CDATA[<h3 id="Query-Parameters-and-String-Validations"><a href="#Query-Parameters-and-String-Validations" class="headerlink" title="Query Parameters and String Validations"></a>Query Parameters and String Validations</h3><p><strong>FastAPI</strong> 允许对参数进行验证和声明附加信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>参数 <code>q</code> 的类型是 <code>str</code>，默认值为 <code>None</code>，因此是可选的</p><h3 id="Additional-validation"><a href="#Additional-validation" class="headerlink" title="Additional validation"></a>Additional validation</h3><p>下面的例子强制要求即使 <code>q</code> 是可选的，但是只要被提供，长度就不能超过 50 个字符</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p><strong>步骤</strong>：</p><ol><li>导入 <code>Query</code></li><li>使用 <code>Query</code> 作为函数参数的默认值：<ul><li><code>Query</code> 的第一个参数作为原函数参数的默认值</li><li>可以添加其他关键字参数来验证数据，如 <code>max_length</code> ，<code>min_length</code>，<code>regex</code> 等</li><li><code>Query</code> 显式表明了该参数为<strong>查询参数</strong></li><li>如果 <code>Query</code> 有默认值，那么该参数是可选的</li><li>如果期望声明必须参数，可以使用 <code>...</code> 作为 <code>Query</code>第一个参数</li></ul></li></ol><h3 id="Query-parameter-list-multiple-values"><a href="#Query-parameter-list-multiple-values" class="headerlink" title="Query parameter list / multiple values"></a>Query parameter list / multiple values</h3><p>当使用 <code>Query</code> 显示定义查询参数时，可以声明该参数接受值列表</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> query_items</code></pre><p>在上面的例子中，如果访问</p><p><code>http://localhost:8000/items/?q=foo&amp;q=bar</code></p><p>查询参数 <code>q</code> 的值是一个列表</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"q"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"foo"</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong>当使用 <code>list</code> 类型声明查询查询参数时，必须使用 <code>Query</code>，否则会被解释成 <strong>request body</strong></p><h3 id="Query-parameter-list-multiple-values-with-defaults"><a href="#Query-parameter-list-multiple-values-with-defaults" class="headerlink" title="Query parameter list / multiple values with defaults"></a>Query parameter list / multiple values with defaults</h3><p>同样的，可以为 <code>list</code> 类型定义默认值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> query_items</code></pre><p>如果访问</p><p><code>http://localhost:8000/items/</code></p><p>返回值为</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"q"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"foo"</span><span class="token punctuation">,</span>    <span class="token string">"bar"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>注：</strong>在上述例子中，如果使用 <code>list</code> 代替 <code>list[str]</code>，那么 <strong>FastAPI</strong> 将不会做类型检查，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> list <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query_items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> query_items</code></pre><h3 id="Declare-more-metadata"><a href="#Declare-more-metadata" class="headerlink" title="Declare more metadata"></a>Declare more metadata</h3><p>可以为参数添加更多的信息</p><p>这些信息将会被包含在自动生成的 <strong>OpenAPI</strong> 中，并且可以被用户文档界面和其他工具所使用</p><p><strong>注：</strong>不同的工具可能对 <strong>OpenAPI</strong> 的支持程度不同</p><p>下面是利用 <code>Query</code> 声明额外信息的例子</p><p>添加 <code>title</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Query string"</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>添加 <code>description</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>        None<span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"Query string"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"Query string for the items to search in the database that have a good match"</span><span class="token punctuation">,</span>        min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><h3 id="Alias-parameters"><a href="#Alias-parameters" class="headerlink" title="Alias parameters"></a>Alias parameters</h3><p>在 <code>Query</code> 中使用 <code>alias</code> 关键字可以为参数声明别名</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> alias<span class="token operator">=</span><span class="token string">"item-query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>在上述例子中 <code>item-query</code> 是 <code>q</code> 的别名，即访问：</p><p><code>http://127.0.0.1:8000/items/?item-query=foobaritems</code></p><p>相当于不使用别名访问</p><p><code>http://127.0.0.1:8000/items/?q=foobaritems</code></p><p><strong>注：</strong>使用别名之后将取代原名称，即声明别名 <code>item-query</code> 之后，只能通过上述第一个 URL 访问</p><h3 id="Deprecating-parameters"><a href="#Deprecating-parameters" class="headerlink" title="Deprecating parameters"></a>Deprecating parameters</h3><p>使用 <code>deprecated</code> 表明该参数将被废弃(仍可以使用，但在文档中会标注)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Queryapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    q<span class="token punctuation">:</span> str <span class="token operator">=</span> Query<span class="token punctuation">(</span>        None<span class="token punctuation">,</span>        alias<span class="token operator">=</span><span class="token string">"item-query"</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"Query string"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"Query string for the items to search in the database that have a good match"</span><span class="token punctuation">,</span>        min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>        max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>        regex<span class="token operator">=</span><span class="token string">"^fixedquery$"</span><span class="token punctuation">,</span>        deprecated<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 函数参数</title>
      <link href="/python-han-shu-can-shu/"/>
      <url>/python-han-shu-can-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="可接受任意数量参数的函数"><a href="#可接受任意数量参数的函数" class="headerlink" title="可接受任意数量参数的函数"></a>可接受任意数量参数的函数</h3><p><strong>使用 <code>*</code> 参数，可以让一个函数接受任意数量的位置参数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>在上述例子中，<code>args</code> 是一个由除 <code>arg</code> 以外所有位置参数组成的元组</p><p><strong>使用 <code>**</code> 参数，可以让一个函数接受任意数量的关键字参数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>在上述例子中，<code>kwargs</code> 是包含被传入进来的关键字参数字典</p><p><strong>同时使用 <code>*</code> 和 <code>**</code>，能够让函数接受任意数量的位置参数和关键字参数</strong></p><h3 id="只接受关键字参数的函数"><a href="#只接受关键字参数的函数" class="headerlink" title="只接受关键字参数的函数"></a>只接受关键字参数的函数</h3><p><strong>将参数放在 <code>*</code> 参数或者单个 <code>*</code> 后面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">other_test</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>在上述例子中，<code>key</code> 必须为关键字参数</p><h3 id="仅限位置形参"><a href="#仅限位置形参" class="headerlink" title="仅限位置形参"></a>仅限位置形参</h3><p><strong>使用 <code>/</code> 指明某些函数的形参必须使用仅限位置而非关键字参数的形式</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span></code></pre><p>在上述例子中，<code>a</code>，<code>b</code> 为仅限位置形参，<code>c</code>，<code>d</code> 可以是位置形参也可以是关键字形参，<code>e</code> ，<code>f</code>必须为关键字形参</p><h3 id="小技巧-来自-fastapi"><a href="#小技巧-来自-fastapi" class="headerlink" title="小技巧(来自 fastapi)"></a>小技巧(来自 <a href="https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/#order-the-parameters-as-you-need-tricks" target="_blank" rel="noopener">fastapi</a>)</h3><p>借助 <code>*</code>，带有默认值的参数也可以在不带有默认值的参数前面，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Pathapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> int <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The ID of the item to get"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Request Body</title>
      <link href="/fastapi-request-body/"/>
      <url>/fastapi-request-body/</url>
      
        <content type="html"><![CDATA[<h3 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h3><p>当需要从客户端(如浏览器)发送数据到 API 时，可以借助 <strong>request body</strong> </p><p><strong>request body</strong>：从客户端发送到 API 的数据</p><p><strong>response body</strong>：从 API 发送到客户端的数据</p><p>API 总是需要发送 <strong>response body</strong>，但是客户端并不一定需要发送 <strong>request body</strong></p><p>借助 <strong>Pydantic</strong> 来声明 <strong>request body</strong></p><p><strong>注</strong>：</p><ul><li><p>通常不用 <code>GET</code> 发送 <strong>request body</strong> (实际上 <code>GET</code> <a href="https://juejin.im/entry/5badb020f265da0ac962abf2" target="_blank" rel="noopener">好像也是可以发送的</a>)</p></li><li><p>通常用：<code>POST</code>(最常见)，<code>PUT</code>，<code>DELETE</code>，<code>PATCH</code> 中的一种发送数据</p></li></ul><h3 id="Pydantic-example"><a href="#Pydantic-example" class="headerlink" title="Pydantic example"></a>Pydantic example</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> item</code></pre><p>声明 <strong>request body</strong> 步骤：</p><ol><li>导入 <code>BaseModel</code> </li><li>定义数据模型并继承于 <code>BaseModel</code>：<ul><li>要注意声明 Python types</li><li>和声明查询参数一样，当模型的属性有默认值时，该属性不是必须的，否则是必须的，用 <code>None</code> 声明可选参数</li></ul></li><li>声明数据模型为参数：<ul><li>类似路径参数和查询参数一样，将其加入到函数参数中，并声明类型为自定义的数据类型</li></ul></li></ol><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><p>使用上述的声明，<strong>FastAPI</strong> 将会：</p><ul><li>以 JSON 格式读取 <strong>request body</strong></li><li>将数据转化为相应的类型(如果需要的话)</li><li>验证数据：<ul><li>如果不合法，将会返回错误信息</li></ul></li><li>以定义的数据类型返回接受的数据，在上述例子中，<strong>request body</strong> 被转化为 Item 类型：<ul><li>如果在函数中声明了定义的数据类型，还将获得 IDE 支持</li></ul></li><li>为模型自动生成 JSON 模式定义</li><li>这些协议将作为自动生成的 <strong><a href="http://127.0.0.1:8000/openapi.json" target="_blank" rel="noopener">OpenAPI</a></strong> 的协议，并用作文档的自动生成</li></ul><h3 id="Automatic-docs"><a href="#Automatic-docs" class="headerlink" title="Automatic docs"></a>Automatic docs</h3><p>自定义模型的 JSON 协议将会作为自动生成 <strong>OpenAPI</strong> 协议的一部分，并且会通过交互式 API 文档展现</p><p>它们也会被用在每个需要path operation的 API 文档上</p><h3 id="Editor-support"><a href="#Editor-support" class="headerlink" title="Editor support"></a>Editor support</h3><p>IDE 将支持类型提示和自动补全，以及错误检查</p><h3 id="Use-the-model"><a href="#Use-the-model" class="headerlink" title="Use the model"></a>Use the model</h3><p>在函数中，可以直接访问所有数据模型的属性(和正常的访问没有区别)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    item_dict <span class="token operator">=</span> item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> item<span class="token punctuation">.</span>tax<span class="token punctuation">:</span>        price_with_tax <span class="token operator">=</span> item<span class="token punctuation">.</span>price <span class="token operator">+</span> item<span class="token punctuation">.</span>tax        item_dict<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"price_with_tax"</span><span class="token punctuation">:</span> price_with_tax<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> item_dict</code></pre><h3 id="Request-body-path-parameters"><a href="#Request-body-path-parameters" class="headerlink" title="Request body + path parameters"></a>Request body + path parameters</h3><p>可以同时声明路径参数和 <strong>request body</strong></p><p><strong>FastAPI</strong> 能够自动识别函数参数中从路径中得到的<strong>路径参数</strong>和 <strong>request body</strong> 中获得的 <strong>Pydantic models</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Request-body-path-query-parameters"><a href="#Request-body-path-query-parameters" class="headerlink" title="Request body + path + query parameters"></a>Request body + path + query parameters</h3><p>可以同时声明路径参数、<strong>request body</strong> 以及查询参数</p><p><strong>FastAPI</strong> 能够自动识别它们</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> float <span class="token operator">=</span> Noneapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><p><strong><font color="red">函数参数的识别遵循：</font></strong></p><ul><li>如果参数出现在 <strong>path</strong> 中，则为路径参数</li><li>如果参数具有单一的类型，则为查询参数</li><li>如果被声明为 <strong>Pydantic model</strong>，则为 <strong>request body</strong></li></ul><h3 id="Without-Pydantic"><a href="#Without-Pydantic" class="headerlink" title="Without Pydantic"></a>Without Pydantic</h3><p>可以使用 <strong>Body parameters</strong> 代替 <strong>Pydantic model</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Query Parameters</title>
      <link href="/fastapi-query-parameters/"/>
      <url>/fastapi-query-parameters/</url>
      
        <content type="html"><![CDATA[<h3 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h3><p>当声明的函数参数不是路径参数的一部分时，它们会被自动的解释为<a href="https://en.wikipedia.org/wiki/Query_string" target="_blank" rel="noopener">查询参数</a>(可以直观的理解为 URL 中 ? 后面，以 &amp; 分割的键值对)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_items_db <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>skip<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> fake_items_db<span class="token punctuation">[</span>skip <span class="token punctuation">:</span> skip <span class="token operator">+</span> limit<span class="token punctuation">]</span></code></pre><p>在上述例子中，如果访问 <code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10</code> ，则查询参数为：</p><ul><li>skip：值为 0</li><li>limit：值为 10</li></ul><p>查询参数作为 URL 的一部分，默认是<strong>字符串</strong>类型，如果被声明为其他的 python 类型，例如在上面的例子中被声明为 <code>int</code> ，则会被自动转化成整数类型并进行类型检查</p><p><strong>适用于路径参数的过程同样适用于查询参数</strong>：</p><ul><li>编辑器支持</li><li>数据解析</li><li>数据验证</li><li>自动文档</li></ul><h3 id="Defaults"><a href="#Defaults" class="headerlink" title="Defaults"></a>Defaults</h3><p>由于查询参数不是路径中固定的一部分，因此它们是可选的，并且可以有默认值</p><p>在上述例子中，访问 <code>http://127.0.0.1:8000/items/</code> 和访问 <code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10</code> 是等价的</p><p>，但是如果访问 <code>http://127.0.0.1:8000/items/?skip=20</code> ，则查询参数为：</p><ul><li>skip：20</li><li>limit：10</li></ul><h3 id="Optional-parameters"><a href="#Optional-parameters" class="headerlink" title="Optional parameters"></a>Optional parameters</h3><p>同样的，可以通过将默认值指定为 <code>None</code> 来声明<strong>可选</strong>查询参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><p>在上述例子中，参数 <code>q</code> 是可选的，并且默认值是 <code>None</code></p><p><strong>注</strong>：<strong>FastAPI</strong> 可以自动识别 <code>item_id</code> 为路径参数，<code>q</code> 是可选参数</p><h3 id="Query-parameter-type-conversion"><a href="#Query-parameter-type-conversion" class="headerlink" title="Query parameter type conversion"></a>Query parameter type conversion</h3><p>同样可以声明 <code>bool</code> 类型，它们也会被自动转换</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span> short<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> short<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"This is an amazing item that has a long description"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> item</code></pre><p>在这个例子中，访问如下网址及其大小写变体，都有 <code>short=True</code> 成立，<strong>相反的意思</strong> 则为 <code>False</code></p><ul><li><p><code>http://127.0.0.1:8000/items/foo?short=1</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=True</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=true</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=on</code></p></li><li><p><code>http://127.0.0.1:8000/items/foo?short=yes</code></p></li></ul><p><strong>注</strong>：相反的意思指的是单词的意思相反，如 0-1，true-false 等，访问其他不可解析的路径时会报错</p><h3 id="Multiple-path-and-query-parameters"><a href="#Multiple-path-and-query-parameters" class="headerlink" title="Multiple path and query parameters"></a>Multiple path and query parameters</h3><p>可以同时声明多个路径参数和查询参数，<strong>FastAPI</strong> 知道如何进行选择</p><p>由于 <strong>FastAPI</strong> 是根据参数的名字来判断的，因此对参数的声明顺序没有要求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>    user_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span> short<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"owner_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> short<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"This is an amazing item that has a long description"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> item</code></pre><h3 id="Required-query-parameters"><a href="#Required-query-parameters" class="headerlink" title="Required query parameters"></a>Required query parameters</h3><p>当声明的非路径参数(目前只介绍了查询参数)有默认值时，它不是必须的</p><p>如果只想设置可选参数而不指定特定值，则可以设置默认值为 <code>None</code></p><p>如果想要让查询参数是必须的，只需要不指定默认值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needy<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"needy"</span><span class="token punctuation">:</span> needy<span class="token punctuation">}</span>    <span class="token keyword">return</span> item</code></pre><p>在上面的例子中，<code>needy</code> 是类型为 <code>str</code> 的必须查询参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> needy<span class="token punctuation">:</span> str<span class="token punctuation">,</span> skip<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"needy"</span><span class="token punctuation">:</span> needy<span class="token punctuation">,</span> <span class="token string">"skip"</span><span class="token punctuation">:</span> skip<span class="token punctuation">,</span> <span class="token string">"limit"</span><span class="token punctuation">:</span> limit<span class="token punctuation">}</span>    <span class="token keyword">return</span> item</code></pre><p>在上面的例子中，查询参数有 3 个：</p><ul><li>needy：类型为 <code>str</code> 的必选参数</li><li>skip：类型为 <code>int</code> 的可选参数，默认值为 0</li><li>limit：类型为 <code>int</code> 的可选参数</li></ul><p><strong>注</strong>：可以同上一节一样使用枚举变量</p><h3 id="Optional-type-declarations"><a href="#Optional-type-declarations" class="headerlink" title="Optional type declarations"></a>Optional type declarations</h3><p><strong>注</strong>：高级用法</p><p>在 <code>mypy</code> 中，如果使用：</p><pre class=" language-python"><code class="language-python">limit<span class="token punctuation">:</span> int <span class="token operator">=</span> None</code></pre><p>可能会出现错误：</p><pre class=" language-bash"><code class="language-bash">Incompatible types <span class="token keyword">in</span> assignment <span class="token punctuation">(</span>expression has <span class="token function">type</span> <span class="token string">"None"</span>, variable has <span class="token function">type</span> <span class="token string">"int"</span><span class="token punctuation">)</span></code></pre><p>可以通过 <code>Optional</code> 告知 <code>mypy</code> 值可以为 <code>None</code> ，例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optionallimit<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None</code></pre><p>在路径声明中，可以这样写</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> limit<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"limit"</span><span class="token punctuation">:</span> limit<span class="token punctuation">}</span>    <span class="token keyword">return</span> item</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>integer divisibility</title>
      <link href="/math-zheng-shu-de-ke-chu-xing/"/>
      <url>/math-zheng-shu-de-ke-chu-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z$ 且 $b \neq 0$ ，如果存在 $q \in Z$ 使得<br>$$<br>a=q \cdot b<br>$$<br>则称 $b$ 整除 $a$ 或者 $a$ 被 $b$ 整除，记作 $b | a$ ，$b$ 称为 $a$ 的因数，$a$ 称为 $b$ 的倍数</p><h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><ul><li><p>当 $b$ 遍历整数 $a$ 的所有因数时，$-b$ 和 $\frac{a}{b}$ 也遍历 $a$ 的因数</p></li><li><p>若 $a_1, …, a_n \in Z$ 都是 $c \in Z^*$ 的倍数，则他们的整系数线性组合也是 $c$ 的倍数，即 $\forall s_1, …, s_n \in Z$ 都有 $c | a_1s_1+…+a_ns_n$</p></li><li><p>若 $p$ 是素数，且 $p|a_1a_2 \cdots a_n$ ，则 $ \exists i, 1 \le i \le n$，$p|a_i$</p></li></ul><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>$n \in Z^* $ 且 $n \neq \pm 1$ 且 $n$ 只有因数 $\pm1、\pm n$ ，则 $n$ 称之为<strong>素数</strong>，通常情况下约定素数为正整数，记作 $p$</p><h4 id="性质：-1"><a href="#性质：-1" class="headerlink" title="性质："></a>性质：</h4><ul><li>合数的大于 $1$ 的最小正因数 $p$ 必然是素数，且 $p \le \sqrt{n}$ </li><li>等差数列 $qn+l$ 在 $(q, l)=1$ 时有无穷多个素数，<a href="https://zhuanlan.zhihu.com/p/57379991" target="_blank" rel="noopener">Dirichlet</a></li></ul><h4 id="Eratosthenes"><a href="#Eratosthenes" class="headerlink" title="Eratosthenes"></a>Eratosthenes</h4><p>依次删除 $\le \sqrt{N}$ 的所有素数的倍数，可求得所有不大于给定正整数 $N$ 的素数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eratosthenes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""use eratosthenes sieve to count all prime number"""</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    sifter <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>    sifter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> sifter<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">//</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sifter<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> sifter<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="欧几里得除法"><a href="#欧几里得除法" class="headerlink" title="欧几里得除法"></a>欧几里得除法</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z$ ，且 $b &gt; 0$，则 $\forall c \in Z$ 存在唯一的整数 $q, r$ 使得 $a=q \cdot b + r$，$c \le r &lt; c+b$ </p><p>其中 $q$ 称为 $a$ 被 $b$ 除所得的不完全商，$r$ 叫做 $a$ 被 $b$ 除所得的余数</p><ul><li>$c=0$ 时称 $r$ 为最小非负余数</li><li>$c=1$ 时称 $r$ 为最小正余数</li><li>$c=-b+1$ 时称 $r$ 为最大非正余数</li><li>$c=-b$ 时称 $r$ 为最大负余数</li><li>若 $c$ 满足 $-\frac{b}{2} \le r &lt; \frac{b}{2} \; or \; -\frac{b}{2} &lt; r \le \frac{b}{2}$ 时称 $r$ 为绝对值最小余数</li></ul><h3 id="整数的表示"><a href="#整数的表示" class="headerlink" title="整数的表示"></a>整数的表示</h3><p>$\forall b \in Z \; and \; b &gt; 1$ ，每个正整数 $n$ 在 $b$ 进制下的表示<a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" target="_blank" rel="noopener">存在</a>且唯一，且 $n$ 的 $b$ 进制位数 $k=[\log_bn]+1$</p><h3 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h3><p>$d=(a_1,…,a_n)$ 称为最大公因数，如果：</p><ul><li>$d|a_1, …, d|a_n$</li><li>若 $e|a_1, …, e|a_n$，则 $e|d$</li></ul><h3 id="广义欧几里得除法"><a href="#广义欧几里得除法" class="headerlink" title="广义欧几里得除法"></a><font color="red">广义欧几里得除法</font></h3><img src="/img/math/1.png" alt="喵喵喵" style="zoom: 80%;"><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li>$n \le 5logb$ ，<em>运用数学归纳法可以证明 $b$ 不小于 $fibonacci$ 的第 $n+1$ 项</em></li></ul><h3 id="Bezout-等式"><a href="#Bezout-等式" class="headerlink" title="Bezout 等式"></a><font color="red">Bezout 等式</font></h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>$a, b \in Z^+$ ，存在整数 $s, t$ 使得 $sa+tb=(a,b)$  </p><h4 id="求整数-s-t-的方法"><a href="#求整数-s-t-的方法" class="headerlink" title="求整数 $s, t$ 的方法"></a>求整数 $s, t$ 的方法</h4><p><span id="1"><strong>方法一</strong></span>：首先根据广义欧几里得除法求出 $(a,b)=r_n$，带回并依次消去 $r_{n-1}, … ,r_1$</p><p>例如：$a=1859, b=1573$ ，求 $s, t$ 使得 $s \cdot a + t \cdot b=(a,b)$</p><p>根据欧几里得除法，我们有：<br>$$<br>\begin{align}&amp; 1859 = 1573 \times 1 + 286 \\ &amp; 1573 = 5 \times 286 + 143 \\ &amp; 286 = 2 \times 143\end{align}<br>$$<br>得到 $(a,b)=143$ ，带回<br>$$<br>\begin{align}143 &amp; = 1573 - 5 \times 286 \\ &amp; = 1573 - 5 \times (1859-1573) \\ &amp; = -5 \times 1859 + 6 \times 1573\end{align}<br>$$<br>于是 $s=-5, t=6$</p><p><strong>方法二</strong>：列表法</p><img src="/img/math/2.png" alt="喵喵喵" style="zoom:80%;"><p>依然使用<a href="#1">方法一</a>的例子</p><table><thead><tr><th align="center">$j$</th><th align="center">$s_j$</th><th align="center">$t_j$</th><th align="center">$q_{j+1}$</th><th align="center">$r_{j+1}$</th></tr></thead><tbody><tr><td align="center">-3</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1859</td></tr><tr><td align="center">-2</td><td align="center">1</td><td align="center">0</td><td align="center"></td><td align="center">1573</td></tr><tr><td align="center">-1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">286</td></tr><tr><td align="center">0</td><td align="center">$-s_{-1} \times q_0 + s_{-2} = 1$</td><td align="center">$-t_{-1} \times q_0 + t_{-2} = 1$</td><td align="center">5</td><td align="center">143</td></tr><tr><td align="center">1</td><td align="center">$-s_{0} \times q_1 + s_{-1} = -5$</td><td align="center">$-t_{0} \times q_1 + t_{-1} = 6$</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p>我们有 $s=s_1=-5, t=t_1=6, (a, b)=r_0=143$</p><p><strong>根据列表法求 s，t和(a,b)</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extended_euclidean</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""use extended euclidean algorithm to calculate s, t, k, s.t. sa + tb = k = (a, b)"""</span>    quotients <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    q<span class="token punctuation">,</span> r1 <span class="token operator">=</span> divmod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    r2 <span class="token operator">=</span> b    quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>    <span class="token keyword">while</span> r1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        q<span class="token punctuation">,</span> r <span class="token operator">=</span> divmod<span class="token punctuation">(</span>r2<span class="token punctuation">,</span> r1<span class="token punctuation">)</span>        r2 <span class="token operator">=</span> r1        r1 <span class="token operator">=</span> r        quotients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>    s<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    t<span class="token punctuation">:</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>quotients<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quotients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span>t<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r2</code></pre><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li>若 $a, b \in Z$ 且 $a^2 + b^2 \neq 0$，则<ul><li>$\forall m \in Z^+$ ，$(a \cdot m, b \cdot m)=(a, b) \cdot m$</li><li>若 $d \in Z^*$，且 $d|a, d|b$ ，则 $(\frac{a}{d}, \frac{b}{d})=\frac{(a,b)}{|d|}$<ul><li>特别的，若取 $d=(a,b)$，则我们可以构造两个互素的整数 $\frac{a}{d}, \frac{b}{d}$</li></ul></li></ul></li><li>$a, b, c \in Z, \; b \ne 0, c \ne 0$ 且 $(a, c)=1$，则有 ：</li></ul><p>$$<br>(ab, c)=(b,c)<br>$$</p><ul><li>$a_i, c \in Z$ 且 $(a_i, c)=1$ 则有：</li></ul><p>$$<br>(\Pi_{i=1}^{n}a_i, c)=1<br>$$</p><ul><li>$a, b \in Z^+$，则 $(2^a-1, 2^b-1)=2^{(a,b)}-1$ </li></ul><p><strong>注</strong>：</p><blockquote><ol><li>Bezout 等式可扩展到 $n$ 维的情况</li><li>求 n 个数的最大公因数相当于递归的求两个数的最大公因数</li></ol></blockquote><h3 id="整数分解"><a href="#整数分解" class="headerlink" title="整数分解"></a>整数分解</h3><p>给定正合数 $n &gt; 1$，若 $ \exists a,b$ ，满足：<br>$$<br>n|a^2-b^2 \\ n \nmid a+b \\ n \nmid a-b<br>$$<br>则 $(n, a-b)$，$(n,a+b)$ 都是 $n$ 的真因数</p><h3 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理"></a><font color="red">算术基本定理</font></h3><p>任意整数 $n&gt;1$ 可以唯一的表示成<br>$$<br>n = p_1^{\alpha_1} \cdots p_n^{\alpha_s}, \quad \alpha_i &gt; 0,p_i&lt;p_j(i&lt;j)<br>$$<br><strong>注</strong>：利用算术基本定理，很多结论几乎是显而易见的</p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><ul><li>$n$ 的因数个数 $d(n)=\Pi(1+\alpha_i)$</li><li>$n$ 的所有因数的和：</li></ul><p>$$<br>\Pi(1 + p_i + \cdots p_i^{\alpha_i})=\Pi(\frac{p_i^{\alpha_i+1}-1}{p_i-1})<br>$$</p><ul><li>$a,b$ 是两个正整数，则存在整数 $a’|a, b’|b$ ，使得：</li></ul><p>$$<br>a’ \cdot b’=[a,b] \qquad (a’,b’)=1<br>$$</p><h3 id="素数定理"><a href="#素数定理" class="headerlink" title="素数定理"></a>素数定理</h3><p>设<br>$$<br>\pi(x) = \sum_{p \le x} 1<br>$$<br>则有：<br>$$<br>\frac{\ln 2}{3}\frac{x}{\ln x} &lt; \pi(x) &lt; 6 \ln 2 \frac{x}{\ln x}<br>$$<br>以及<br>$$<br>\lim_{x \rightarrow \infty} \cfrac{\pi(x)}{\cfrac{x}{\ln x}} = 1<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
            <tag> infomation security </tag>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Path Parameters</title>
      <link href="/fastapi-path-parameters/"/>
      <url>/fastapi-path-parameters/</url>
      
        <content type="html"><![CDATA[<p><strong>path</strong> 中可以用 <strong>python</strong> 格式字符串的形式来声明变量，例如</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><p>变量 <code>item_id</code> 会成为为函数的一个参数</p><h4 id="带类型的路径变量"><a href="#带类型的路径变量" class="headerlink" title="带类型的路径变量"></a>带类型的路径变量</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><p><strong>给路径变量添加类型</strong>：</p><ul><li><p>有助于 IDE 的检查和代码自动补全</p></li><li><p><strong>FastAPI</strong> 可以根据声明的类型对变量自动解析 (将从<strong>http</strong>请求获得的字符串转化为 <strong>python data</strong>)</p><ul><li>例如向 <a href="http://127.0.0.1:8000/items/3" target="_blank" rel="noopener">http://127.0.0.1:8000/items/3</a> 发送请求会得到 <code>{"item_id":3}</code> 其中 3 是 <strong>python 整型变量</strong></li></ul></li><li><p><strong>FastAPI</strong> 可以根据声明的类型对<strong>数据进行验证</strong>，例如访问 <a href="http://127.0.0.1:8000/items/foo" target="_blank" rel="noopener">http://127.0.0.1:8000/items/foo</a> 会得到如下错误</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"path"</span><span class="token punctuation">,</span>                <span class="token string">"item_id"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"value is not a valid integer"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"type_error.integer"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h4 id="Pydantic"><a href="#Pydantic" class="headerlink" title="Pydantic"></a>Pydantic</h4><p>所有的数据验证工作都是由 <strong><a href="https://pydantic-docs.helpmanual.io/" target="_blank" rel="noopener">Pydantic</a></strong> 提供的</p><h4 id="路径顺序"><a href="#路径顺序" class="headerlink" title="路径顺序"></a>路径顺序</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/me"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"the current user"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span></code></pre><p>如果用 <code>/users/me</code> 表示当前用户 <code>/users/{user_id}</code> 表示特定用户，则 <code>/users/me</code> 需要放在前面，在 <strong>fastapi</strong> 中路径是按照声明的顺序来依次匹配的</p><h4 id="Predefined-values"><a href="#Predefined-values" class="headerlink" title="Predefined values"></a>Predefined values</h4><p>如果希望接收到预先定义的合法路径变量，可以使用 <strong><a href="https://docs.python.org/3/library/enum.html" target="_blank" rel="noopener">Enum</a></strong> </p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token comment" spellcheck="true"># 继承自 str 相当于给每一个属性声明 str 类型</span><span class="token keyword">class</span> <span class="token class-name">ModelName</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    alexnet <span class="token operator">=</span> <span class="token string">"alexnet"</span>    resnet <span class="token operator">=</span> <span class="token string">"resnet"</span>    lenet <span class="token operator">=</span> <span class="token string">"lenet"</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/model/{model_name}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>model_name<span class="token punctuation">:</span> ModelName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 枚举的值可以从类中得到</span>    <span class="token keyword">if</span> model_name <span class="token operator">==</span> ModelName<span class="token punctuation">.</span>alexnet<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"model_name"</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Deep Learning FTW!"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 枚举的值可以从实例中得到</span>    <span class="token keyword">if</span> model_name<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">"lenet"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"model_name"</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"LeCNN all the images"</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"model_name"</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Have some residuals"</span><span class="token punctuation">}</span></code></pre><h4 id="包含路径的路径变量"><a href="#包含路径的路径变量" class="headerlink" title="包含路径的路径变量"></a>包含路径的路径变量</h4><p><strong>OpenAPI</strong> 不支持包含路径变量中包含路径，但是 <strong>FastAPI</strong> 借助 <strong>Starlette</strong> 的内置工具可以实现，并且生成的 API 文档仍然可用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/files/{file_path:path}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"file_path"</span><span class="token punctuation">:</span> file_path<span class="token punctuation">}</span></code></pre><p>在上面的例子中，如果希望 <code>file_path=/home/johndoe/myfile.txt</code> 则访问的地址为 <a href="http://127.0.0.1:8000/files//home/johndoe/myfile.txt" target="_blank" rel="noopener">http://127.0.0.1:8000/files//home/johndoe/myfile.txt</a></p><h4 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h4><p>使用 <strong>Python type declarations</strong> 可以：</p><ul><li>获得 IDE 支持，如错误检查，自动补全等</li><li>数据解析</li><li>数据验证</li><li>API 文档的注释</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Steps</title>
      <link href="/fastapi-first-steps/"/>
      <url>/fastapi-first-steps/</url>
      
        <content type="html"><![CDATA[<h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><h5 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span></code></pre><h5 id="启动-uvicorn-命令"><a href="#启动-uvicorn-命令" class="headerlink" title="启动 uvicorn 命令"></a>启动 uvicorn 命令</h5><pre class=" language-bash"><code class="language-bash">uvicorn main:app --reload</code></pre><ul><li>main：python 的模块，即文件 main.py</li><li>app：指 <code>python app=FastAPI()</code> 中的app</li><li>–reload：代码改变时重启服务器，<strong>只用于开发</strong></li></ul><h4 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h4><ul><li>交互式：位于 <a href="http://127.0.0.1:8000/docs" target="_blank" rel="noopener">http://127.0.0.1:8000/docs</a></li><li>参考文档：位于 <a href="http://127.0.0.1:8000/redoc" target="_blank" rel="noopener">http://127.0.0.1:8000/redoc</a></li></ul><h4 id="OpenAPI"><a href="#OpenAPI" class="headerlink" title="OpenAPI"></a>OpenAPI</h4><ul><li><strong>FastAPI</strong> 使用 <strong>OpenAPI</strong> 标准 (定义API协议的规范) 来生成定义API的 <em>协议</em> (对某些东西的抽象描述，而不是具体的实现)</li><li>可以在 <a href="http://127.0.0.1:8000/openapi.json" target="_blank" rel="noopener">http://127.0.0.1:8000/openapi.json</a> 查看自动生成的 <strong>OpenAPI</strong> 协议，该协议可以用来生成API文档和与前端、移动设备和物联网应用的代码(例如mock server？)</li></ul><h4 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h4><ul><li><strong>FastAPI</strong> 直接继承于 <strong>Starlette</strong> </li><li><strong>path</strong>：也称为 <strong>endpoint</strong> 或者 <strong>route</strong> ，指 URL 中从第一个 <code>/</code> 开始的部分</li><li><strong>Operation</strong>：指 HTTP 的方法，如 <code>POST</code>、<code>GET</code>、<code>PUT</code> 等</li><li><strong>FastAPI</strong> 可以将大多数的对象和模型自动转化为 <strong>JSON</strong> ，包括 ORMs</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastapi </tag>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray-configure</title>
      <link href="/v2ray-configure/"/>
      <url>/v2ray-configure/</url>
      
        <content type="html"><![CDATA[<h4 id="记录一下怕自己忘记了"><a href="#记录一下怕自己忘记了" class="headerlink" title="记录一下怕自己忘记了"></a>记录一下怕自己忘记了</h4><p><a href="https://www.ecsoe.com/archives/38.html" target="_blank" rel="noopener">v2配置</a><br><a href="https://www.4spaces.org/speed-up-your-vps-with-bbr-plus/" target="_blank" rel="noopener">v2加速</a><br><a href="https://blog.sprov.xyz/2019/03/11/" target="_blank" rel="noopener">cdn加速</a><br><a href="https://clients.hostwinds.com/" target="_blank" rel="noopener">hostwind 服务器</a><br><a href="https://www.namesilo.com/" target="_blank" rel="noopener">namesilo 域名网站</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket加密通信</title>
      <link href="/socket-jia-mi-tong-xin/"/>
      <url>/socket-jia-mi-tong-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="编程思路："><a href="#编程思路：" class="headerlink" title="编程思路："></a>编程思路：</h3><ol><li>客户端和服务器端建立连接</li><li>客户端产生非对称密钥，将公钥传送给服务器端</li><li>服务器端通过公钥将密钥进行加密并传送给客户端</li><li>客户端接收到密钥并进行解密，双方开始通信</li></ol><hr><h3 id="背景资料："><a href="#背景资料：" class="headerlink" title="背景资料："></a>背景资料：</h3><ul><li>AES原理(图解密码技术第三章)</li><li>RSA原理(图解密码技术第五章)</li><li><a href="https://www.cnblogs.com/wangcq/p/3520400.html" target="_blank" rel="noopener">Socket通信原理</a></li></ul><hr><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><p>注释已经非常详细了，这里就不再赘述。</p><hr><h4 id="异常类定义"><a href="#异常类定义" class="headerlink" title="异常类定义"></a>异常类定义</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AuthenticationError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Errorinfo<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>errorinfo <span class="token operator">=</span> Errorinfo    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>errorinfo</code></pre><hr><h4 id="服务器端代码"><a href="#服务器端代码" class="headerlink" title="服务器端代码"></a>服务器端代码</h4><hr><h5 id="服务器类定义："><a href="#服务器类定义：" class="headerlink" title="服务器类定义："></a>服务器类定义：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> rsa<span class="token keyword">import</span> pickle<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>fernet <span class="token keyword">import</span> Fernet<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> errorclass <span class="token keyword">import</span> AuthenticationError<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 使用图灵机器人的自动回复功能</span><span class="token keyword">from</span> tlrobot <span class="token keyword">import</span> get_reply<span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用来标记同时连接的客户端的数量</span>    number <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 默认的最大等待数量为5</span>    <span class="token comment" spellcheck="true"># 默认使用本机的ip地址和8080端口</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> backlog<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 默认使用AF_INET协议族，即ipv4地址和端口号的组合以及tcp协议</span>        self<span class="token punctuation">.</span>serverSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 绑定监听的ip地址和端口号</span>        self<span class="token punctuation">.</span>serverSocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 开始等待</span>        self<span class="token punctuation">.</span>serverSocket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span>backlog<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 该函数需要并行处理</span>    <span class="token keyword">def</span> <span class="token function">link_one_client</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取客户端对象和客户端地址</span>        clientSocket<span class="token punctuation">,</span> addr <span class="token operator">=</span> self<span class="token punctuation">.</span>serverSocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 客户端数量加1</span>        Server<span class="token punctuation">.</span>number <span class="token operator">=</span> Server<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 标记当前客户端编号</span>        now_number <span class="token operator">=</span> Server<span class="token punctuation">.</span>number        <span class="token comment" spellcheck="true"># 打印</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"和客户端{0}建立连接\n目标主机地址为：{1}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>now_number<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接受客户端传递的公钥</span>        <span class="token comment" spellcheck="true"># 这里可以加一个哈希函数检验公钥的正确性！</span>        <span class="token comment" spellcheck="true"># 运用pickle进行反序列化</span>        publicKeyPK<span class="token punctuation">,</span> pubKeySha256 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>publicKeyPK<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> pubKeySha256<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AuthenticationError<span class="token punctuation">(</span><span class="token string">"密钥被篡改！"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            publicKey <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>publicKeyPK<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已接受公钥"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下面是用公钥加密对称密钥并传递的过程</span>        <span class="token comment" spellcheck="true"># 产生用于对称加密的密钥</span>        sym_key <span class="token operator">=</span> Fernet<span class="token punctuation">.</span>generate_key<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用pickle进行序列化用来进行网络传输</span>        <span class="token comment" spellcheck="true"># 对密钥进行hash保证其准确性</span>        en_sym_key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sym_key<span class="token punctuation">)</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span>        en_sym_key_sha256 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>en_sym_key<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在加密传送密钥"</span><span class="token punctuation">)</span>        clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>en_sym_key<span class="token punctuation">,</span>en_sym_key_sha256<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这里可以添加密钥交换成功的函数</span>        <span class="token comment" spellcheck="true"># 初始化加密对象</span>        f <span class="token operator">=</span> Fernet<span class="token punctuation">(</span>sym_key<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 下面使用对称密钥进行加密对话的过程</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 接收到的加密消息</span>            en_recvData <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            recvData <span class="token operator">=</span> f<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>en_recvData<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接受到客户端{0}传来的消息：{1}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>now_number<span class="token punctuation">,</span> recvData<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 调用图灵机器人</span>            sendData <span class="token operator">=</span> get_reply<span class="token punctuation">(</span>recvData<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对消息进行加密</span>            en_sendData <span class="token operator">=</span> f<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>sendData<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>en_sendData<span class="token punctuation">)</span></code></pre><hr><h5 id="服务器端类实例化："><a href="#服务器端类实例化：" class="headerlink" title="服务器端类实例化："></a>服务器端类实例化：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> serverclass <span class="token keyword">import</span> Server<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用服务端程序！"</span><span class="token punctuation">)</span>server <span class="token operator">=</span> Server<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里使用多线程可以避免服务器阻塞在一个客户端上</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>server<span class="token punctuation">.</span>link_one_client<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><hr><h5 id="客户端类定义："><a href="#客户端类定义：" class="headerlink" title="客户端类定义："></a>客户端类定义：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> rsa<span class="token keyword">import</span> pickle<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>fernet <span class="token keyword">import</span> Fernet<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> errorclass <span class="token keyword">import</span> AuthenticationError<span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 产生非对称密钥</span>        self<span class="token punctuation">.</span>asyKey <span class="token operator">=</span> rsa<span class="token punctuation">.</span>newkeys<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 公钥和私钥</span>        self<span class="token punctuation">.</span>publicKey <span class="token operator">=</span> self<span class="token punctuation">.</span>asyKey<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>privateKey <span class="token operator">=</span> self<span class="token punctuation">.</span>asyKey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">link_server</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建socket通信对象</span>        <span class="token comment" spellcheck="true"># 默认使用AF_INET协议族，即ipv4地址和端口号的组合以及tcp协议</span>        clientSocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 默认连接服务器地址为本机ip和8080端口</span>        clientSocket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 向服务器传递公钥，和该公钥字符串化后的sha256值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在向服务器传送公钥"</span><span class="token punctuation">)</span>        sendKey <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>self<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span>        sendKeySha256 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>sendKey<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">(</span>sendKey<span class="token punctuation">,</span> sendKeySha256<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接受服务器传递的密钥并进行解密</span>        symKey<span class="token punctuation">,</span> symKeySha256 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>symKey<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> symKeySha256<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AuthenticationError<span class="token punctuation">(</span><span class="token string">"密钥被篡改！"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>symKey <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>symKey<span class="token punctuation">,</span> self<span class="token punctuation">.</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"密钥交换完成"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 初始化加密对象</span>        f <span class="token operator">=</span> Fernet<span class="token punctuation">(</span>self<span class="token punctuation">.</span>symKey<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            sendData <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入你要发送的消息："</span><span class="token punctuation">)</span>            en_sendData <span class="token operator">=</span> f<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>sendData<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            clientSocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>en_sendData<span class="token punctuation">)</span>            en_recvData <span class="token operator">=</span> clientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            recvData <span class="token operator">=</span> f<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>en_recvData<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"接受到服务器传来的消息：{0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>recvData<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><h5 id="客户端类实例化："><a href="#客户端类实例化：" class="headerlink" title="客户端类实例化："></a>客户端类实例化：</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> clientclass <span class="token keyword">import</span> Client<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎使用客户端程序！"</span><span class="token punctuation">)</span>client <span class="token operator">=</span> Client<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>link_server<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h4 id="调用图灵机器人的代码"><a href="#调用图灵机器人的代码" class="headerlink" title="调用图灵机器人的代码"></a>调用<a href="https://www.kancloud.cn/turing/www-tuling123-com/718218" target="_blank" rel="noopener">图灵</a>机器人的代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">get_reply</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    datas <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'reqType'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"perception"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"inputText"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> data            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"selfInfo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"location"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"city"</span><span class="token punctuation">:</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span>                    <span class="token string">"province"</span><span class="token punctuation">:</span> <span class="token string">"湖北"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"userInfo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># 这里填上自己的apiKey</span>            <span class="token string">"apiKey"</span><span class="token punctuation">:</span> <span class="token string">"*********************"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># userid可以随便填写</span>            <span class="token string">"userId"</span><span class="token punctuation">:</span> <span class="token string">"443545"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    datas <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>datas<span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"http://openapi.tuling123.com/openapi/api/v2"</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>datas<span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"results"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"values"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul><li><a href="https://cryptography.io/en/latest/" target="_blank" rel="noopener">cryptography</a></li><li><a href="https://www.jb51.net/article/119048.htm" target="_blank" rel="noopener">rsa</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017787560490144" target="_blank" rel="noopener">廖雪峰老师–网络编程</a></li><li><a href="https://segmentfault.com/a/1190000012968005" target="_blank" rel="noopener">python(3.x) 实现AES 加解密</a></li><li><a href="https://www.cnblogs.com/wangcq/p/3520400.html" target="_blank" rel="noopener">Socket通信原理</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
